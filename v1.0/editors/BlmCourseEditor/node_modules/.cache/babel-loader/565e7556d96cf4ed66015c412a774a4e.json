{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\media-editor\\\\components\\\\wave\\\\BlmMediaWave.tsx\";\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport WaveSurfer, { TimelinePlugin } from \"wavesurfer-js\";\nimport clsx from \"clsx\";\nimport { MediaPlayerTypes } from \"editor-constants\";\nimport { formatTime } from \"utils\";\nimport \"./styles.scss\";\nconst initWavesurfer = {\n  currentTime: 0,\n  scrollTime: 0,\n  currentDuration: 0,\n  pxPerSec: 100,\n  duration: 0,\n  width: 0\n};\n\nfunction BlmWaveForm(props) {\n  var _playerRef$current;\n\n  const {\n    type,\n    peaks,\n    duration,\n    playerRef,\n    render\n  } = props;\n  const containerRef = useRef(null);\n  const wavesurferRef = useRef(null);\n  const [state, setState] = useState(initWavesurfer);\n  const lottie = (_playerRef$current = playerRef.current) === null || _playerRef$current === void 0 ? void 0 : _playerRef$current.lottie;\n  const updateWavesurfer = useCallback(time => {\n    const container = containerRef.current;\n    const wavesurfer = wavesurferRef.current;\n\n    if (!wavesurfer || !container) {\n      return;\n    }\n\n    wavesurfer.setCurrentTime(time);\n    const currentTime = wavesurfer.getCurrentTime();\n    const duration = wavesurfer.getDuration();\n    const wrapperWidth = container.clientWidth;\n    const width = wavesurfer.drawer.width;\n    const pxPerSec = width / duration;\n    const currentDuration = wrapperWidth / pxPerSec;\n    const scrollX = wavesurfer.drawer.getScrollX();\n    const scrollTime = duration / width * scrollX;\n    setState(prev => {\n      if (prev.currentTime !== currentTime || prev.duration !== duration || prev.scrollTime !== scrollTime) {\n        return {\n          currentTime,\n          scrollTime,\n          currentDuration,\n          pxPerSec,\n          duration,\n          width\n        };\n      }\n\n      return prev;\n    });\n  }, []);\n  useEffect(() => {\n    const container = containerRef.current;\n    const isLottie = type === MediaPlayerTypes.Lottie;\n\n    if (container) {\n      const wavesurfer = WaveSurfer.create({\n        container: container,\n        waveColor: \"#bfd9f8\",\n        progressColor: \"#bfd9f8\",\n        cursorColor: \"red\",\n        fillParent: true,\n        scrollParent: true,\n        hideScrollbar: true,\n        autoCenter: true,\n        normalize: true,\n        pixelRatio: 1,\n        minPxPerSec: isLottie ? 25 : 100,\n        height: container.offsetHeight,\n        plugins: [TimelinePlugin.create({\n          container: \"#wavetimeline\",\n          unlabeledNotchColor: \"#98a3b7\",\n          primaryFontColor: \"#98a3b7\",\n          notchPercentHeight: 50,\n          formatTimeCallback: sec => {\n            return isLottie ? sec.toString() : formatTime(sec);\n          },\n          timeInterval: () => isLottie ? 1 : 0.5,\n          primaryLabelInterval: () => 2,\n          secondaryLabelInterval: () => 0\n        })]\n      });\n\n      const handleEvent = () => {\n        updateWavesurfer(0);\n      };\n\n      wavesurferRef.current = wavesurfer;\n      wavesurfer.on(\"ready\", handleEvent);\n      return () => {\n        wavesurfer.destroy();\n      };\n    }\n  }, [type, updateWavesurfer]);\n  useEffect(() => {\n    const wavesurfer = wavesurferRef.current;\n\n    if (wavesurfer && peaks) {\n      wavesurfer.load(peaks, duration);\n    }\n  }, [peaks, duration]);\n  useEffect(() => {\n    var _playerRef$current2;\n\n    const player = (_playerRef$current2 = playerRef.current) === null || _playerRef$current2 === void 0 ? void 0 : _playerRef$current2.element;\n\n    if (player && player instanceof HTMLMediaElement) {\n      const updateProgress = (useFrame = false) => {\n        updateWavesurfer(player.currentTime);\n\n        if (useFrame && !player.paused) {\n          requestAnimationFrame(() => updateProgress(true));\n        }\n      };\n\n      const handleEvent = event => {\n        updateProgress((event === null || event === void 0 ? void 0 : event.type) === \"play\");\n      };\n\n      player.addEventListener(\"play\", handleEvent);\n      player.addEventListener(\"pause\", handleEvent);\n      player.addEventListener(\"seeked\", handleEvent);\n      player.addEventListener(\"ended\", handleEvent);\n      return () => {\n        player.removeEventListener(\"play\", handleEvent);\n        player.removeEventListener(\"pause\", handleEvent);\n        player.removeEventListener(\"seeked\", handleEvent);\n        player.removeEventListener(\"ended\", handleEvent);\n      };\n    }\n  }, [playerRef, updateWavesurfer]);\n  useEffect(() => {\n    if (lottie) {\n      const updateProgress = (useFrame = false) => {\n        updateWavesurfer(lottie.currentFrame);\n\n        if (useFrame && !lottie.isPaused) {\n          requestAnimationFrame(() => updateProgress(true));\n        }\n      };\n\n      const handleEvent = event => {\n        updateProgress(event.type === \"enterFrame\");\n      };\n\n      lottie.addEventListener(\"enterFrame\", handleEvent);\n      lottie.addEventListener(\"complete\", handleEvent);\n      return () => {\n        try {\n          lottie.removeEventListener(\"enterFrame\", handleEvent);\n          lottie.removeEventListener(\"complete\", handleEvent);\n        } catch (er) {}\n      };\n    }\n  }, [lottie, updateWavesurfer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"waveform-wrapper\", {\n      loading: !peaks\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"waveform-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"wavetimeline\",\n    className: \"wavetimeline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    className: \"waveform\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }), peaks && render(state)));\n}\n\nexport default BlmWaveForm;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/media-editor/components/wave/BlmMediaWave.tsx"],"names":["React","useEffect","useState","useRef","useCallback","WaveSurfer","TimelinePlugin","clsx","MediaPlayerTypes","formatTime","initWavesurfer","currentTime","scrollTime","currentDuration","pxPerSec","duration","width","BlmWaveForm","props","type","peaks","playerRef","render","containerRef","wavesurferRef","state","setState","lottie","current","updateWavesurfer","time","container","wavesurfer","setCurrentTime","getCurrentTime","getDuration","wrapperWidth","clientWidth","drawer","scrollX","getScrollX","prev","isLottie","Lottie","create","waveColor","progressColor","cursorColor","fillParent","scrollParent","hideScrollbar","autoCenter","normalize","pixelRatio","minPxPerSec","height","offsetHeight","plugins","unlabeledNotchColor","primaryFontColor","notchPercentHeight","formatTimeCallback","sec","toString","timeInterval","primaryLabelInterval","secondaryLabelInterval","handleEvent","on","destroy","load","player","element","HTMLMediaElement","updateProgress","useFrame","paused","requestAnimationFrame","event","addEventListener","removeEventListener","currentFrame","isPaused","er","loading"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState, useRef, RefObject, useCallback } from \"react\";\r\nimport WaveSurfer, { TimelinePlugin } from \"wavesurfer-js\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { MediaWavesurfer } from \"types\";\r\nimport { MediaPlayerTypes } from \"editor-constants\";\r\nimport { formatTime } from \"utils\";\r\nimport { MediaPlayerRef } from \"../player\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  type: MediaPlayerTypes;\r\n  peaks?: Array<number>;\r\n  duration: number;\r\n  playerRef: RefObject<MediaPlayerRef>;\r\n  render: (wavesurfer: MediaWavesurfer) => ReactElement;\r\n}\r\n\r\nconst initWavesurfer: MediaWavesurfer = {\r\n  currentTime: 0,\r\n  scrollTime: 0,\r\n  currentDuration: 0,\r\n  pxPerSec: 100,\r\n  duration: 0,\r\n  width: 0,\r\n};\r\n\r\nfunction BlmWaveForm(props: CompProps) {\r\n  const { type, peaks, duration, playerRef, render } = props;\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const wavesurferRef = useRef<WaveSurfer | null>(null);\r\n  const [state, setState] = useState<MediaWavesurfer>(initWavesurfer);\r\n  const lottie = playerRef.current?.lottie;\r\n\r\n  const updateWavesurfer = useCallback((time: number) => {\r\n    const container = containerRef.current;\r\n    const wavesurfer = wavesurferRef.current;\r\n\r\n    if (!wavesurfer || !container) {\r\n      return;\r\n    }\r\n\r\n    wavesurfer.setCurrentTime(time);\r\n\r\n    const currentTime = wavesurfer.getCurrentTime();\r\n    const duration = wavesurfer.getDuration();\r\n    const wrapperWidth = container.clientWidth;\r\n    const width = wavesurfer.drawer.width;\r\n    const pxPerSec = width / duration;\r\n    const currentDuration = wrapperWidth / pxPerSec;\r\n    const scrollX = wavesurfer.drawer.getScrollX();\r\n    const scrollTime = (duration / width) * scrollX;\r\n\r\n    setState((prev) => {\r\n      if (\r\n        prev.currentTime !== currentTime ||\r\n        prev.duration !== duration ||\r\n        prev.scrollTime !== scrollTime\r\n      ) {\r\n        return {\r\n          currentTime,\r\n          scrollTime,\r\n          currentDuration,\r\n          pxPerSec,\r\n          duration,\r\n          width,\r\n        };\r\n      }\r\n\r\n      return prev;\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    const isLottie = type === MediaPlayerTypes.Lottie;\r\n\r\n    if (container) {\r\n      const wavesurfer = WaveSurfer.create({\r\n        container: container,\r\n        waveColor: \"#bfd9f8\",\r\n        progressColor: \"#bfd9f8\",\r\n        cursorColor: \"red\",\r\n        fillParent: true,\r\n        scrollParent: true,\r\n        hideScrollbar: true,\r\n        autoCenter: true,\r\n        normalize: true,\r\n        pixelRatio: 1,\r\n        minPxPerSec: isLottie ? 25 : 100,\r\n        height: container.offsetHeight,\r\n        plugins: [\r\n          TimelinePlugin.create({\r\n            container: \"#wavetimeline\",\r\n            unlabeledNotchColor: \"#98a3b7\",\r\n            primaryFontColor: \"#98a3b7\",\r\n            notchPercentHeight: 50,\r\n            formatTimeCallback: (sec: number) => {\r\n              return isLottie ? sec.toString() : formatTime(sec);\r\n            },\r\n            timeInterval: () => (isLottie ? 1 : 0.5) as any,\r\n            primaryLabelInterval: () => 2,\r\n            secondaryLabelInterval: () => 0,\r\n          }) as any,\r\n        ],\r\n      });\r\n\r\n      const handleEvent = () => {\r\n        updateWavesurfer(0);\r\n      };\r\n\r\n      wavesurferRef.current = wavesurfer;\r\n      wavesurfer.on(\"ready\", handleEvent);\r\n\r\n      return () => {\r\n        wavesurfer.destroy();\r\n      };\r\n    }\r\n  }, [type, updateWavesurfer]);\r\n\r\n  useEffect(() => {\r\n    const wavesurfer = wavesurferRef.current;\r\n\r\n    if (wavesurfer && peaks) {\r\n      wavesurfer.load(peaks, duration);\r\n    }\r\n  }, [peaks, duration]);\r\n\r\n  useEffect(() => {\r\n    const player = playerRef.current?.element;\r\n\r\n    if (player && player instanceof HTMLMediaElement) {\r\n      const updateProgress = (useFrame = false) => {\r\n        updateWavesurfer(player.currentTime);\r\n\r\n        if (useFrame && !player.paused) {\r\n          requestAnimationFrame(() => updateProgress(true));\r\n        }\r\n      };\r\n\r\n      const handleEvent = (event?: Event) => {\r\n        updateProgress(event?.type === \"play\");\r\n      };\r\n\r\n      player.addEventListener(\"play\", handleEvent);\r\n      player.addEventListener(\"pause\", handleEvent);\r\n      player.addEventListener(\"seeked\", handleEvent);\r\n      player.addEventListener(\"ended\", handleEvent);\r\n\r\n      return () => {\r\n        player.removeEventListener(\"play\", handleEvent);\r\n        player.removeEventListener(\"pause\", handleEvent);\r\n        player.removeEventListener(\"seeked\", handleEvent);\r\n        player.removeEventListener(\"ended\", handleEvent);\r\n      };\r\n    }\r\n  }, [playerRef, updateWavesurfer]);\r\n\r\n  useEffect(() => {\r\n    if (lottie) {\r\n      const updateProgress = (useFrame = false) => {\r\n        updateWavesurfer(lottie.currentFrame);\r\n\r\n        if (useFrame && !lottie.isPaused) {\r\n          requestAnimationFrame(() => updateProgress(true));\r\n        }\r\n      };\r\n\r\n      const handleEvent = (event: Event) => {\r\n        updateProgress(event.type === \"enterFrame\");\r\n      };\r\n\r\n      lottie.addEventListener(\"enterFrame\", handleEvent);\r\n      lottie.addEventListener(\"complete\", handleEvent);\r\n\r\n      return () => {\r\n        try {\r\n          lottie.removeEventListener(\"enterFrame\", handleEvent);\r\n          lottie.removeEventListener(\"complete\", handleEvent);\r\n        } catch (er) {}\r\n      };\r\n    }\r\n  }, [lottie, updateWavesurfer]);\r\n\r\n  return (\r\n    <div className={clsx(\"waveform-wrapper\", { loading: !peaks })}>\r\n      <div className=\"waveform-container\">\r\n        <div id=\"wavetimeline\" className=\"wavetimeline\" />\r\n        <div ref={containerRef} className=\"waveform\" />\r\n        {peaks && render(state)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmWaveForm;\r\n"]},"metadata":{},"sourceType":"module"}