{"ast":null,"code":"import { createShortUUID } from \"utils\";\nexport function setStyleSheetRules(rootDom, name, rules, duplicate) {\n  if (!rules) {\n    return;\n  }\n\n  let uuid = Array.from(rootDom.classList).find(cls => cls.startsWith(\"rt-etr-\"));\n\n  if (duplicate) {\n    Array.from(rootDom.classList).forEach(cls => {\n      if (cls.startsWith(\"rt-etr-\")) {\n        rootDom.classList.remove(cls);\n        var previousClass = cls;\n        uuid = \"rt-etr-\" + createShortUUID();\n        setUUIDSelector(rules, name, uuid, previousClass);\n        rootDom.classList.add(uuid);\n      }\n    });\n  }\n\n  if (!uuid && !duplicate) {\n    uuid = \"rt-etr-\" + createShortUUID();\n    setUUIDSelector(rules, name, uuid);\n    rootDom.classList.add(uuid);\n  }\n}\n\nconst setUUIDSelector = (rules, name, uuid, previousClass) => {\n  if (rules && name !== \"\") {\n    Array.from(rules).forEach(rule => {\n      if (rule instanceof CSSStyleRule) {\n        const reg = new RegExp(`q?${name}\\\\w?`, \"gi\");\n\n        if (previousClass) {\n          rule.selectorText = rule.selectorText.replaceAll(previousClass, uuid);\n        }\n\n        rule.selectorText = rule.selectorText.replaceAll(reg, uuid);\n      } else if (rule instanceof CSSMediaRule) {\n        setUUIDSelector(rule.cssRules, name, uuid, previousClass !== null && previousClass !== void 0 ? previousClass : undefined);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/html/component/stylesheet.ts"],"names":["createShortUUID","setStyleSheetRules","rootDom","name","rules","duplicate","uuid","Array","from","classList","find","cls","startsWith","forEach","remove","previousClass","setUUIDSelector","add","rule","CSSStyleRule","reg","RegExp","selectorText","replaceAll","CSSMediaRule","cssRules","undefined"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,OAAO,SAASC,kBAAT,CACLC,OADK,EAELC,IAFK,EAGLC,KAHK,EAILC,SAJK,EAKL;AACA,MAAI,CAACD,KAAL,EAAY;AACV;AACD;;AAED,MAAIE,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWN,OAAO,CAACO,SAAnB,EAA8BC,IAA9B,CAAoCC,GAAD,IAASA,GAAG,CAACC,UAAJ,CAAe,SAAf,CAA5C,CAAX;;AAEA,MAAIP,SAAJ,EAAe;AACbE,IAAAA,KAAK,CAACC,IAAN,CAAWN,OAAO,CAACO,SAAnB,EAA8BI,OAA9B,CAAuCF,GAAD,IAAS;AAC7C,UAAIA,GAAG,CAACC,UAAJ,CAAe,SAAf,CAAJ,EAA+B;AAC7BV,QAAAA,OAAO,CAACO,SAAR,CAAkBK,MAAlB,CAAyBH,GAAzB;AACA,YAAII,aAAa,GAAGJ,GAApB;AACAL,QAAAA,IAAI,GAAG,YAAYN,eAAe,EAAlC;AAEAgB,QAAAA,eAAe,CAACZ,KAAD,EAAQD,IAAR,EAAcG,IAAd,EAAoBS,aAApB,CAAf;AACAb,QAAAA,OAAO,CAACO,SAAR,CAAkBQ,GAAlB,CAAsBX,IAAtB;AACD;AACF,KATD;AAUD;;AAED,MAAI,CAACA,IAAD,IAAS,CAACD,SAAd,EAAyB;AACvBC,IAAAA,IAAI,GAAG,YAAYN,eAAe,EAAlC;AAEAgB,IAAAA,eAAe,CAACZ,KAAD,EAAQD,IAAR,EAAcG,IAAd,CAAf;AACAJ,IAAAA,OAAO,CAACO,SAAR,CAAkBQ,GAAlB,CAAsBX,IAAtB;AACD;AACF;;AAED,MAAMU,eAAe,GAAG,CACtBZ,KADsB,EAEtBD,IAFsB,EAGtBG,IAHsB,EAItBS,aAJsB,KAKnB;AACH,MAAIX,KAAK,IAAID,IAAI,KAAK,EAAtB,EAA0B;AACxBI,IAAAA,KAAK,CAACC,IAAN,CAAWJ,KAAX,EAAkBS,OAAlB,CAA2BK,IAAD,IAAU;AAClC,UAAIA,IAAI,YAAYC,YAApB,EAAkC;AAChC,cAAMC,GAAG,GAAG,IAAIC,MAAJ,CAAY,KAAIlB,IAAK,MAArB,EAA4B,IAA5B,CAAZ;;AACA,YAAIY,aAAJ,EAAmB;AACjBG,UAAAA,IAAI,CAACI,YAAL,GAAoBJ,IAAI,CAACI,YAAL,CAAkBC,UAAlB,CAA6BR,aAA7B,EAA4CT,IAA5C,CAApB;AACD;;AACDY,QAAAA,IAAI,CAACI,YAAL,GAAoBJ,IAAI,CAACI,YAAL,CAAkBC,UAAlB,CAA6BH,GAA7B,EAAkCd,IAAlC,CAApB;AACD,OAND,MAMO,IAAIY,IAAI,YAAYM,YAApB,EAAkC;AACvCR,QAAAA,eAAe,CAACE,IAAI,CAACO,QAAN,EAAgBtB,IAAhB,EAAsBG,IAAtB,EAA4BS,aAA5B,aAA4BA,aAA5B,cAA4BA,aAA5B,GAA6CW,SAA7C,CAAf;AACD;AACF,KAVD;AAWD;AACF,CAnBD","sourcesContent":["import { createShortUUID } from \"utils\";\r\n\r\nexport function setStyleSheetRules(\r\n  rootDom: HTMLElement,\r\n  name: string,\r\n  rules?: CSSRuleList,\r\n  duplicate?: string\r\n) {\r\n  if (!rules) {\r\n    return;\r\n  }\r\n\r\n  let uuid = Array.from(rootDom.classList).find((cls) => cls.startsWith(\"rt-etr-\"));\r\n\r\n  if (duplicate) {\r\n    Array.from(rootDom.classList).forEach((cls) => {\r\n      if (cls.startsWith(\"rt-etr-\")) {\r\n        rootDom.classList.remove(cls);\r\n        var previousClass = cls;\r\n        uuid = \"rt-etr-\" + createShortUUID();\r\n\r\n        setUUIDSelector(rules, name, uuid, previousClass);\r\n        rootDom.classList.add(uuid);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!uuid && !duplicate) {\r\n    uuid = \"rt-etr-\" + createShortUUID();\r\n\r\n    setUUIDSelector(rules, name, uuid);\r\n    rootDom.classList.add(uuid);\r\n  }\r\n}\r\n\r\nconst setUUIDSelector = (\r\n  rules: CSSRuleList,\r\n  name: string,\r\n  uuid: string,\r\n  previousClass?: string\r\n) => {\r\n  if (rules && name !== \"\") {\r\n    Array.from(rules).forEach((rule) => {\r\n      if (rule instanceof CSSStyleRule) {\r\n        const reg = new RegExp(`q?${name}\\\\w?`, \"gi\");\r\n        if (previousClass) {\r\n          rule.selectorText = rule.selectorText.replaceAll(previousClass, uuid);\r\n        }\r\n        rule.selectorText = rule.selectorText.replaceAll(reg, uuid);\r\n      } else if (rule instanceof CSSMediaRule) {\r\n        setUUIDSelector(rule.cssRules, name, uuid, previousClass ?? undefined);\r\n      }\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}