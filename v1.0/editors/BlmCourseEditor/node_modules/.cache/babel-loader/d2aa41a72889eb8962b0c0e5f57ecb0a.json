{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\media-picker-editor\\\\BlmMediaPickerEditor.tsx\";\nimport React, { Fragment, useState } from \"react\";\nimport BlmMediaPicker from \"../media-picker\";\nimport { BlmMediaEditor } from \"../media-editor\";\n\nfunction BlmMediaPickerEditor(props) {\n  const {\n    name,\n    data,\n    elementId,\n    showEdit = true,\n    onChange,\n    ...others\n  } = props;\n  const [show, setShow] = useState(false);\n\n  const handleEditClick = () => {\n    setShow(true);\n  };\n\n  const handleEditorSave = value => {\n    if (onChange) {\n      onChange({\n        target: {\n          name,\n          value\n        }\n      });\n    }\n\n    setShow(false);\n  };\n\n  const handleEditorClose = event => {\n    setShow(false);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlmMediaPicker, Object.assign({\n    name: name,\n    data: data,\n    elementId: elementId,\n    showEdit: showEdit,\n    onChange: onChange,\n    onEdit: handleEditClick,\n    sound: \"sound\"\n  }, others, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  })), data && show && /*#__PURE__*/React.createElement(BlmMediaEditor, {\n    open: show,\n    elementId: elementId,\n    data: data,\n    onSave: handleEditorSave,\n    onClose: handleEditorClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default BlmMediaPickerEditor;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/media-picker-editor/BlmMediaPickerEditor.tsx"],"names":["React","Fragment","useState","BlmMediaPicker","BlmMediaEditor","BlmMediaPickerEditor","props","name","data","elementId","showEdit","onChange","others","show","setShow","handleEditClick","handleEditorSave","value","target","handleEditorClose","event"],"mappings":";AAAA,OAAOA,KAAP,IAAgCC,QAAhC,EAAsDC,QAAtD,QAAsE,OAAtE;AAGA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,iBAA/B;;AAOA,SAASC,oBAAT,CAA8BC,KAA9B,EAA6D;AAC3D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,SAAd;AAAyBC,IAAAA,QAAQ,GAAG,IAApC;AAA0CC,IAAAA,QAA1C;AAAoD,OAAGC;AAAvD,MAAkEN,KAAxE;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMa,eAAe,GAAG,MAAM;AAC5BD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAME,gBAAgB,GAAIC,KAAD,IAAsB;AAC7C,QAAIN,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,MAAM,EAAE;AAAEX,UAAAA,IAAF;AAAQU,UAAAA;AAAR;AAAV,OAAD,CAAR;AACD;;AAEDH,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAND;;AAQA,QAAMK,iBAAiB,GAAIC,KAAD,IAAuB;AAC/CN,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,IAAI,EAAEP,IADR;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,SAAS,EAAEC,SAHb;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAME,IAAA,MAAM,EAAEI,eANV;AAOE,IAAA,KAAK,EAAC;AAPR,KAQMH,MARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAWGJ,IAAI,IAAIK,IAAR,iBACC,oBAAC,cAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,SAAS,EAAEJ,SAFb;AAGE,IAAA,IAAI,EAAED,IAHR;AAIE,IAAA,MAAM,EAAEQ,gBAJV;AAKE,IAAA,OAAO,EAAEG,iBALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,CADF;AAuBD;;AAED,eAAed,oBAAf","sourcesContent":["import React, { ComponentProps, Fragment, MouseEvent, useState } from \"react\";\r\n\r\nimport { MediaFile } from \"types\";\r\nimport BlmMediaPicker from \"../media-picker\";\r\nimport { BlmMediaEditor } from \"../media-editor\";\r\n\r\ntype AllProps = ComponentProps<typeof BlmMediaPicker> &\r\n  Omit<ComponentProps<typeof BlmMediaEditor>, \"open\" | \"data\" | \"onSave\" | \"onClose\">;\r\n\r\nexport interface MediaPickerEditorProps extends AllProps {}\r\n\r\nfunction BlmMediaPickerEditor(props: MediaPickerEditorProps) {\r\n  const { name, data, elementId, showEdit = true, onChange, ...others } = props;\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleEditClick = () => {\r\n    setShow(true);\r\n  };\r\n\r\n  const handleEditorSave = (value: MediaFile) => {\r\n    if (onChange) {\r\n      onChange({ target: { name, value } });\r\n    }\r\n\r\n    setShow(false);\r\n  };\r\n\r\n  const handleEditorClose = (event: MouseEvent) => {\r\n    setShow(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <BlmMediaPicker\r\n        name={name}\r\n        data={data}\r\n        elementId={elementId}\r\n        showEdit={showEdit}\r\n        onChange={onChange}\r\n        onEdit={handleEditClick}\r\n        sound=\"sound\"\r\n        {...others}\r\n      />\r\n      {data && show && (\r\n        <BlmMediaEditor\r\n          open={show}\r\n          elementId={elementId}\r\n          data={data}\r\n          onSave={handleEditorSave}\r\n          onClose={handleEditorClose}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default BlmMediaPickerEditor;\r\n"]},"metadata":{},"sourceType":"module"}