{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { uploadFiles, clearFile, addFiles, removeFiles, openDialog } from \"redux/actions\";\nimport { createUUID, validateFile } from \"utils\";\nexport function useUploadMedia(props) {\n  const {\n    elementId,\n    name,\n    data,\n    isLinked = false,\n    onChange\n  } = props;\n  const [uploadId, setUploadId] = useState();\n  const fileRef = useRef(null);\n  const files = useSelector(state => state.course.file.files.uploaded);\n  const dispatch = useDispatch();\n  const {\n    t\n  } = useTranslation();\n  const updateChange = useCallback(value => {\n    if (data && !isLinked) {\n      dispatch(removeFiles([data]));\n    }\n\n    if (onChange) {\n      onChange({\n        target: {\n          name,\n          value\n        }\n      });\n    }\n  }, [name, data, isLinked, onChange, dispatch]);\n  useEffect(() => {\n    if (uploadId) {\n      const medias = files[uploadId];\n\n      if (medias) {\n        const [media] = medias;\n\n        if (media) {\n          updateChange(media);\n          setUploadId(undefined);\n          dispatch(clearFile(uploadId));\n          dispatch(addFiles([media]));\n        }\n      }\n    }\n  }, [uploadId, files, updateChange, dispatch]);\n\n  const startUpload = file => {\n    const id = createUUID();\n    dispatch(uploadFiles(id, elementId, [file]));\n    setUploadId(id);\n  };\n\n  const browseMedia = event => {\n    if (fileRef.current) {\n      let file = fileRef.current;\n      file.click();\n      file.value = \"\";\n    }\n  };\n\n  const uploadMedia = files => {\n    if (files && files.length !== 0) {\n      const file = files[0];\n\n      try {\n        validateFile(file);\n        startUpload(file);\n      } catch (error) {\n        dispatch(openDialog(t(\"alert.warning\"), error.message));\n      }\n    }\n  };\n\n  const deleteMedia = () => {\n    updateChange();\n  };\n\n  return {\n    fileRef,\n    browseMedia,\n    uploadMedia,\n    deleteMedia\n  };\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/hooks/useUploadMedia.ts"],"names":["useCallback","useEffect","useRef","useState","useSelector","useDispatch","useTranslation","uploadFiles","clearFile","addFiles","removeFiles","openDialog","createUUID","validateFile","useUploadMedia","props","elementId","name","data","isLinked","onChange","uploadId","setUploadId","fileRef","files","state","course","file","uploaded","dispatch","t","updateChange","value","target","medias","media","undefined","startUpload","id","browseMedia","event","current","click","uploadMedia","length","error","message","deleteMedia"],"mappings":"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","sourcesContent":["import { MouseEvent, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CustomChangeEvent, MediaFile } from \"types\";\r\nimport { RootState } from \"redux/types\";\r\nimport { uploadFiles, clearFile, addFiles, removeFiles, openDialog } from \"redux/actions\";\r\nimport { createUUID, validateFile } from \"utils\";\r\n\r\nexport type UploadMediaChangeEvent = CustomChangeEvent<MediaFile | undefined>;\r\n\r\nexport interface UploadMediaProps {\r\n  elementId: string;\r\n  name: string;\r\n  data?: MediaFile | null;\r\n  isLinked?: boolean;\r\n  onChange?: (event: UploadMediaChangeEvent) => void;\r\n}\r\n\r\nexport function useUploadMedia(props: UploadMediaProps) {\r\n  const { elementId, name, data, isLinked = false, onChange } = props;\r\n  const [uploadId, setUploadId] = useState<string | undefined>();\r\n  const fileRef = useRef<HTMLInputElement>(null);\r\n  const files = useSelector((state: RootState) => state.course.file.files.uploaded);\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const updateChange = useCallback(\r\n    (value?: MediaFile) => {\r\n      if (data && !isLinked) {\r\n        dispatch(removeFiles([data]));\r\n      }\r\n\r\n      if (onChange) {\r\n        onChange({ target: { name, value } });\r\n      }\r\n    },\r\n    [name, data, isLinked, onChange, dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (uploadId) {\r\n      const medias = files[uploadId];\r\n\r\n      if (medias) {\r\n        const [media] = medias;\r\n\r\n        if (media) {\r\n          updateChange(media);\r\n          setUploadId(undefined);\r\n          dispatch(clearFile(uploadId));\r\n          dispatch(addFiles([media]));\r\n        }\r\n      }\r\n    }\r\n  }, [uploadId, files, updateChange, dispatch]);\r\n\r\n  const startUpload = (file: File) => {\r\n    const id = createUUID();\r\n\r\n    dispatch(uploadFiles(id, elementId, [file]));\r\n    setUploadId(id);\r\n  };\r\n\r\n  const browseMedia = (event: MouseEvent) => {\r\n    if (fileRef.current) {\r\n      let file = fileRef.current;\r\n      file.click();\r\n      file.value = \"\";\r\n    }\r\n  };\r\n\r\n  const uploadMedia = (files: FileList | null) => {\r\n    if (files && files.length !== 0) {\r\n      const file = files[0];\r\n\r\n      try {\r\n        validateFile(file);\r\n        startUpload(file);\r\n      } catch (error) {\r\n        dispatch(openDialog(t(\"alert.warning\"), (error as Error).message));\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteMedia = () => {\r\n    updateChange();\r\n  };\r\n\r\n  return { fileRef, browseMedia, uploadMedia, deleteMedia };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}