{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\question-editor\\\\components\\\\main\\\\propositions\\\\BlmQuestionPropositions.tsx\";\nimport React, { memo } from \"react\";\nimport clsx from \"clsx\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { QuestionPropositionInfo, QuestionProposition, BaseComponent } from \"types\";\nimport { reorderArray, createUUID } from \"utils\";\nimport { BlmToggleButton } from \"shared\";\nimport { updateQuestionPropositions, addQuestionProposition } from \"components/question-editor/reducers\";\nimport BlmQuestionProposition from \"../proposition\";\nimport \"./styles.scss\";\n\nfunction BlmQuestionPropositions(props) {\n  const {\n    data,\n    isEditable = true,\n    hasFBProbisitions,\n    dispatch\n  } = props;\n  const {\n    isMCQ,\n    restrictTypeToSingle,\n    randomize,\n    minimum,\n    maximum,\n    items\n  } = data;\n  const showFeedback = !isMCQ && hasFBProbisitions;\n  const isAddable = items.length < maximum;\n  const isDeletable = items.length > minimum;\n  const {\n    t\n  } = useTranslation(\"question-editor\");\n\n  const updateChange = newData => {\n    if (dispatch) {\n      dispatch(updateQuestionPropositions(newData));\n    }\n  };\n\n  const handleChange = event => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const newData = { ...data\n    };\n\n    if (name === \"mcq\") {\n      newData.isMCQ = value;\n    } else if (name === \"randomize\") {\n      newData.randomize = value;\n    }\n\n    updateChange(newData);\n  };\n\n  const handleDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    const newData = { ...data,\n      items: reorderArray(items, result.source.index, result.destination.index)\n    };\n    updateChange(newData);\n  };\n\n  const handleAddClick = event => {\n    if (isAddable) {\n      const newProposition = new QuestionProposition();\n      newProposition.id = createUUID();\n      newProposition.title.value = \"Answer \" + (items.length + 1);\n      newProposition.text.value = `${t(\"main.text_val\")}`;\n      const info = new QuestionPropositionInfo();\n      info.simple.title.value = `${t(\"main.info_title\")}`;\n      info.simple.text.value = `${t(\"main.add_info+\")}`;\n      newProposition.info = new BaseComponent(info);\n      newProposition.feedback.title.value = `${t(\"main.proposition_title\")}`;\n      newProposition.feedback.text.value = `${t(\"main.text_val\")}`;\n\n      if (dispatch) {\n        dispatch(addQuestionProposition(newProposition));\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-propositions-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-propositions-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, t(\"main.propositions\")), /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(\"main-propositions-switch-lbl\", {\n      disabled: !isEditable\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, t(\"main.scq\")), /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"mcq\",\n    label: t(\"main.mcq\"),\n    disabled: !isEditable || restrictTypeToSingle,\n    checked: isMCQ,\n    control: /*#__PURE__*/React.createElement(Switch, {\n      className: \"switch-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 20\n      }\n    }),\n    className: \"main-propositions-switch-ctrl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: \"randomize\",\n    selected: randomize,\n    disabled: !isEditable,\n    className: \"main-propositions-randomize-btn\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    className: \"main-proposition-list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), items.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    isDragDisabled: !isEditable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, (providedItem, snapshot) => /*#__PURE__*/React.createElement(BlmQuestionProposition, Object.assign({\n    ref: providedItem.innerRef,\n    key: item.id,\n    drag: providedItem.dragHandleProps,\n    data: item,\n    isDeletable: isEditable && isDeletable,\n    showFeedback: showFeedback,\n    dispatch: dispatch\n  }, providedItem.draggableProps, {\n    style: providedItem.draggableProps.style,\n    className: clsx({\n      dragging: snapshot.isDragging\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  })))), provided.placeholder))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-proposition-divider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"main-add-proposition-btn\", {\n      disabled: !isEditable || !isAddable\n    }),\n    onClick: handleAddClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default memo(BlmQuestionPropositions);","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/question-editor/components/main/propositions/BlmQuestionPropositions.tsx"],"names":["React","memo","clsx","DragDropContext","Droppable","Draggable","FormControlLabel","Switch","useTranslation","QuestionPropositionInfo","QuestionProposition","BaseComponent","reorderArray","createUUID","BlmToggleButton","updateQuestionPropositions","addQuestionProposition","BlmQuestionProposition","BlmQuestionPropositions","props","data","isEditable","hasFBProbisitions","dispatch","isMCQ","restrictTypeToSingle","randomize","minimum","maximum","items","showFeedback","isAddable","length","isDeletable","t","updateChange","newData","handleChange","event","target","name","value","type","checked","handleDragEnd","result","destination","source","index","handleAddClick","newProposition","id","title","text","info","simple","feedback","disabled","provided","innerRef","droppableProps","map","item","providedItem","snapshot","dragHandleProps","draggableProps","style","dragging","isDragging","placeholder"],"mappings":"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","sourcesContent":["import React, { memo, ChangeEvent, MouseEvent } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\r\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport {\r\n  QuestionPropositionInfo,\r\n  QuestionProposition,\r\n  QuestionPropositions,\r\n  BaseComponent,\r\n} from \"types\";\r\nimport { reorderArray, createUUID } from \"utils\";\r\nimport { BlmToggleButton, ToggleButtonChangeEvent } from \"shared\";\r\nimport {\r\n  QuestionEditorDispatch,\r\n  updateQuestionPropositions,\r\n  addQuestionProposition,\r\n} from \"components/question-editor/reducers\";\r\nimport BlmQuestionProposition from \"../proposition\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  data: QuestionPropositions;\r\n  isEditable?: boolean;\r\n  hasFBProbisitions?: boolean;\r\n  dispatch: QuestionEditorDispatch;\r\n}\r\n\r\nfunction BlmQuestionPropositions(props: CompProps) {\r\n  const { data, isEditable = true, hasFBProbisitions, dispatch } = props;\r\n  const { isMCQ, restrictTypeToSingle, randomize, minimum, maximum, items } = data;\r\n  const showFeedback = !isMCQ && hasFBProbisitions;\r\n  const isAddable = items.length < maximum;\r\n  const isDeletable = items.length > minimum;\r\n  const { t } = useTranslation(\"question-editor\");\r\n\r\n  const updateChange = (newData: QuestionPropositions) => {\r\n    if (dispatch) {\r\n      dispatch(updateQuestionPropositions(newData));\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<any> | ToggleButtonChangeEvent) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const newData = { ...data };\r\n\r\n    if (name === \"mcq\") {\r\n      newData.isMCQ = value;\r\n    } else if (name === \"randomize\") {\r\n      newData.randomize = value;\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const handleDragEnd = (result: DropResult) => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const newData: QuestionPropositions = {\r\n      ...data,\r\n      items: reorderArray(items, result.source.index, result.destination.index),\r\n    };\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const handleAddClick = (event: MouseEvent) => {\r\n    if (isAddable) {\r\n      const newProposition = new QuestionProposition();\r\n      newProposition.id = createUUID();\r\n\r\n      newProposition.title.value = \"Answer \" + (items.length + 1);\r\n      newProposition.text.value = `${t(\"main.text_val\")}`;\r\n\r\n      const info = new QuestionPropositionInfo();\r\n      info.simple.title.value = `${t(\"main.info_title\")}`;\r\n      info.simple.text.value = `${t(\"main.add_info+\")}`;\r\n\r\n      newProposition.info = new BaseComponent(info);\r\n\r\n      newProposition.feedback.title.value = `${t(\"main.proposition_title\")}`;\r\n      newProposition.feedback.text.value = `${t(\"main.text_val\")}`;\r\n\r\n      if (dispatch) {\r\n        dispatch(addQuestionProposition(newProposition));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-propositions-wrapper\">\r\n      <div className=\"main-propositions-header\">\r\n        <span>{t(\"main.propositions\")}</span>\r\n        <span\r\n          className={clsx(\"main-propositions-switch-lbl\", {\r\n            disabled: !isEditable,\r\n          })}\r\n        >\r\n          {t(\"main.scq\")}\r\n        </span>\r\n        <FormControlLabel\r\n          name=\"mcq\"\r\n          label={t(\"main.mcq\")}\r\n          disabled={!isEditable || restrictTypeToSingle}\r\n          checked={isMCQ}\r\n          control={<Switch className=\"switch-1\" />}\r\n          className=\"main-propositions-switch-ctrl\"\r\n          onChange={handleChange}\r\n        />\r\n        <BlmToggleButton\r\n          name=\"randomize\"\r\n          selected={randomize}\r\n          disabled={!isEditable}\r\n          className=\"main-propositions-randomize-btn\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n              className=\"main-proposition-list-wrapper\"\r\n            >\r\n              {items.map((item, index) => (\r\n                <Draggable\r\n                  key={item.id}\r\n                  draggableId={item.id}\r\n                  index={index}\r\n                  isDragDisabled={!isEditable}\r\n                >\r\n                  {(providedItem, snapshot) => (\r\n                    <BlmQuestionProposition\r\n                      ref={providedItem.innerRef}\r\n                      key={item.id}\r\n                      drag={providedItem.dragHandleProps}\r\n                      data={item}\r\n                      isDeletable={isEditable && isDeletable}\r\n                      showFeedback={showFeedback}\r\n                      dispatch={dispatch}\r\n                      {...providedItem.draggableProps}\r\n                      style={providedItem.draggableProps.style}\r\n                      className={clsx({\r\n                        dragging: snapshot.isDragging,\r\n                      })}\r\n                    />\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n      <div className=\"main-proposition-divider\">\r\n        <div\r\n          className={clsx(\"main-add-proposition-btn\", {\r\n            disabled: !isEditable || !isAddable,\r\n          })}\r\n          onClick={handleAddClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(BlmQuestionPropositions);\r\n"]},"metadata":{},"sourceType":"module"}