{"ast":null,"code":"import { BLMElement, ClassAttribute, StyleAttribute } from \"types\";\nimport { BackgroundSizeTypes, BackgroundOptionTypes, MediaBackgroundPosition } from \"editor-constants\";\nimport { createHTMLElement, isImage, createRGBA } from \"utils\";\nimport { setBLMElement, getHTMLElement } from \"../../core\";\nimport { BG_STYLES, createVideoElement, getMediaClass, clearOptions, clearEditorOptions } from \"./common\";\nexport function setPartPageBackgroundHTML(template, background) {\n  const htmlStr = template.html;\n  const htmlElement = createHTMLElement(`<div>${htmlStr}</div>`);\n\n  if (htmlElement) {\n    clearPartPageBackground(htmlElement);\n    setPartPageBackground(htmlElement, background);\n    return htmlElement.innerHTML;\n  }\n\n  return htmlStr;\n}\n\nfunction setPartPageBackground(parent, background) {\n  const outer = getHTMLElement(parent, \".outercontainer\");\n  const inner = getHTMLElement(parent, \".innercontainer\");\n  const {\n    media,\n    mediaSize,\n    tint: bgTint,\n    colorSize\n  } = background;\n  const {\n    main,\n    tint,\n    option,\n    optionValue,\n    option3,\n    position\n  } = media;\n\n  if (outer) {\n    const hasImage = main && isImage(main.type);\n    const bgColor = createRGBA(bgTint.color, bgTint.alpha);\n    const isSame = hasImage && bgColor && mediaSize === colorSize;\n\n    if (main) {\n      if (hasImage) {\n        const imageModel = new BLMElement();\n        const tintRgb = createRGBA(tint.color, tint.alpha);\n        const classAttr = new ClassAttribute();\n        const styleAttr = new StyleAttribute();\n        styleAttr.removables = BG_STYLES;\n        styleAttr.backgroundImage = `${tintRgb ? `linear-gradient(0deg, ${tintRgb}, ${tintRgb}), ` : \"\"}url(${main.url})`;\n\n        if (isSame) {\n          styleAttr.backgroundColor = bgColor;\n        }\n\n        classAttr.items.push(getMediaClass(option));\n        classAttr.items.push(getMediaClass(option3));\n\n        if (position) {\n          classAttr.items.push(position);\n        }\n\n        imageModel.classAttr = classAttr;\n        imageModel.styleAttr = styleAttr;\n\n        if (option === BackgroundOptionTypes.Parallax) {\n          imageModel.options = {\n            parallax: optionValue\n          };\n        }\n\n        imageModel.editorOptions = {\n          media: {\n            main,\n            tint: tint.color ? tint : undefined\n          }\n        };\n        setPartPageBackgrondModel(outer, inner, mediaSize, imageModel);\n      } else {\n        const videoElement = createVideoElement(media);\n\n        if (videoElement) {\n          if (mediaSize === BackgroundSizeTypes.Content) {\n            if (inner && inner.parentElement) {\n              inner.parentElement.insertBefore(videoElement, inner);\n            }\n          } else {\n            outer.insertBefore(videoElement, outer.firstChild);\n          }\n        }\n      }\n    }\n\n    if (!isSame && bgColor) {\n      const colorModel = new BLMElement();\n      const styleAttr = new StyleAttribute();\n      styleAttr.removables = BG_STYLES;\n      styleAttr.backgroundColor = bgColor;\n      colorModel.styleAttr = styleAttr;\n      setPartPageBackgrondModel(outer, inner, colorSize, colorModel);\n    }\n  }\n}\n\nfunction setPartPageBackgrondModel(outer, inner, size, model) {\n  const target = size === BackgroundSizeTypes.Content ? inner : outer;\n\n  if (target) {\n    if (model.options) {\n      const options = clearOptions(target);\n      model.options = { ...options,\n        ...model.options\n      };\n    }\n\n    if (model.editorOptions) {\n      const editorOptions = clearEditorOptions(target);\n      model.editorOptions = { ...editorOptions,\n        ...model.editorOptions\n      };\n    }\n\n    setBLMElement(target, model);\n  }\n}\n\nfunction clearPartPageBackground(parent) {\n  const outer = getHTMLElement(parent, \".outercontainer\");\n  const inner = getHTMLElement(parent, \".innercontainer\");\n  const video = getHTMLElement(parent, \".videoouter\");\n\n  if (video && video.parentElement) {\n    video.parentElement.removeChild(video);\n  }\n\n  if (outer) {\n    clearPartPageBackgroundHTML(outer);\n  }\n\n  if (inner) {\n    clearPartPageBackgroundHTML(inner);\n  }\n}\n\nfunction clearPartPageBackgroundHTML(element) {\n  const model = new BLMElement();\n  model.classAttr = new ClassAttribute();\n  model.classAttr.removables = [...Object.values(MediaBackgroundPosition), \"backgroundstandard\", \"backgroundparallaxe\", \"backgroundmask\", \"backgroundfullscreen\", \"backgroundcover\", \"backgroundcontain\", \"backgroundnoresize\"];\n  model.styleAttr = new StyleAttribute();\n  model.styleAttr.removables = BG_STYLES;\n  model.options = clearOptions(element);\n  model.editorOptions = clearEditorOptions(element);\n  setBLMElement(element, model);\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/html/background/partpage.ts"],"names":["BLMElement","ClassAttribute","StyleAttribute","BackgroundSizeTypes","BackgroundOptionTypes","MediaBackgroundPosition","createHTMLElement","isImage","createRGBA","setBLMElement","getHTMLElement","BG_STYLES","createVideoElement","getMediaClass","clearOptions","clearEditorOptions","setPartPageBackgroundHTML","template","background","htmlStr","html","htmlElement","clearPartPageBackground","setPartPageBackground","innerHTML","parent","outer","inner","media","mediaSize","tint","bgTint","colorSize","main","option","optionValue","option3","position","hasImage","type","bgColor","color","alpha","isSame","imageModel","tintRgb","classAttr","styleAttr","removables","backgroundImage","url","backgroundColor","items","push","Parallax","options","parallax","editorOptions","undefined","setPartPageBackgrondModel","videoElement","Content","parentElement","insertBefore","firstChild","colorModel","size","model","target","video","removeChild","clearPartPageBackgroundHTML","element","Object","values"],"mappings":"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","sourcesContent":["import {\r\n  BLMElement,\r\n  ClassAttribute,\r\n  StyleAttribute,\r\n  CourseElementTemplate,\r\n  PartPageBackground,\r\n  TemplateEditorOptionsJSON,\r\n  TemplateOptionsJSON,\r\n} from \"types\";\r\nimport {\r\n  BackgroundSizeTypes,\r\n  BackgroundOptionTypes,\r\n  MediaBackgroundPosition,\r\n} from \"editor-constants\";\r\nimport { createHTMLElement, isImage, createRGBA } from \"utils\";\r\nimport { setBLMElement, getHTMLElement } from \"../../core\";\r\nimport {\r\n  BG_STYLES,\r\n  createVideoElement,\r\n  getMediaClass,\r\n  clearOptions,\r\n  clearEditorOptions,\r\n} from \"./common\";\r\n\r\nexport function setPartPageBackgroundHTML(\r\n  template: CourseElementTemplate,\r\n  background: PartPageBackground\r\n) {\r\n  const htmlStr = template.html;\r\n  const htmlElement = createHTMLElement(`<div>${htmlStr}</div>`);\r\n\r\n  if (htmlElement) {\r\n    clearPartPageBackground(htmlElement);\r\n    setPartPageBackground(htmlElement, background);\r\n\r\n    return htmlElement.innerHTML;\r\n  }\r\n\r\n  return htmlStr;\r\n}\r\n\r\nfunction setPartPageBackground(parent: HTMLElement, background: PartPageBackground) {\r\n  const outer = getHTMLElement(parent, \".outercontainer\");\r\n  const inner = getHTMLElement(parent, \".innercontainer\");\r\n  const { media, mediaSize, tint: bgTint, colorSize } = background;\r\n  const { main, tint, option, optionValue, option3, position } = media;\r\n\r\n  if (outer) {\r\n    const hasImage = main && isImage(main.type);\r\n    const bgColor = createRGBA(bgTint.color, bgTint.alpha);\r\n    const isSame = hasImage && bgColor && mediaSize === colorSize;\r\n\r\n    if (main) {\r\n      if (hasImage) {\r\n        const imageModel = new BLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>();\r\n        const tintRgb = createRGBA(tint.color, tint.alpha);\r\n        const classAttr = new ClassAttribute();\r\n        const styleAttr = new StyleAttribute();\r\n\r\n        styleAttr.removables = BG_STYLES;\r\n        styleAttr.backgroundImage = `${\r\n          tintRgb ? `linear-gradient(0deg, ${tintRgb}, ${tintRgb}), ` : \"\"\r\n        }url(${main.url})`;\r\n\r\n        if (isSame) {\r\n          styleAttr.backgroundColor = bgColor;\r\n        }\r\n\r\n        classAttr.items.push(getMediaClass(option));\r\n        classAttr.items.push(getMediaClass(option3));\r\n\r\n        if (position) {\r\n          classAttr.items.push(position);\r\n        }\r\n\r\n        imageModel.classAttr = classAttr;\r\n        imageModel.styleAttr = styleAttr;\r\n\r\n        if (option === BackgroundOptionTypes.Parallax) {\r\n          imageModel.options = { parallax: optionValue as number };\r\n        }\r\n\r\n        imageModel.editorOptions = {\r\n          media: { main, tint: tint.color ? tint : undefined },\r\n        };\r\n\r\n        setPartPageBackgrondModel(outer, inner, mediaSize, imageModel);\r\n      } else {\r\n        const videoElement = createVideoElement(media);\r\n\r\n        if (videoElement) {\r\n          if (mediaSize === BackgroundSizeTypes.Content) {\r\n            if (inner && inner.parentElement) {\r\n              inner.parentElement.insertBefore(videoElement, inner);\r\n            }\r\n          } else {\r\n            outer.insertBefore(videoElement, outer.firstChild);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isSame && bgColor) {\r\n      const colorModel = new BLMElement();\r\n      const styleAttr = new StyleAttribute();\r\n\r\n      styleAttr.removables = BG_STYLES;\r\n      styleAttr.backgroundColor = bgColor;\r\n\r\n      colorModel.styleAttr = styleAttr;\r\n\r\n      setPartPageBackgrondModel(outer, inner, colorSize, colorModel);\r\n    }\r\n  }\r\n}\r\n\r\nfunction setPartPageBackgrondModel(\r\n  outer: HTMLElement,\r\n  inner: HTMLElement | null,\r\n  size: BackgroundSizeTypes,\r\n  model: BLMElement\r\n) {\r\n  const target = size === BackgroundSizeTypes.Content ? inner : outer;\r\n\r\n  if (target) {\r\n    if (model.options) {\r\n      const options = clearOptions(target);\r\n\r\n      model.options = { ...options, ...model.options };\r\n    }\r\n\r\n    if (model.editorOptions) {\r\n      const editorOptions = clearEditorOptions(target);\r\n\r\n      model.editorOptions = { ...editorOptions, ...model.editorOptions };\r\n    }\r\n\r\n    setBLMElement(target, model);\r\n  }\r\n}\r\n\r\nfunction clearPartPageBackground(parent: HTMLElement) {\r\n  const outer = getHTMLElement(parent, \".outercontainer\");\r\n  const inner = getHTMLElement(parent, \".innercontainer\");\r\n  const video = getHTMLElement(parent, \".videoouter\");\r\n\r\n  if (video && video.parentElement) {\r\n    video.parentElement.removeChild(video);\r\n  }\r\n\r\n  if (outer) {\r\n    clearPartPageBackgroundHTML(outer);\r\n  }\r\n\r\n  if (inner) {\r\n    clearPartPageBackgroundHTML(inner);\r\n  }\r\n}\r\n\r\nfunction clearPartPageBackgroundHTML(element: HTMLElement) {\r\n  const model = new BLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>();\r\n\r\n  model.classAttr = new ClassAttribute();\r\n  model.classAttr.removables = [\r\n    ...Object.values(MediaBackgroundPosition),\r\n    \"backgroundstandard\",\r\n    \"backgroundparallaxe\",\r\n    \"backgroundmask\",\r\n    \"backgroundfullscreen\",\r\n    \"backgroundcover\",\r\n    \"backgroundcontain\",\r\n    \"backgroundnoresize\",\r\n  ];\r\n  model.styleAttr = new StyleAttribute();\r\n  model.styleAttr.removables = BG_STYLES;\r\n  model.options = clearOptions(element);\r\n  model.editorOptions = clearEditorOptions(element);\r\n\r\n  setBLMElement(element, model);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}