{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n\n\nvar DraftEntityInstance = require(\"./DraftEntityInstance\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar uuid = require(\"./uuid\");\n\nvar OrderedMap = Immutable.OrderedMap;\nvar instances = OrderedMap();\nvar instanceKey = uuid();\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\n\nvar DraftEntity = {\n  /**\n   * Get all the entities in the content state.\n   */\n  __getAll: function __getAll() {\n    return instances;\n  },\n\n  /**\n   * Load the entity map with the given set of entities.\n   */\n  __loadWithEntities: function __loadWithEntities(entities) {\n    instances = entities;\n    instanceKey = uuid();\n  },\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({\n      type: type,\n      mutability: mutability,\n      data: data || {}\n    }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    instanceKey = uuid();\n    instances = instances.set(instanceKey, instance);\n    return instanceKey;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n  get: function get(key) {\n    return DraftEntity.__get(key);\n  },\n  set: function set(key, newInstance) {\n    instances = instances.set(key, newInstance);\n    return DraftEntity;\n  },\n  last: function last() {\n    return instances.last();\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n\n    var newData = _objectSpread(_objectSpread({}, instance.getData()), toMerge);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\nmodule.exports = DraftEntity;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/node_modules/draft-js/lib/DraftEntity.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","DraftEntityInstance","require","Immutable","invariant","uuid","OrderedMap","instances","instanceKey","DraftEntity","__getAll","__loadWithEntities","entities","__getLastCreatedEntityKey","__create","type","mutability","data","__add","instance","set","__get","get","process","env","NODE_ENV","newInstance","last","__mergeData","toMerge","newData","getData","__replaceData","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\nvar DraftEntityInstance = require(\"./DraftEntityInstance\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar uuid = require(\"./uuid\");\n\nvar OrderedMap = Immutable.OrderedMap;\nvar instances = OrderedMap();\nvar instanceKey = uuid();\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * Get all the entities in the content state.\n   */\n  __getAll: function __getAll() {\n    return instances;\n  },\n\n  /**\n   * Load the entity map with the given set of entities.\n   */\n  __loadWithEntities: function __loadWithEntities(entities) {\n    instances = entities;\n    instanceKey = uuid();\n  },\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({\n      type: type,\n      mutability: mutability,\n      data: data || {}\n    }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    instanceKey = uuid();\n    instances = instances.set(instanceKey, instance);\n    return instanceKey;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n  get: function get(key) {\n    return DraftEntity.__get(key);\n  },\n  set: function set(key, newInstance) {\n    instances = instances.set(key, newInstance);\n    return DraftEntity;\n  },\n  last: function last() {\n    return instances.last();\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n\n    var newData = _objectSpread(_objectSpread({}, instance.getData()), toMerge);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\nmodule.exports = DraftEntity;"]},"metadata":{},"sourceType":"script"}