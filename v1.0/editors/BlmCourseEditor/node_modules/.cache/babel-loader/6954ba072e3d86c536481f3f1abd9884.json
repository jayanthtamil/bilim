{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\domain\\\\templates-panel\\\\template-list\\\\BlmTemplateList.tsx\";\nimport React, { useState, Fragment, useEffect, useContext, useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { Popover } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { hasTabCategory, hasGroupCategory } from \"utils\";\nimport { Tabs, Tab } from \"shared/material-ui\";\nimport TemplatesPanelContext from \"../TemplatesPanelContext\";\nimport BlmVariantList from \"../variant-list\";\nimport BlmTemplateListItem from \"./template-list-item\";\nimport TemplateListContext from \"./TemplateListContext\";\nimport \"./template-list.scss\";\nconst initTooltip = {\n  show: false,\n  anchorEle: undefined,\n  text: \"\"\n};\n\nfunction createTabs(categories) {\n  if (categories) {\n    const tabs = categories.map((category, index) => {\n      const {\n        name,\n        children,\n        description\n      } = category;\n      let tabChild;\n\n      if (hasGroupCategory(category)) {\n        tabChild = createGroups(children);\n      } else {\n        tabChild = createTemplates(children);\n      }\n\n      return /*#__PURE__*/React.createElement(Tab, {\n        key: index,\n        label: description ? description : name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, tabChild);\n    });\n    return /*#__PURE__*/React.createElement(Tabs, {\n      className: \"template-tabs-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }\n    }, tabs);\n  }\n}\n\nfunction createGroups(categories) {\n  if (categories) {\n    const groups = categories.map((category, index) => {\n      return /*#__PURE__*/React.createElement(BlmTemplageGroup, {\n        key: index,\n        data: category,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 14\n        }\n      });\n    });\n    return groups;\n  }\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 10\n    }\n  });\n}\n\nfunction createTemplates(templates) {\n  const list = templates.map((template, index) => {\n    return /*#__PURE__*/React.createElement(BlmTemplateListItem, {\n      key: index,\n      data: template,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }, list);\n}\n\nfunction BlmTemplageGroup(props) {\n  const {\n    data\n  } = props;\n  const {\n    name,\n    children,\n    description\n  } = data;\n  const [open, setOpen] = useState(true);\n\n  const handleCloseClick = event => {\n    setOpen(!open);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"template-group-wrapper\", {\n      collapse: !open\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-group-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"template-group-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, description ? description : name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"template-group-expand-btn\",\n    onClick: handleCloseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), createTemplates(children));\n}\n\nfunction BlmTemplateList(props) {\n  const {\n    data,\n    show,\n    isDark,\n    onCloseClick\n  } = props;\n  const {\n    /* name, */\n    info,\n    children\n    /* description */\n\n  } = data;\n  const {\n    onAddTemplateClick\n  } = useContext(TemplatesPanelContext);\n  const [tooltip, setTooltip] = useState(initTooltip);\n  const [selectedTemplate, setSelectedTemplate] = useState();\n  const [showVariants, setShowVariants] = useState(false);\n  const showWarning = !hasTabCategory(data);\n  const {\n    t\n  } = useTranslation(\"domain\");\n  const varaints = useMemo(() => {\n    if (selectedTemplate) {\n      return [selectedTemplate, ...selectedTemplate.variants];\n    }\n  }, [selectedTemplate]);\n  useEffect(() => {\n    setSelectedTemplate(undefined);\n    setShowVariants(false);\n  }, [data]);\n\n  const showTooltip = (anchorEle, text) => {\n    setTooltip({\n      show: true,\n      anchorEle: anchorEle,\n      text: text\n    });\n  };\n\n  const handleCategoryInfoClick = event => {\n    if (info) {\n      showTooltip(event.currentTarget, info);\n    }\n  };\n\n  const handlePopoverClose = event => {\n    setTooltip({\n      show: false,\n      anchorEle: undefined,\n      text: \"\"\n    });\n  };\n\n  const handleAddClick = template => {\n    setSelectedTemplate(template);\n\n    if (onAddTemplateClick) {\n      onAddTemplateClick(template, isDark ? isDark : false);\n    }\n  };\n\n  const handleVaraintsClick = template => {\n    setSelectedTemplate(template);\n    setShowVariants(true);\n  };\n\n  const handleVariantCloseClick = event => {\n    setShowVariants(false);\n  };\n\n  const handleCloseClick = event => {\n    if (onCloseClick) {\n      onCloseClick(event);\n    }\n  };\n\n  const createChildren = () => {\n    if (children && children.length > 0) {\n      if (hasTabCategory(data)) {\n        return createTabs(children);\n      } else if (hasGroupCategory(data)) {\n        return createGroups(children);\n      } else {\n        return createTemplates(children);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"template-list-panel\", {\n      show: show\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-list-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, info && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-list-info\",\n    onClick: handleCategoryInfoClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 20\n    }\n  }), showWarning && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-list-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 27\n    }\n  }, t(\"template_list.warning\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-list-close-btn\",\n    onClick: handleCloseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-list-scroller custom-scrollbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TemplateListContext.Provider, {\n    value: {\n      selectedTemplate: selectedTemplate,\n      onInfoClick: showTooltip,\n      onAddClick: handleAddClick,\n      onVariantsClick: handleVaraintsClick\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, createChildren()))), selectedTemplate && varaints && /*#__PURE__*/React.createElement(BlmVariantList, {\n    title: selectedTemplate.name,\n    data: varaints,\n    isBgChecked: isDark,\n    show: show && showVariants,\n    onCloseClick: handleVariantCloseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Popover, {\n    open: tooltip.show,\n    anchorEl: tooltip.anchorEle,\n    anchorOrigin: {\n      vertical: \"center\",\n      horizontal: \"right\"\n    },\n    transformOrigin: {\n      vertical: 3,\n      horizontal: -7\n    },\n    className: \"tempalte-list-popover\",\n    onClose: handlePopoverClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tempalte-list-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, tooltip.text)));\n}\n\nexport default BlmTemplateList;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/domain/templates-panel/template-list/BlmTemplateList.tsx"],"names":["React","useState","Fragment","useEffect","useContext","useMemo","clsx","Popover","useTranslation","hasTabCategory","hasGroupCategory","Tabs","Tab","TemplatesPanelContext","BlmVariantList","BlmTemplateListItem","TemplateListContext","initTooltip","show","anchorEle","undefined","text","createTabs","categories","tabs","map","category","index","name","children","description","tabChild","createGroups","createTemplates","groups","templates","list","template","BlmTemplageGroup","props","data","open","setOpen","handleCloseClick","event","collapse","BlmTemplateList","isDark","onCloseClick","info","onAddTemplateClick","tooltip","setTooltip","selectedTemplate","setSelectedTemplate","showVariants","setShowVariants","showWarning","t","varaints","variants","showTooltip","handleCategoryInfoClick","currentTarget","handlePopoverClose","handleAddClick","handleVaraintsClick","handleVariantCloseClick","createChildren","length","onInfoClick","onAddClick","onVariantsClick","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { useState, Fragment, useEffect, MouseEvent, useContext, useMemo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { Popover } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Template, TemplateCategory } from \"types\";\r\nimport { hasTabCategory, hasGroupCategory } from \"utils\";\r\nimport { Tabs, Tab } from \"shared/material-ui\";\r\nimport TemplatesPanelContext from \"../TemplatesPanelContext\";\r\nimport BlmVariantList from \"../variant-list\";\r\nimport BlmTemplateListItem from \"./template-list-item\";\r\nimport TemplateListContext from \"./TemplateListContext\";\r\nimport \"./template-list.scss\";\r\n\r\ninterface CompProps {\r\n  data: TemplateCategory;\r\n  show: boolean;\r\n  isDark?: boolean;\r\n  onCloseClick: (event: MouseEvent) => void;\r\n}\r\n\r\ninterface TooltipState {\r\n  show: boolean;\r\n  anchorEle?: HTMLElement;\r\n  text: string;\r\n}\r\n\r\ninterface GroupCompProps {\r\n  data: TemplateCategory;\r\n}\r\n\r\nconst initTooltip: TooltipState = {\r\n  show: false,\r\n  anchorEle: undefined,\r\n  text: \"\",\r\n};\r\n\r\nfunction createTabs(categories: TemplateCategory[]) {\r\n  if (categories) {\r\n    const tabs = categories.map((category, index) => {\r\n      const { name, children, description } = category;\r\n      let tabChild;\r\n\r\n      if (hasGroupCategory(category)) {\r\n        tabChild = createGroups(children as TemplateCategory[]);\r\n      } else {\r\n        tabChild = createTemplates(children as Template[]);\r\n      }\r\n      return (\r\n        <Tab key={index} label={description ? description : name}>\r\n          {tabChild}\r\n        </Tab>\r\n      );\r\n    });\r\n\r\n    return <Tabs className=\"template-tabs-wrapper\">{tabs}</Tabs>;\r\n  }\r\n}\r\n\r\nfunction createGroups(categories: TemplateCategory[]) {\r\n  if (categories) {\r\n    const groups = categories.map((category, index) => {\r\n      return <BlmTemplageGroup key={index} data={category} />;\r\n    });\r\n\r\n    return groups;\r\n  }\r\n  return <Fragment />;\r\n}\r\n\r\nfunction createTemplates(templates: Template[]) {\r\n  const list = templates.map((template, index) => {\r\n    return <BlmTemplateListItem key={index} data={template} />;\r\n  });\r\n\r\n  return <div className=\"template-list-wrapper\">{list}</div>;\r\n}\r\n\r\nfunction BlmTemplageGroup(props: GroupCompProps) {\r\n  const { data } = props;\r\n  const { name, children, description } = data;\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const handleCloseClick = (event: MouseEvent) => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\"template-group-wrapper\", {\r\n        collapse: !open,\r\n      })}\r\n    >\r\n      <div className=\"template-group-header\">\r\n        <span className=\"template-group-title\">{description ? description : name}</span>\r\n        <span className=\"template-group-expand-btn\" onClick={handleCloseClick} />\r\n      </div>\r\n      {createTemplates(children as Template[])}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction BlmTemplateList(props: CompProps) {\r\n  const { data, show, isDark, onCloseClick } = props;\r\n  const { /* name, */ info, children, /* description */ } = data;\r\n  const { onAddTemplateClick } = useContext(TemplatesPanelContext);\r\n  const [tooltip, setTooltip] = useState(initTooltip);\r\n  const [selectedTemplate, setSelectedTemplate] = useState<Template>();\r\n  const [showVariants, setShowVariants] = useState(false);\r\n  const showWarning = !hasTabCategory(data);\r\n  const { t } = useTranslation(\"domain\");\r\n\r\n  const varaints = useMemo(() => {\r\n    if (selectedTemplate) {\r\n      return [selectedTemplate, ...selectedTemplate.variants];\r\n    }\r\n  }, [selectedTemplate]);\r\n\r\n  useEffect(() => {\r\n    setSelectedTemplate(undefined);\r\n    setShowVariants(false);\r\n  }, [data]);\r\n\r\n  const showTooltip = (anchorEle: HTMLElement, text: string) => {\r\n    setTooltip({\r\n      show: true,\r\n      anchorEle: anchorEle,\r\n      text: text,\r\n    });\r\n  };\r\n\r\n  const handleCategoryInfoClick = (event: MouseEvent<HTMLElement>) => {\r\n    if (info) {\r\n      showTooltip(event.currentTarget, info);\r\n    }\r\n  };\r\n\r\n  const handlePopoverClose = (event: MouseEvent) => {\r\n    setTooltip({\r\n      show: false,\r\n      anchorEle: undefined,\r\n      text: \"\",\r\n    });\r\n  };\r\n\r\n  const handleAddClick = (template: Template) => {\r\n    setSelectedTemplate(template);\r\n\r\n    if (onAddTemplateClick) {\r\n      onAddTemplateClick(template, isDark ? isDark : false);\r\n    }\r\n  };\r\n\r\n  const handleVaraintsClick = (template: Template) => {\r\n    setSelectedTemplate(template);\r\n    setShowVariants(true);\r\n  };\r\n\r\n  const handleVariantCloseClick = (event: MouseEvent) => {\r\n    setShowVariants(false);\r\n  };\r\n\r\n  const handleCloseClick = (event: MouseEvent) => {\r\n    if (onCloseClick) {\r\n      onCloseClick(event);\r\n    }\r\n  };\r\n\r\n  const createChildren = () => {\r\n    if (children && children.length > 0) {\r\n      if (hasTabCategory(data)) {\r\n        return createTabs(children as TemplateCategory[]);\r\n      } else if (hasGroupCategory(data)) {\r\n        return createGroups(children as TemplateCategory[]);\r\n      } else {\r\n        return createTemplates(children as Template[]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className={clsx(\"template-list-panel\", {\r\n          show: show,\r\n        })}\r\n      >\r\n        <div className=\"template-list-header\">\r\n          {/* <div className=\"template-list-title\">\r\n            <span>{description ? description : name}</span>\r\n          </div> */}\r\n          {info && <div className=\"template-list-info\" onClick={handleCategoryInfoClick} />}\r\n          {showWarning && <div className=\"template-list-warning\">{t(\"template_list.warning\")}</div>}\r\n        </div>\r\n        <div className=\"template-list-close-btn\" onClick={handleCloseClick} />\r\n        <div className=\"template-list-scroller custom-scrollbar\">\r\n          <TemplateListContext.Provider\r\n            value={{\r\n              selectedTemplate: selectedTemplate,\r\n              onInfoClick: showTooltip,\r\n              onAddClick: handleAddClick,\r\n              onVariantsClick: handleVaraintsClick,\r\n            }}\r\n          >\r\n            {createChildren()}\r\n          </TemplateListContext.Provider>\r\n        </div>\r\n      </div>\r\n      {selectedTemplate && varaints && (\r\n        <BlmVariantList\r\n          title={selectedTemplate.name}\r\n          data={varaints}\r\n          isBgChecked={isDark}\r\n          show={show && showVariants}\r\n          onCloseClick={handleVariantCloseClick}\r\n        />\r\n      )}\r\n      <Popover\r\n        open={tooltip.show}\r\n        anchorEl={tooltip.anchorEle}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"right\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 3,\r\n          horizontal: -7,\r\n        }}\r\n        className=\"tempalte-list-popover\"\r\n        onClose={handlePopoverClose}\r\n      >\r\n        <div className=\"tempalte-list-tooltip\">{tooltip.text}</div>\r\n      </Popover>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default BlmTemplateList;\r\n"]},"metadata":{},"sourceType":"module"}