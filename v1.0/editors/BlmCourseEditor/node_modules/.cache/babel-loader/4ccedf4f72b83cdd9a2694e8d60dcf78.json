{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\structures\\\\panel\\\\course-tree\\\\BlmCourseTree.tsx\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport Tree, { arrAdd, calcDropPosition, TreeNode } from \"rc-tree\";\nimport clsx from \"clsx\";\nimport { useTranslation } from \"react-i18next\";\nimport { ElementType, TreeActionTypes } from \"editor-constants\";\nimport { createUUID, getChildElement, hasAutoSummary, getElementType } from \"utils\";\nimport { createOptions, createTree, createVirtualElement, hasEmptyTemplate, isDroppable, isDroppableAt, pushElement, updateDrop } from \"./utils\";\n\nfunction BlmCourseTree(props) {\n  const {\n    treeType,\n    data,\n    ctxItem,\n    selectedItem,\n    action,\n    courseProps,\n    elementProps,\n    selectedElement,\n    noClick,\n    courseIdCopyFrom,\n    onTreeOptionsClick,\n    createElement,\n    renameElement,\n    positionElement,\n    updateAutoSummary,\n    selectTreeItem,\n    setTreeAction,\n    getCoursePreview,\n    duplicateElement\n  } = props;\n  const treeRef = useRef(null);\n  const [treeData, setTreeData] = useState(data);\n  const [expandedKeys, setExpandedKeys] = useState([]);\n  const [title, setTitle] = useState();\n  const selectedIds = selectedItem ? [selectedItem.id] : [];\n  let expandTimeout;\n  let clickTimeout;\n  const {\n    t\n  } = useTranslation(\"structures\");\n  useEffect(() => {\n    if (data) {\n      const newTree = createTree(data, {\n        action,\n        courseProps,\n        elementProps\n      });\n      setTreeData(newTree);\n    }\n  }, [data, action, courseProps, elementProps]);\n  useEffect(() => {\n    if (action) {\n      const {\n        type,\n        element\n      } = action;\n\n      if (type === TreeActionTypes.AddItem) {\n        setExpandedKeys(keys => {\n          if (!keys.includes(element.id)) {\n            keys = arrAdd(keys, element.id);\n          }\n\n          return keys;\n        });\n      }\n    }\n  }, [action]);\n  useEffect(() => {\n    if (selectedItem && (action === null || action === void 0 ? void 0 : action.type) === TreeActionTypes.CopyFrom) {\n      setExpandedKeys([selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.id]);\n      setTreeAction();\n    }\n  }, [selectedItem, action, setTreeAction]);\n  const handleInputRef = useCallback(element => {\n    if (element) {\n      setTimeout(() => {\n        element.focus();\n      }, 500);\n    }\n  }, []);\n\n  const handleInputFocus = event => {\n    const input = event.currentTarget;\n    input.select();\n  };\n\n  const handleInputChange = event => {\n    setTitle(event.target.value);\n  };\n\n  const handleInputBlur = event => {\n    if (!action) {\n      return;\n    }\n\n    if (action.type === TreeActionTypes.AddItem) {\n      doAdd();\n    } else if (action.type === TreeActionTypes.RenameItem) {\n      doRename();\n    }\n  };\n\n  const handleInputKeyDown = event => {\n    if (!action) {\n      return;\n    }\n\n    if (action.type === TreeActionTypes.AddItem) {\n      if (event.keyCode === 13) {\n        doAdd();\n      } else if (event.keyCode === 27) {\n        cancelAction();\n      }\n    } else if (action.type === TreeActionTypes.RenameItem) {\n      if (event.keyCode === 13) {\n        doRename();\n      } else if (event.keyCode === 27) {\n        cancelAction();\n      }\n    }\n  };\n\n  const doAdd = () => {\n    if (action) {\n      const {\n        element,\n        elementType\n      } = action;\n      const newElement = createVirtualElement(element, createUUID(), title || `${t(\"title.new\")}` + t(`${getElementType(elementType)}`), elementType);\n      element.children = pushElement(element.children, newElement);\n      createElement(element, newElement);\n      cancelAction();\n    }\n  };\n\n  const doRename = () => {\n    if (action) {\n      const {\n        element\n      } = action;\n\n      if (title && element.name !== title) {\n        element.name = title;\n        renameElement(element, title);\n      }\n\n      cancelAction();\n    }\n  };\n\n  const cancelAction = () => {\n    setTitle(undefined);\n    setTreeAction();\n  }; //To use both onClick and onDoubleClick in the same tag, we have to use timeout.. else it will call both onclick and ondoubleclick functions..\n  //Note : https://stackoverflow.com/questions/35491425/double-click-and-click-on-reactjs-component\n\n\n  const handleClick = (event, node) => {\n    if (!noClick) {\n      event.preventDefault();\n\n      if (clickTimeout) {\n        clearTimeout(clickTimeout);\n      }\n\n      if (event.detail === 1) {\n        clickTimeout = setTimeout(() => {\n          doSingleClick(node);\n          clickTimeout = undefined;\n        }, 250);\n      } else if (event.detail === 2) {\n        doDoubleClick(node);\n      }\n    }\n  };\n\n  const doSingleClick = node => {\n    const item = node.props.data;\n    const isSummary = (item === null || item === void 0 ? void 0 : item.type) === ElementType.Summary;\n\n    if (item && !action && (!item.isVirtual || isSummary)) {\n      var _node$selectHandle, _node$selectHandle$pa;\n\n      const element = isSummary ? item : getChildElement(data, item === null || item === void 0 ? void 0 : item.id);\n      const htmlNode = (_node$selectHandle = node.selectHandle) === null || _node$selectHandle === void 0 ? void 0 : (_node$selectHandle$pa = _node$selectHandle.parentNode) === null || _node$selectHandle$pa === void 0 ? void 0 : _node$selectHandle$pa.parentNode;\n\n      if (element && htmlNode) {\n        selectTreeItem(element, htmlNode);\n      }\n    }\n  };\n\n  const doDoubleClick = node => {\n    const item = node.props.data;\n\n    if (item && !item.isVirtual && !action) {\n      const element = getChildElement(data, item === null || item === void 0 ? void 0 : item.id);\n\n      if (element) {\n        setTreeAction({\n          type: TreeActionTypes.RenameItem,\n          element\n        });\n      }\n    }\n  };\n\n  const handleOptionsClick = info => {\n    const item = info.node.props.data;\n\n    if (item && (!(item === null || item === void 0 ? void 0 : item.isVirtual) || item.type === ElementType.Summary)) {\n      const element = getChildElement(data, item.id);\n\n      if (onTreeOptionsClick) {\n        var _info$event;\n\n        onTreeOptionsClick((_info$event = info.event) === null || _info$event === void 0 ? void 0 : _info$event.currentTarget, element !== null && element !== void 0 ? element : item);\n      }\n    }\n  };\n\n  const handleExpand = keys => {\n    setExpandedKeys(keys);\n  };\n\n  const handleDragEnter = ({\n    dragNode,\n    node,\n    dropPosition,\n    expandedKeys: newExpandexKeys\n  }) => {\n    validateNodeExpand(dragNode, node, dropPosition, newExpandexKeys);\n  };\n\n  const handleDragOver = ({\n    dragNode,\n    node,\n    dropPosition\n  }) => {\n    validateNodeExpand(dragNode, node, dropPosition);\n  };\n\n  const getDropEffect = (event, node) => {\n    const tree = treeRef.current;\n    const dragNode = tree.dragNode;\n    const dropPosition = calcDropPosition(event, node);\n\n    if (isNodeDroppable(dragNode, node, dropPosition)) {\n      return \"move\";\n    }\n\n    return \"none\";\n  };\n\n  const handleDrop = ({\n    dragNode,\n    node,\n    dropPosition\n  }) => {\n    const posArr = node.props.pos.split(\"-\");\n    const newDropPosition = dropPosition - Number(posArr[posArr.length - 1]);\n\n    if (isNodeDroppable(dragNode, node, newDropPosition)) {\n      doDrop(dragNode, node, newDropPosition);\n    }\n  };\n\n  const isNodeDroppable = (dragNode, dropNode, dropPosition) => {\n    var _dropNode$props$child, _dropParentData;\n\n    const tree = treeRef.current;\n    const {\n      dragNodesKeys = []\n    } = tree.state;\n    const children = (_dropNode$props$child = dropNode.props.children) !== null && _dropNode$props$child !== void 0 ? _dropNode$props$child : [];\n    const isExpanded = isNodeExpanded(dropNode);\n    const dragData = dragNode === null || dragNode === void 0 ? void 0 : dragNode.props.data; //dragNode is null if drag node from one tree to another\n\n    const dropData = dropNode === null || dropNode === void 0 ? void 0 : dropNode.props.data;\n    let dropParentData; //check drag itself drop over node\n\n    if (!dragData || !dropData || dragNodesKeys.indexOf(dropNode.props.eventKey) !== -1) {\n      return false; //BIL-214 React - Drag and drop is not working properly\n    } else if (isExpanded && children.length ? dropPosition === -1 : dropPosition !== 0) {\n      const {\n        parent\n      } = dropData;\n\n      if (parent) {\n        dropParentData = parent;\n      }\n    }\n\n    return isDroppable(treeData, dragData, (_dropParentData = dropParentData) !== null && _dropParentData !== void 0 ? _dropParentData : dropData, courseProps) && isDroppableAt(dropData, dropPosition, isExpanded);\n  };\n\n  const isNodeExpanded = node => {\n    const {\n      eventKey\n    } = node.props;\n    return expandedKeys.indexOf(eventKey) !== -1;\n  };\n\n  const validateNodeExpand = (dragNode, dropNode, dropPos, newExpandedKeys) => {\n    const tree = treeRef.current;\n\n    if (dropPos === 0 && !isNodeExpanded(dropNode) && isNodeDroppable(dragNode, dropNode, dropPos)) {\n      if (expandTimeout) {\n        clearTimeout(expandTimeout);\n        expandTimeout = undefined;\n      }\n\n      expandTimeout = setTimeout(() => {\n        const {\n          eventKey\n        } = dropNode.props;\n        const {\n          dragOverNodeKey,\n          dropPosition,\n          expandedKeys: keys\n        } = tree.state;\n\n        if (!newExpandedKeys) {\n          newExpandedKeys = arrAdd(keys, eventKey);\n        }\n\n        if (expandedKeys.indexOf(eventKey) === -1 && dropPosition === 0 && dragOverNodeKey === eventKey) {\n          setExpandedKeys(newExpandedKeys);\n        }\n\n        expandTimeout = undefined;\n      }, 2000);\n    }\n  };\n\n  const doDrop = (dragNode, dropNode, dropPosition) => {\n    var _dropNode$props$expan;\n\n    const dragData = dragNode.props.data;\n    const dropData = dropNode.props.data;\n    const isExpanded = (_dropNode$props$expan = dropNode.props.expanded) !== null && _dropNode$props$expan !== void 0 ? _dropNode$props$expan : false;\n    const element = getChildElement(data, dragData.id);\n    updateDrop(treeData, dragData, dropData, dropPosition, isExpanded);\n\n    if (element) {\n      var _element$parent;\n\n      const oldParent = element === null || element === void 0 ? void 0 : element.parent;\n      const oldPosition = element && (oldParent === null || oldParent === void 0 ? void 0 : oldParent.children.indexOf(element));\n\n      if (dropData.type === ElementType.Summary && dropData.parent) {\n        updateDrop(data, dragData, dropData.parent, 0, isExpanded);\n      } else {\n        updateDrop(data, dragData, dropData, dropPosition, isExpanded);\n      }\n\n      const newParent = element.parent;\n      const newPosition = (_element$parent = element.parent) === null || _element$parent === void 0 ? void 0 : _element$parent.children.indexOf(element);\n\n      if (oldParent && newParent && oldPosition !== undefined && oldPosition !== -1 && newPosition !== undefined && newPosition !== -1 && (newParent.id !== oldParent.id || newPosition !== oldPosition)) {\n        positionElement(element, oldParent, newParent, newPosition);\n\n        if (element.isSummary && hasAutoSummary(newParent, Infinity)) {\n          updateAutoSummary(newParent, false);\n        }\n\n        setTreeData({ ...treeData\n        });\n      }\n    }\n  };\n\n  const renderTitle = item => {\n    if (action) {\n      if (action.type === TreeActionTypes.AddItem && item.id === \"newElement\") {\n        return /*#__PURE__*/React.createElement(\"input\", {\n          ref: handleInputRef,\n          type: \"text\",\n          value: title !== null && title !== void 0 ? title : item.name,\n          onFocus: handleInputFocus,\n          onBlur: handleInputBlur,\n          onKeyDown: handleInputKeyDown,\n          onChange: handleInputChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 11\n          }\n        });\n      } else if (action.type === TreeActionTypes.RenameItem && item.id === action.element.id) {\n        return /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          autoFocus: true,\n          value: title !== null && title !== void 0 ? title : item.name,\n          onFocus: handleInputFocus,\n          onBlur: handleInputBlur,\n          onKeyDown: handleInputKeyDown,\n          onChange: handleInputChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 11\n          }\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 12\n      }\n    }, item.name);\n  };\n\n  const previewCopyFrom = (elementId, event) => {\n    if (courseIdCopyFrom) {\n      getCoursePreview(courseIdCopyFrom, elementId, event.ctrlKey).then(result => {\n        if (!result.error) {\n          const {\n            file_uri\n          } = result.payload;\n\n          if (file_uri) {\n            window.open(file_uri);\n          }\n        }\n      });\n    }\n  };\n\n  const addCopyFrom = (element, oldParentId) => {\n    const urlParams = new URLSearchParams(window.location.search);\n    let courseId = urlParams.get(\"courseId\");\n    duplicateElement(element, \"CopyFrom\", selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id, courseId);\n  };\n\n  function renderOptions(item) {\n    const options = createOptions(item, treeType, elementProps);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 7\n      }\n    }, options.map((option, index) => /*#__PURE__*/React.createElement(\"span\", {\n      key: index,\n      className: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }\n    })), treeType === \"CopyFrom\" && (item.type === ElementType.Chapter || item.type === ElementType.Page || item.type === ElementType.Screen || item.type === ElementType.Question || item.type === ElementType.Evaluation || item.type === ElementType.Custom) && /*#__PURE__*/React.createElement(React.Fragment, null, (item.type === ElementType.Page || item.type === ElementType.Screen || item.type === ElementType.Question) && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"copy-from-preview\",\n      onClick: event => previewCopyFrom(item.id, event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"copy-from-add\",\n      onClick: event => {\n        var _item$parent;\n\n        return addCopyFrom(item, item === null || item === void 0 ? void 0 : (_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 15\n      }\n    })));\n  }\n\n  const renderChildren = item => {\n    if ((item === null || item === void 0 ? void 0 : item.type) !== ElementType.SimpleContent && (item === null || item === void 0 ? void 0 : item.type) !== ElementType.SimplePage) {\n      var _item$children;\n\n      return item === null || item === void 0 ? void 0 : (_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.map(item => {\n        const {\n          id,\n          type,\n          isVirtual\n        } = item;\n        const children = renderChildren(item);\n        return /*#__PURE__*/React.createElement(TreeNode, {\n          title: renderTitle(item),\n          key: id,\n          data: item,\n          showOptionsIcon: type === ElementType.Summary || !isVirtual && type !== ElementType.AssociateContent,\n          className: clsx(item.type, {\n            \"tree-treenode-ctx-selected\": item.id === (ctxItem === null || ctxItem === void 0 ? void 0 : ctxItem.id),\n            \"tree-treenode-no-children\": (children === null || children === void 0 ? void 0 : children.length) === 0,\n            \"tree-treenode-empty-template\": hasEmptyTemplate(item),\n            \"tree-treenode-outdated-tempalte\": item.isOutdated\n          }),\n          optionsIcon: renderOptions(item),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 11\n          }\n        }, children);\n      });\n    } else {\n      return [];\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"blm-tree-container\", treeType, {\n      \"empty-tree\": (treeData === null || treeData === void 0 ? void 0 : treeData.children.length) === 0\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tree, {\n    ref: treeRef,\n    draggable: !Boolean(action),\n    showOptionsIcon: true,\n    expandedKeys: expandedKeys,\n    selectedKeys: selectedIds,\n    onExpand: handleExpand,\n    onDragEnter: handleDragEnter,\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    onOptionsClick: handleOptionsClick,\n    onClick: handleClick,\n    getNodeDropEffect: getDropEffect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }\n  }, renderChildren(treeData)));\n}\n\nexport default BlmCourseTree;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/structures/panel/course-tree/BlmCourseTree.tsx"],"names":["React","useCallback","useEffect","useRef","useState","Tree","arrAdd","calcDropPosition","TreeNode","clsx","useTranslation","ElementType","TreeActionTypes","createUUID","getChildElement","hasAutoSummary","getElementType","createOptions","createTree","createVirtualElement","hasEmptyTemplate","isDroppable","isDroppableAt","pushElement","updateDrop","BlmCourseTree","props","treeType","data","ctxItem","selectedItem","action","courseProps","elementProps","selectedElement","noClick","courseIdCopyFrom","onTreeOptionsClick","createElement","renameElement","positionElement","updateAutoSummary","selectTreeItem","setTreeAction","getCoursePreview","duplicateElement","treeRef","treeData","setTreeData","expandedKeys","setExpandedKeys","title","setTitle","selectedIds","id","expandTimeout","clickTimeout","t","newTree","type","element","AddItem","keys","includes","CopyFrom","handleInputRef","setTimeout","focus","handleInputFocus","event","input","currentTarget","select","handleInputChange","target","value","handleInputBlur","doAdd","RenameItem","doRename","handleInputKeyDown","keyCode","cancelAction","elementType","newElement","children","name","undefined","handleClick","node","preventDefault","clearTimeout","detail","doSingleClick","doDoubleClick","item","isSummary","Summary","isVirtual","htmlNode","selectHandle","parentNode","handleOptionsClick","info","handleExpand","handleDragEnter","dragNode","dropPosition","newExpandexKeys","validateNodeExpand","handleDragOver","getDropEffect","tree","current","isNodeDroppable","handleDrop","posArr","pos","split","newDropPosition","Number","length","doDrop","dropNode","dragNodesKeys","state","isExpanded","isNodeExpanded","dragData","dropData","dropParentData","indexOf","eventKey","parent","dropPos","newExpandedKeys","dragOverNodeKey","expanded","oldParent","oldPosition","newParent","newPosition","Infinity","renderTitle","previewCopyFrom","elementId","ctrlKey","then","result","error","file_uri","payload","window","open","addCopyFrom","oldParentId","urlParams","URLSearchParams","location","search","courseId","get","renderOptions","options","map","option","index","Chapter","Page","Screen","Question","Evaluation","Custom","renderChildren","SimpleContent","SimplePage","AssociateContent","isOutdated","Boolean"],"mappings":";AAAA,OAAOA,KAAP,IAKEC,WALF,EAMEC,SANF,EAOEC,MAPF,EAQEC,QARF,QASO,OATP;AAUA,OAAOC,IAAP,IAAeC,MAAf,EAAuBC,gBAAvB,EAA8CC,QAA9C,QAA8D,SAA9D;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAGA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,kBAA7C;AACA,SAASC,UAAT,EAAqBC,eAArB,EAAsCC,cAAtC,EAAsDC,cAAtD,QAA4E,OAA5E;AAEA,SACEC,aADF,EAEEC,UAFF,EAGEC,oBAHF,EAIEC,gBAJF,EAKEC,WALF,EAMEC,aANF,EAOEC,WAPF,EAQEC,UARF,QASO,SATP;;AAWA,SAASC,aAAT,CAAuBC,KAAvB,EAA6C;AAC3C,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,YAPI;AAQJC,IAAAA,eARI;AASJC,IAAAA,OATI;AAUJC,IAAAA,gBAVI;AAWJC,IAAAA,kBAXI;AAYJC,IAAAA,aAZI;AAaJC,IAAAA,aAbI;AAcJC,IAAAA,eAdI;AAeJC,IAAAA,iBAfI;AAgBJC,IAAAA,cAhBI;AAiBJC,IAAAA,aAjBI;AAkBJC,IAAAA,gBAlBI;AAmBJC,IAAAA;AAnBI,MAoBFnB,KApBJ;AAqBA,QAAMoB,OAAO,GAAG3C,MAAM,CAAsB,IAAtB,CAAtB;AACA,QAAM,CAAC4C,QAAD,EAAWC,WAAX,IAA0B5C,QAAQ,CAACwB,IAAD,CAAxC;AACA,QAAM,CAACqB,YAAD,EAAeC,eAAf,IAAkC9C,QAAQ,CAAQ,EAAR,CAAhD;AACA,QAAM,CAAC+C,KAAD,EAAQC,QAAR,IAAoBhD,QAAQ,EAAlC;AACA,QAAMiD,WAAW,GAAGvB,YAAY,GAAG,CAACA,YAAY,CAACwB,EAAd,CAAH,GAAuB,EAAvD;AACA,MAAIC,aAAJ;AACA,MAAIC,YAAJ;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQ/C,cAAc,CAAC,YAAD,CAA5B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,IAAJ,EAAU;AACR,YAAM8B,OAAO,GAAGxC,UAAU,CAACU,IAAD,EAAO;AAAEG,QAAAA,MAAF;AAAUC,QAAAA,WAAV;AAAuBC,QAAAA;AAAvB,OAAP,CAA1B;AAEAe,MAAAA,WAAW,CAACU,OAAD,CAAX;AACD;AACF,GANQ,EAMN,CAAC9B,IAAD,EAAOG,MAAP,EAAeC,WAAf,EAA4BC,YAA5B,CANM,CAAT;AAQA/B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6B,MAAJ,EAAY;AACV,YAAM;AAAE4B,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoB7B,MAA1B;;AAEA,UAAI4B,IAAI,KAAK/C,eAAe,CAACiD,OAA7B,EAAsC;AACpCX,QAAAA,eAAe,CAAEY,IAAD,IAAU;AACxB,cAAI,CAACA,IAAI,CAACC,QAAL,CAAcH,OAAO,CAACN,EAAtB,CAAL,EAAgC;AAC9BQ,YAAAA,IAAI,GAAGxD,MAAM,CAACwD,IAAD,EAAOF,OAAO,CAACN,EAAf,CAAb;AACD;;AAED,iBAAOQ,IAAP;AACD,SANc,CAAf;AAOD;AACF;AACF,GAdQ,EAcN,CAAC/B,MAAD,CAdM,CAAT;AAgBA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI4B,YAAY,IAAI,CAAAC,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE4B,IAAR,MAAiB/C,eAAe,CAACoD,QAArD,EAA+D;AAC7Dd,MAAAA,eAAe,CAAC,CAACpB,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAEwB,EAAf,CAAD,CAAf;AACAX,MAAAA,aAAa;AACd;AACF,GALQ,EAKN,CAACb,YAAD,EAAeC,MAAf,EAAuBY,aAAvB,CALM,CAAT;AAOA,QAAMsB,cAAc,GAAGhE,WAAW,CAAE2D,OAAD,IAAsC;AACvE,QAAIA,OAAJ,EAAa;AACXM,MAAAA,UAAU,CAAC,MAAM;AACfN,QAAAA,OAAO,CAACO,KAAR;AACD,OAFS,EAEP,GAFO,CAAV;AAGD;AACF,GANiC,EAM/B,EAN+B,CAAlC;;AAQA,QAAMC,gBAAgB,GAAIC,KAAD,IAAyC;AAChE,UAAMC,KAAK,GAAGD,KAAK,CAACE,aAApB;AAEAD,IAAAA,KAAK,CAACE,MAAN;AACD,GAJD;;AAMA,QAAMC,iBAAiB,GAAIJ,KAAD,IAA0C;AAClEjB,IAAAA,QAAQ,CAACiB,KAAK,CAACK,MAAN,CAAaC,KAAd,CAAR;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAIP,KAAD,IAAyC;AAC/D,QAAI,CAACtC,MAAL,EAAa;AACX;AACD;;AAED,QAAIA,MAAM,CAAC4B,IAAP,KAAgB/C,eAAe,CAACiD,OAApC,EAA6C;AAC3CgB,MAAAA,KAAK;AACN,KAFD,MAEO,IAAI9C,MAAM,CAAC4B,IAAP,KAAgB/C,eAAe,CAACkE,UAApC,EAAgD;AACrDC,MAAAA,QAAQ;AACT;AACF,GAVD;;AAYA,QAAMC,kBAAkB,GAAIX,KAAD,IAA0B;AACnD,QAAI,CAACtC,MAAL,EAAa;AACX;AACD;;AAED,QAAIA,MAAM,CAAC4B,IAAP,KAAgB/C,eAAe,CAACiD,OAApC,EAA6C;AAC3C,UAAIQ,KAAK,CAACY,OAAN,KAAkB,EAAtB,EAA0B;AACxBJ,QAAAA,KAAK;AACN,OAFD,MAEO,IAAIR,KAAK,CAACY,OAAN,KAAkB,EAAtB,EAA0B;AAC/BC,QAAAA,YAAY;AACb;AACF,KAND,MAMO,IAAInD,MAAM,CAAC4B,IAAP,KAAgB/C,eAAe,CAACkE,UAApC,EAAgD;AACrD,UAAIT,KAAK,CAACY,OAAN,KAAkB,EAAtB,EAA0B;AACxBF,QAAAA,QAAQ;AACT,OAFD,MAEO,IAAIV,KAAK,CAACY,OAAN,KAAkB,EAAtB,EAA0B;AAC/BC,QAAAA,YAAY;AACb;AACF;AACF,GAlBD;;AAoBA,QAAML,KAAK,GAAG,MAAM;AAClB,QAAI9C,MAAJ,EAAY;AACV,YAAM;AAAE6B,QAAAA,OAAF;AAAWuB,QAAAA;AAAX,UAA2BpD,MAAjC;AACA,YAAMqD,UAAU,GAAGjE,oBAAoB,CACrCyC,OADqC,EAErC/C,UAAU,EAF2B,EAGrCsC,KAAK,IAAK,GAAEM,CAAC,CAAC,WAAD,CAAc,EAAlB,GAAsBA,CAAC,CAAE,GAAEzC,cAAc,CAACmE,WAAD,CAAc,EAAhC,CAHK,EAIrCA,WAJqC,CAAvC;AAOAvB,MAAAA,OAAO,CAACyB,QAAR,GAAmB9D,WAAW,CAACqC,OAAO,CAACyB,QAAT,EAAmBD,UAAnB,CAA9B;AAEA9C,MAAAA,aAAa,CAACsB,OAAD,EAAUwB,UAAV,CAAb;AACAF,MAAAA,YAAY;AACb;AACF,GAfD;;AAiBA,QAAMH,QAAQ,GAAG,MAAM;AACrB,QAAIhD,MAAJ,EAAY;AACV,YAAM;AAAE6B,QAAAA;AAAF,UAAc7B,MAApB;;AAEA,UAAIoB,KAAK,IAAIS,OAAO,CAAC0B,IAAR,KAAiBnC,KAA9B,EAAqC;AACnCS,QAAAA,OAAO,CAAC0B,IAAR,GAAenC,KAAf;AACAZ,QAAAA,aAAa,CAACqB,OAAD,EAAUT,KAAV,CAAb;AACD;;AAED+B,MAAAA,YAAY;AACb;AACF,GAXD;;AAaA,QAAMA,YAAY,GAAG,MAAM;AACzB9B,IAAAA,QAAQ,CAACmC,SAAD,CAAR;AACA5C,IAAAA,aAAa;AACd,GAHD,CA9I2C,CAmJ3C;AACA;;;AACA,QAAM6C,WAAW,GAAG,CAACnB,KAAD,EAAoBoB,IAApB,KAA+C;AACjE,QAAI,CAACtD,OAAL,EAAc;AACZkC,MAAAA,KAAK,CAACqB,cAAN;;AAEA,UAAIlC,YAAJ,EAAkB;AAChBmC,QAAAA,YAAY,CAACnC,YAAD,CAAZ;AACD;;AAED,UAAIa,KAAK,CAACuB,MAAN,KAAiB,CAArB,EAAwB;AACtBpC,QAAAA,YAAY,GAAGU,UAAU,CAAC,MAAM;AAC9B2B,UAAAA,aAAa,CAACJ,IAAD,CAAb;AACAjC,UAAAA,YAAY,GAAG+B,SAAf;AACD,SAHwB,EAGtB,GAHsB,CAAzB;AAID,OALD,MAKO,IAAIlB,KAAK,CAACuB,MAAN,KAAiB,CAArB,EAAwB;AAC7BE,QAAAA,aAAa,CAACL,IAAD,CAAb;AACD;AACF;AACF,GAjBD;;AAmBA,QAAMI,aAAa,GAAIJ,IAAD,IAA4B;AAChD,UAAMM,IAAI,GAAGN,IAAI,CAAC/D,KAAL,CAAWE,IAAxB;AACA,UAAMoE,SAAS,GAAG,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEpC,IAAN,MAAehD,WAAW,CAACsF,OAA7C;;AAEA,QAAIF,IAAI,IAAI,CAAChE,MAAT,KAAoB,CAACgE,IAAI,CAACG,SAAN,IAAmBF,SAAvC,CAAJ,EAAuD;AAAA;;AACrD,YAAMpC,OAAO,GAAGoC,SAAS,GAAGD,IAAH,GAAUjF,eAAe,CAACc,IAAD,EAAOmE,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEzC,EAAb,CAAlD;AACA,YAAM6C,QAAQ,yBAAGV,IAAI,CAACW,YAAR,gFAAG,mBAAmBC,UAAtB,0DAAG,sBAA+BA,UAAhD;;AAEA,UAAIzC,OAAO,IAAIuC,QAAf,EAAyB;AACvBzD,QAAAA,cAAc,CAACkB,OAAD,EAAUuC,QAAV,CAAd;AACD;AACF;AACF,GAZD;;AAcA,QAAML,aAAa,GAAIL,IAAD,IAA4B;AAChD,UAAMM,IAAI,GAAGN,IAAI,CAAC/D,KAAL,CAAWE,IAAxB;;AAEA,QAAImE,IAAI,IAAI,CAACA,IAAI,CAACG,SAAd,IAA2B,CAACnE,MAAhC,EAAwC;AACtC,YAAM6B,OAAO,GAAG9C,eAAe,CAACc,IAAD,EAAOmE,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEzC,EAAb,CAA/B;;AAEA,UAAIM,OAAJ,EAAa;AACXjB,QAAAA,aAAa,CAAC;AAAEgB,UAAAA,IAAI,EAAE/C,eAAe,CAACkE,UAAxB;AAAoClB,UAAAA;AAApC,SAAD,CAAb;AACD;AACF;AACF,GAVD;;AAYA,QAAM0C,kBAAkB,GAAIC,IAAD,IAAsE;AAC/F,UAAMR,IAAI,GAAGQ,IAAI,CAACd,IAAL,CAAU/D,KAAV,CAAgBE,IAA7B;;AAEA,QAAImE,IAAI,KAAK,EAACA,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEG,SAAP,KAAoBH,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAACsF,OAAnD,CAAR,EAAqE;AACnE,YAAMrC,OAAO,GAAG9C,eAAe,CAACc,IAAD,EAAOmE,IAAI,CAACzC,EAAZ,CAA/B;;AACA,UAAIjB,kBAAJ,EAAwB;AAAA;;AACtBA,QAAAA,kBAAkB,gBAACkE,IAAI,CAAClC,KAAN,gDAAC,YAAYE,aAAb,EAA4BX,OAA5B,aAA4BA,OAA5B,cAA4BA,OAA5B,GAAuCmC,IAAvC,CAAlB;AACD;AACF;AACF,GATD;;AAWA,QAAMS,YAAY,GAAI1C,IAAD,IAAiB;AACpCZ,IAAAA,eAAe,CAACY,IAAD,CAAf;AACD,GAFD;;AAIA,QAAM2C,eAAgC,GAAG,CAAC;AACxCC,IAAAA,QADwC;AAExCjB,IAAAA,IAFwC;AAGxCkB,IAAAA,YAHwC;AAIxC1D,IAAAA,YAAY,EAAE2D;AAJ0B,GAAD,KAKnC;AACJC,IAAAA,kBAAkB,CAACH,QAAD,EAAWjB,IAAX,EAAiBkB,YAAjB,EAA+BC,eAA/B,CAAlB;AACD,GAPD;;AASA,QAAME,cAA+B,GAAG,CAAC;AAAEJ,IAAAA,QAAF;AAAYjB,IAAAA,IAAZ;AAAkBkB,IAAAA;AAAlB,GAAD,KAAsC;AAC5EE,IAAAA,kBAAkB,CAACH,QAAD,EAAWjB,IAAX,EAAiBkB,YAAjB,CAAlB;AACD,GAFD;;AAIA,QAAMI,aAAa,GAAG,CAAC1C,KAAD,EAAoBoB,IAApB,KAA+C;AACnE,UAAMuB,IAAI,GAAGlE,OAAO,CAACmE,OAArB;AACA,UAAMP,QAAQ,GAAGM,IAAI,CAACN,QAAtB;AACA,UAAMC,YAAY,GAAGpG,gBAAgB,CAAC8D,KAAD,EAAQoB,IAAR,CAArC;;AAEA,QAAIyB,eAAe,CAACR,QAAD,EAAWjB,IAAX,EAAiBkB,YAAjB,CAAnB,EAAmD;AACjD,aAAO,MAAP;AACD;;AAED,WAAO,MAAP;AACD,GAVD;;AAYA,QAAMQ,UAA2B,GAAG,CAAC;AAAET,IAAAA,QAAF;AAAYjB,IAAAA,IAAZ;AAAkBkB,IAAAA;AAAlB,GAAD,KAAsC;AACxE,UAAMS,MAAM,GAAG3B,IAAI,CAAC/D,KAAL,CAAW2F,GAAX,CAAgBC,KAAhB,CAAsB,GAAtB,CAAf;AACA,UAAMC,eAAe,GAAGZ,YAAY,GAAGa,MAAM,CAACJ,MAAM,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,CAAP,CAA7C;;AAEA,QAAIP,eAAe,CAACR,QAAD,EAAWjB,IAAX,EAAiB8B,eAAjB,CAAnB,EAAsD;AACpDG,MAAAA,MAAM,CAAChB,QAAD,EAAWjB,IAAX,EAAiB8B,eAAjB,CAAN;AACD;AACF,GAPD;;AASA,QAAML,eAAe,GAAG,CACtBR,QADsB,EAEtBiB,QAFsB,EAGtBhB,YAHsB,KAInB;AAAA;;AACH,UAAMK,IAAI,GAAGlE,OAAO,CAACmE,OAArB;AACA,UAAM;AAAEW,MAAAA,aAAa,GAAG;AAAlB,QAAyBZ,IAAI,CAACa,KAApC;AACA,UAAMxC,QAAQ,4BAAIsC,QAAQ,CAACjG,KAAT,CAAe2D,QAAnB,yEAA+B,EAA7C;AACA,UAAMyC,UAAU,GAAGC,cAAc,CAACJ,QAAD,CAAjC;AACA,UAAMK,QAAQ,GAAGtB,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEhF,KAAV,CAAgBE,IAAjC,CALG,CAKoC;;AACvC,UAAMqG,QAAQ,GAAGN,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEjG,KAAV,CAAgBE,IAAjC;AACA,QAAIsG,cAAJ,CAPG,CASH;;AACA,QAAI,CAACF,QAAD,IAAa,CAACC,QAAd,IAA0BL,aAAa,CAACO,OAAd,CAAsBR,QAAQ,CAACjG,KAAT,CAAe0G,QAArC,MAAmD,CAAC,CAAlF,EAAqF;AACnF,aAAO,KAAP,CADmF,CAEnF;AACD,KAHD,MAGO,IAAIN,UAAU,IAAIzC,QAAQ,CAACoC,MAAvB,GAAgCd,YAAY,KAAK,CAAC,CAAlD,GAAsDA,YAAY,KAAK,CAA3E,EAA8E;AACnF,YAAM;AAAE0B,QAAAA;AAAF,UAAaJ,QAAnB;;AAEA,UAAII,MAAJ,EAAY;AACVH,QAAAA,cAAc,GAAGG,MAAjB;AACD;AACF;;AAED,WACEhH,WAAW,CAAC0B,QAAD,EAAWiF,QAAX,qBAAqBE,cAArB,6DAAuCD,QAAvC,EAAiDjG,WAAjD,CAAX,IACAV,aAAa,CAAC2G,QAAD,EAAWtB,YAAX,EAAyBmB,UAAzB,CAFf;AAID,GA7BD;;AA+BA,QAAMC,cAAc,GAAItC,IAAD,IAA4B;AACjD,UAAM;AAAE2C,MAAAA;AAAF,QAAe3C,IAAI,CAAC/D,KAA1B;AAEA,WAAOuB,YAAY,CAACkF,OAAb,CAAqBC,QAArB,MAAoC,CAAC,CAA5C;AACD,GAJD;;AAMA,QAAMvB,kBAAkB,GAAG,CACzBH,QADyB,EAEzBiB,QAFyB,EAGzBW,OAHyB,EAIzBC,eAJyB,KAKtB;AACH,UAAMvB,IAAI,GAAGlE,OAAO,CAACmE,OAArB;;AAEA,QACEqB,OAAO,KAAK,CAAZ,IACA,CAACP,cAAc,CAACJ,QAAD,CADf,IAEAT,eAAe,CAACR,QAAD,EAAWiB,QAAX,EAAqBW,OAArB,CAHjB,EAIE;AACA,UAAI/E,aAAJ,EAAmB;AACjBoC,QAAAA,YAAY,CAACpC,aAAD,CAAZ;AACAA,QAAAA,aAAa,GAAGgC,SAAhB;AACD;;AAEDhC,MAAAA,aAAa,GAAGW,UAAU,CAAC,MAAM;AAC/B,cAAM;AAAEkE,UAAAA;AAAF,YAAeT,QAAQ,CAACjG,KAA9B;AACA,cAAM;AAAE8G,UAAAA,eAAF;AAAmB7B,UAAAA,YAAnB;AAAiC1D,UAAAA,YAAY,EAAEa;AAA/C,YAAwDkD,IAAI,CAACa,KAAnE;;AAEA,YAAI,CAACU,eAAL,EAAsB;AACpBA,UAAAA,eAAe,GAAGjI,MAAM,CAACwD,IAAD,EAAOsE,QAAP,CAAxB;AACD;;AAED,YACEnF,YAAY,CAACkF,OAAb,CAAqBC,QAArB,MAAoC,CAAC,CAArC,IACAzB,YAAY,KAAK,CADjB,IAEA6B,eAAe,KAAKJ,QAHtB,EAIE;AACAlF,UAAAA,eAAe,CAACqF,eAAD,CAAf;AACD;;AAEDhF,QAAAA,aAAa,GAAGgC,SAAhB;AACD,OAjByB,EAiBvB,IAjBuB,CAA1B;AAkBD;AACF,GArCD;;AAuCA,QAAMmC,MAAM,GAAG,CAAChB,QAAD,EAA6BiB,QAA7B,EAAyDhB,YAAzD,KAAkF;AAAA;;AAC/F,UAAMqB,QAAQ,GAAGtB,QAAQ,CAAChF,KAAT,CAAeE,IAAhC;AACA,UAAMqG,QAAQ,GAAGN,QAAQ,CAACjG,KAAT,CAAeE,IAAhC;AACA,UAAMkG,UAAU,4BAAGH,QAAQ,CAACjG,KAAT,CAAe+G,QAAlB,yEAA8B,KAA9C;AACA,UAAM7E,OAAO,GAAG9C,eAAe,CAACc,IAAD,EAAOoG,QAAQ,CAAC1E,EAAhB,CAA/B;AAEA9B,IAAAA,UAAU,CAACuB,QAAD,EAAWiF,QAAX,EAAqBC,QAArB,EAA+BtB,YAA/B,EAA6CmB,UAA7C,CAAV;;AAEA,QAAIlE,OAAJ,EAAa;AAAA;;AACX,YAAM8E,SAAS,GAAG9E,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEyE,MAA3B;AACA,YAAMM,WAAW,GAAG/E,OAAO,KAAI8E,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAErD,QAAX,CAAoB8C,OAApB,CAA4BvE,OAA5B,CAAJ,CAA3B;;AAEA,UAAIqE,QAAQ,CAACtE,IAAT,KAAkBhD,WAAW,CAACsF,OAA9B,IAAyCgC,QAAQ,CAACI,MAAtD,EAA8D;AAC5D7G,QAAAA,UAAU,CAACI,IAAD,EAAOoG,QAAP,EAAiBC,QAAQ,CAACI,MAA1B,EAAkC,CAAlC,EAAqCP,UAArC,CAAV;AACD,OAFD,MAEO;AACLtG,QAAAA,UAAU,CAACI,IAAD,EAAOoG,QAAP,EAAiBC,QAAjB,EAA2BtB,YAA3B,EAAyCmB,UAAzC,CAAV;AACD;;AAED,YAAMc,SAAS,GAAGhF,OAAO,CAACyE,MAA1B;AACA,YAAMQ,WAAW,sBAAGjF,OAAO,CAACyE,MAAX,oDAAG,gBAAgBhD,QAAhB,CAAyB8C,OAAzB,CAAiCvE,OAAjC,CAApB;;AAEA,UACE8E,SAAS,IACTE,SADA,IAEAD,WAAW,KAAKpD,SAFhB,IAGAoD,WAAW,KAAK,CAAC,CAHjB,IAIAE,WAAW,KAAKtD,SAJhB,IAKAsD,WAAW,KAAK,CAAC,CALjB,KAMCD,SAAS,CAACtF,EAAV,KAAiBoF,SAAS,CAACpF,EAA3B,IAAiCuF,WAAW,KAAKF,WANlD,CADF,EAQE;AACAnG,QAAAA,eAAe,CAACoB,OAAD,EAAU8E,SAAV,EAAqBE,SAArB,EAAgCC,WAAhC,CAAf;;AAEA,YAAIjF,OAAO,CAACoC,SAAR,IAAqBjF,cAAc,CAAC6H,SAAD,EAAYE,QAAZ,CAAvC,EAA8D;AAC5DrG,UAAAA,iBAAiB,CAACmG,SAAD,EAAY,KAAZ,CAAjB;AACD;;AAED5F,QAAAA,WAAW,CAAC,EAAE,GAAGD;AAAL,SAAD,CAAX;AACD;AACF;AACF,GAvCD;;AAyCA,QAAMgG,WAAW,GAAIhD,IAAD,IAAyB;AAC3C,QAAIhE,MAAJ,EAAY;AACV,UAAIA,MAAM,CAAC4B,IAAP,KAAgB/C,eAAe,CAACiD,OAAhC,IAA2CkC,IAAI,CAACzC,EAAL,KAAY,YAA3D,EAAyE;AACvE,4BACE;AACE,UAAA,GAAG,EAAEW,cADP;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,KAAK,EAAEd,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW4C,IAAI,CAACT,IAHvB;AAIE,UAAA,OAAO,EAAElB,gBAJX;AAKE,UAAA,MAAM,EAAEQ,eALV;AAME,UAAA,SAAS,EAAEI,kBANb;AAOE,UAAA,QAAQ,EAAEP,iBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,OAZD,MAYO,IAAI1C,MAAM,CAAC4B,IAAP,KAAgB/C,eAAe,CAACkE,UAAhC,IAA8CiB,IAAI,CAACzC,EAAL,KAAYvB,MAAM,CAAC6B,OAAP,CAAeN,EAA7E,EAAiF;AACtF,4BACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,SAAS,MAFX;AAGE,UAAA,KAAK,EAAEH,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW4C,IAAI,CAACT,IAHvB;AAIE,UAAA,OAAO,EAAElB,gBAJX;AAKE,UAAA,MAAM,EAAEQ,eALV;AAME,UAAA,SAAS,EAAEI,kBANb;AAOE,UAAA,QAAQ,EAAEP,iBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;AACF;;AAED,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOsB,IAAI,CAACT,IAAZ,CAAP;AACD,GA9BD;;AAgCA,QAAM0D,eAAe,GAAG,CAACC,SAAD,EAAoB5E,KAApB,KAA0C;AAChE,QAAIjC,gBAAJ,EAAsB;AACpBQ,MAAAA,gBAAgB,CAACR,gBAAD,EAAmB6G,SAAnB,EAA8B5E,KAAK,CAAC6E,OAApC,CAAhB,CAA6DC,IAA7D,CAAmEC,MAAD,IAAY;AAC5E,YAAI,CAACA,MAAM,CAACC,KAAZ,EAAmB;AACjB,gBAAM;AAAEC,YAAAA;AAAF,cAAeF,MAAM,CAACG,OAA5B;;AAEA,cAAID,QAAJ,EAAc;AACZE,YAAAA,MAAM,CAACC,IAAP,CAAYH,QAAZ;AACD;AACF;AACF,OARD;AASD;AACF,GAZD;;AAcA,QAAMI,WAAW,GAAG,CAAC9F,OAAD,EAAyB+F,WAAzB,KAA8C;AAChE,UAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBL,MAAM,CAACM,QAAP,CAAgBC,MAApC,CAAlB;AACA,QAAIC,QAAQ,GAAGJ,SAAS,CAACK,GAAV,CAAc,UAAd,CAAf;AACApH,IAAAA,gBAAgB,CAACe,OAAD,EAAU,UAAV,EAAsB1B,eAAtB,aAAsBA,eAAtB,uBAAsBA,eAAe,CAAEoB,EAAvC,EAA2C0G,QAA3C,CAAhB;AACD,GAJD;;AAMA,WAASE,aAAT,CAAuBnE,IAAvB,EAA4C;AAC1C,UAAMoE,OAAO,GAAGlJ,aAAa,CAAC8E,IAAD,EAAOpE,QAAP,EAAiBM,YAAjB,CAA7B;AAEA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGkI,OAAO,CAACC,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,kBACX;AAAM,MAAA,GAAG,EAAEA,KAAX;AAAkB,MAAA,SAAS,EAAED,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,EAIG1I,QAAQ,KAAK,UAAb,KACEoE,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAAC4J,OAA1B,IACCxE,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAAC6J,IAD3B,IAECzE,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAAC8J,MAF3B,IAGC1E,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAAC+J,QAH3B,IAIC3E,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAACgK,UAJ3B,IAKC5E,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAACiK,MAN7B,kBAOG,0CACG,CAAC7E,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAAC6J,IAA1B,IACAzE,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAAC8J,MAD1B,IAEA1E,IAAI,CAACpC,IAAL,KAAchD,WAAW,CAAC+J,QAF3B,kBAGC;AACE,MAAA,SAAS,EAAC,mBADZ;AAEE,MAAA,OAAO,EAAGrG,KAAD,IAAW2E,eAAe,CAACjD,IAAI,CAACzC,EAAN,EAAUe,KAAV,CAFrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eASE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,OAAO,EAAGA,KAAD;AAAA;;AAAA,eAAWqF,WAAW,CAAC3D,IAAD,EAAOA,IAAP,aAAOA,IAAP,uCAAOA,IAAI,CAAEsC,MAAb,iDAAO,aAAc/E,EAArB,CAAtB;AAAA,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CAXN,CADF;AA6BD;;AAED,QAAMuH,cAAc,GAAI9E,IAAD,IAA0B;AAC/C,QAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEpC,IAAN,MAAehD,WAAW,CAACmK,aAA3B,IAA4C,CAAA/E,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEpC,IAAN,MAAehD,WAAW,CAACoK,UAA3E,EAAuF;AAAA;;AACrF,aAAOhF,IAAP,aAAOA,IAAP,yCAAOA,IAAI,CAAEV,QAAb,mDAAO,eAAgB+E,GAAhB,CAAqBrE,IAAD,IAAU;AACnC,cAAM;AAAEzC,UAAAA,EAAF;AAAMK,UAAAA,IAAN;AAAYuC,UAAAA;AAAZ,YAA0BH,IAAhC;AACA,cAAMV,QAAQ,GAAGwF,cAAc,CAAC9E,IAAD,CAA/B;AAEA,4BACE,oBAAC,QAAD;AACE,UAAA,KAAK,EAAEgD,WAAW,CAAChD,IAAD,CADpB;AAEE,UAAA,GAAG,EAAEzC,EAFP;AAGE,UAAA,IAAI,EAAEyC,IAHR;AAIE,UAAA,eAAe,EACbpC,IAAI,KAAKhD,WAAW,CAACsF,OAArB,IAAiC,CAACC,SAAD,IAAcvC,IAAI,KAAKhD,WAAW,CAACqK,gBALxE;AAOE,UAAA,SAAS,EAAEvK,IAAI,CAACsF,IAAI,CAACpC,IAAN,EAAY;AACzB,0CAA8BoC,IAAI,CAACzC,EAAL,MAAYzB,OAAZ,aAAYA,OAAZ,uBAAYA,OAAO,CAAEyB,EAArB,CADL;AAEzB,yCAA6B,CAAA+B,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEoC,MAAV,MAAqB,CAFzB;AAGzB,4CAAgCrG,gBAAgB,CAAC2E,IAAD,CAHvB;AAIzB,+CAAmCA,IAAI,CAACkF;AAJf,WAAZ,CAPjB;AAaE,UAAA,WAAW,EAAEf,aAAa,CAACnE,IAAD,CAb5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAeGV,QAfH,CADF;AAmBD,OAvBM,CAAP;AAwBD,KAzBD,MAyBO;AACL,aAAO,EAAP;AACD;AACF,GA7BD;;AA+BA,sBACE;AACE,IAAA,SAAS,EAAE5E,IAAI,CAAC,oBAAD,EAAuBkB,QAAvB,EAAiC;AAC9C,oBAAc,CAAAoB,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEsC,QAAV,CAAmBoC,MAAnB,MAA8B;AADE,KAAjC,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAE3E,OADP;AAEE,IAAA,SAAS,EAAE,CAACoI,OAAO,CAACnJ,MAAD,CAFrB;AAGE,IAAA,eAAe,EAAE,IAHnB;AAIE,IAAA,YAAY,EAAEkB,YAJhB;AAKE,IAAA,YAAY,EAAEI,WALhB;AAME,IAAA,QAAQ,EAAEmD,YANZ;AAOE,IAAA,WAAW,EAAEC,eAPf;AAQE,IAAA,UAAU,EAAEK,cARd;AASE,IAAA,MAAM,EAAEK,UATV;AAUE,IAAA,cAAc,EAAEb,kBAVlB;AAWE,IAAA,OAAO,EAAEd,WAXX;AAYE,IAAA,iBAAiB,EAAEuB,aAZrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcG8D,cAAc,CAAC9H,QAAD,CAdjB,CALF,CADF;AAwBD;;AAED,eAAetB,aAAf","sourcesContent":["import React, {\r\n  ChangeEvent,\r\n  FocusEvent,\r\n  KeyboardEvent,\r\n  MouseEvent,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport Tree, { arrAdd, calcDropPosition, Key, TreeNode } from \"rc-tree\";\r\nimport clsx from \"clsx\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CourseElement, TreeInstance, TreeNodeInstance } from \"types\";\r\nimport { ElementType, TreeActionTypes } from \"editor-constants\";\r\nimport { createUUID, getChildElement, hasAutoSummary, getElementType } from \"utils\";\r\nimport { TreeCompProps, TreeDragHandler } from \"./types\";\r\nimport {\r\n  createOptions,\r\n  createTree,\r\n  createVirtualElement,\r\n  hasEmptyTemplate,\r\n  isDroppable,\r\n  isDroppableAt,\r\n  pushElement,\r\n  updateDrop,\r\n} from \"./utils\";\r\n\r\nfunction BlmCourseTree(props: TreeCompProps) {\r\n  const {\r\n    treeType,\r\n    data,\r\n    ctxItem,\r\n    selectedItem,\r\n    action,\r\n    courseProps,\r\n    elementProps,\r\n    selectedElement,\r\n    noClick,\r\n    courseIdCopyFrom,\r\n    onTreeOptionsClick,\r\n    createElement,\r\n    renameElement,\r\n    positionElement,\r\n    updateAutoSummary,\r\n    selectTreeItem,\r\n    setTreeAction,\r\n    getCoursePreview,\r\n    duplicateElement,\r\n  } = props;\r\n  const treeRef = useRef<TreeInstance | null>(null);\r\n  const [treeData, setTreeData] = useState(data);\r\n  const [expandedKeys, setExpandedKeys] = useState<Key[]>([]);\r\n  const [title, setTitle] = useState<string>();\r\n  const selectedIds = selectedItem ? [selectedItem.id] : [];\r\n  let expandTimeout: NodeJS.Timeout | undefined;\r\n  let clickTimeout: NodeJS.Timeout | undefined;\r\n  const { t } = useTranslation(\"structures\");\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const newTree = createTree(data, { action, courseProps, elementProps });\r\n\r\n      setTreeData(newTree);\r\n    }\r\n  }, [data, action, courseProps, elementProps]);\r\n\r\n  useEffect(() => {\r\n    if (action) {\r\n      const { type, element } = action;\r\n\r\n      if (type === TreeActionTypes.AddItem) {\r\n        setExpandedKeys((keys) => {\r\n          if (!keys.includes(element.id)) {\r\n            keys = arrAdd(keys, element.id);\r\n          }\r\n\r\n          return keys;\r\n        });\r\n      }\r\n    }\r\n  }, [action]);\r\n\r\n  useEffect(() => {\r\n    if (selectedItem && action?.type === TreeActionTypes.CopyFrom) {\r\n      setExpandedKeys([selectedItem?.id]);\r\n      setTreeAction();\r\n    }\r\n  }, [selectedItem, action, setTreeAction]);\r\n\r\n  const handleInputRef = useCallback((element: HTMLInputElement | null) => {\r\n    if (element) {\r\n      setTimeout(() => {\r\n        element.focus();\r\n      }, 500);\r\n    }\r\n  }, []);\r\n\r\n  const handleInputFocus = (event: FocusEvent<HTMLInputElement>) => {\r\n    const input = event.currentTarget;\r\n\r\n    input.select();\r\n  };\r\n\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const handleInputBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    if (!action) {\r\n      return;\r\n    }\r\n\r\n    if (action.type === TreeActionTypes.AddItem) {\r\n      doAdd();\r\n    } else if (action.type === TreeActionTypes.RenameItem) {\r\n      doRename();\r\n    }\r\n  };\r\n\r\n  const handleInputKeyDown = (event: KeyboardEvent) => {\r\n    if (!action) {\r\n      return;\r\n    }\r\n\r\n    if (action.type === TreeActionTypes.AddItem) {\r\n      if (event.keyCode === 13) {\r\n        doAdd();\r\n      } else if (event.keyCode === 27) {\r\n        cancelAction();\r\n      }\r\n    } else if (action.type === TreeActionTypes.RenameItem) {\r\n      if (event.keyCode === 13) {\r\n        doRename();\r\n      } else if (event.keyCode === 27) {\r\n        cancelAction();\r\n      }\r\n    }\r\n  };\r\n\r\n  const doAdd = () => {\r\n    if (action) {\r\n      const { element, elementType } = action;\r\n      const newElement = createVirtualElement(\r\n        element,\r\n        createUUID(),\r\n        title || `${t(\"title.new\")}` + t(`${getElementType(elementType)}`),\r\n        elementType!\r\n      );\r\n\r\n      element.children = pushElement(element.children, newElement);\r\n\r\n      createElement(element, newElement);\r\n      cancelAction();\r\n    }\r\n  };\r\n\r\n  const doRename = () => {\r\n    if (action) {\r\n      const { element } = action;\r\n\r\n      if (title && element.name !== title) {\r\n        element.name = title;\r\n        renameElement(element, title);\r\n      }\r\n\r\n      cancelAction();\r\n    }\r\n  };\r\n\r\n  const cancelAction = () => {\r\n    setTitle(undefined);\r\n    setTreeAction();\r\n  };\r\n\r\n  //To use both onClick and onDoubleClick in the same tag, we have to use timeout.. else it will call both onclick and ondoubleclick functions..\r\n  //Note : https://stackoverflow.com/questions/35491425/double-click-and-click-on-reactjs-component\r\n  const handleClick = (event: MouseEvent, node: TreeNodeInstance) => {\r\n    if (!noClick) {\r\n      event.preventDefault();\r\n\r\n      if (clickTimeout) {\r\n        clearTimeout(clickTimeout);\r\n      }\r\n\r\n      if (event.detail === 1) {\r\n        clickTimeout = setTimeout(() => {\r\n          doSingleClick(node);\r\n          clickTimeout = undefined;\r\n        }, 250);\r\n      } else if (event.detail === 2) {\r\n        doDoubleClick(node);\r\n      }\r\n    }\r\n  };\r\n\r\n  const doSingleClick = (node: TreeNodeInstance) => {\r\n    const item = node.props.data;\r\n    const isSummary = item?.type === ElementType.Summary;\r\n\r\n    if (item && !action && (!item.isVirtual || isSummary)) {\r\n      const element = isSummary ? item : getChildElement(data, item?.id);\r\n      const htmlNode = node.selectHandle?.parentNode?.parentNode as HTMLElement;\r\n\r\n      if (element && htmlNode) {\r\n        selectTreeItem(element, htmlNode);\r\n      }\r\n    }\r\n  };\r\n\r\n  const doDoubleClick = (node: TreeNodeInstance) => {\r\n    const item = node.props.data;\r\n\r\n    if (item && !item.isVirtual && !action) {\r\n      const element = getChildElement(data, item?.id);\r\n\r\n      if (element) {\r\n        setTreeAction({ type: TreeActionTypes.RenameItem, element });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOptionsClick = (info: { event: MouseEvent<HTMLElement>; node: TreeNodeInstance }) => {\r\n    const item = info.node.props.data;\r\n\r\n    if (item && (!item?.isVirtual || item.type === ElementType.Summary)) {\r\n      const element = getChildElement(data, item.id);\r\n      if (onTreeOptionsClick) {\r\n        onTreeOptionsClick(info.event?.currentTarget, element ?? item);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleExpand = (keys: Key[]) => {\r\n    setExpandedKeys(keys);\r\n  };\r\n\r\n  const handleDragEnter: TreeDragHandler = ({\r\n    dragNode,\r\n    node,\r\n    dropPosition,\r\n    expandedKeys: newExpandexKeys,\r\n  }) => {\r\n    validateNodeExpand(dragNode, node, dropPosition, newExpandexKeys);\r\n  };\r\n\r\n  const handleDragOver: TreeDragHandler = ({ dragNode, node, dropPosition }) => {\r\n    validateNodeExpand(dragNode, node, dropPosition);\r\n  };\r\n\r\n  const getDropEffect = (event: MouseEvent, node: TreeNodeInstance) => {\r\n    const tree = treeRef.current!;\r\n    const dragNode = tree.dragNode;\r\n    const dropPosition = calcDropPosition(event, node);\r\n\r\n    if (isNodeDroppable(dragNode, node, dropPosition)) {\r\n      return \"move\";\r\n    }\r\n\r\n    return \"none\";\r\n  };\r\n\r\n  const handleDrop: TreeDragHandler = ({ dragNode, node, dropPosition }) => {\r\n    const posArr = node.props.pos!.split(\"-\");\r\n    const newDropPosition = dropPosition - Number(posArr[posArr.length - 1]);\r\n\r\n    if (isNodeDroppable(dragNode, node, newDropPosition)) {\r\n      doDrop(dragNode, node, newDropPosition);\r\n    }\r\n  };\r\n\r\n  const isNodeDroppable = (\r\n    dragNode: TreeNodeInstance,\r\n    dropNode: TreeNodeInstance,\r\n    dropPosition: number\r\n  ) => {\r\n    const tree = treeRef.current!;\r\n    const { dragNodesKeys = [] } = tree.state;\r\n    const children = (dropNode.props.children ?? []) as [];\r\n    const isExpanded = isNodeExpanded(dropNode);\r\n    const dragData = dragNode?.props.data; //dragNode is null if drag node from one tree to another\r\n    const dropData = dropNode?.props.data;\r\n    let dropParentData;\r\n\r\n    //check drag itself drop over node\r\n    if (!dragData || !dropData || dragNodesKeys.indexOf(dropNode.props.eventKey) !== -1) {\r\n      return false;\r\n      //BIL-214 React - Drag and drop is not working properly\r\n    } else if (isExpanded && children.length ? dropPosition === -1 : dropPosition !== 0) {\r\n      const { parent } = dropData;\r\n\r\n      if (parent) {\r\n        dropParentData = parent;\r\n      }\r\n    }\r\n\r\n    return (\r\n      isDroppable(treeData, dragData, dropParentData ?? dropData, courseProps) &&\r\n      isDroppableAt(dropData, dropPosition, isExpanded)\r\n    );\r\n  };\r\n\r\n  const isNodeExpanded = (node: TreeNodeInstance) => {\r\n    const { eventKey } = node.props;\r\n\r\n    return expandedKeys.indexOf(eventKey!) !== -1;\r\n  };\r\n\r\n  const validateNodeExpand = (\r\n    dragNode: TreeNodeInstance,\r\n    dropNode: TreeNodeInstance,\r\n    dropPos: number,\r\n    newExpandedKeys?: Key[]\r\n  ) => {\r\n    const tree = treeRef.current!;\r\n\r\n    if (\r\n      dropPos === 0 &&\r\n      !isNodeExpanded(dropNode) &&\r\n      isNodeDroppable(dragNode, dropNode, dropPos)\r\n    ) {\r\n      if (expandTimeout) {\r\n        clearTimeout(expandTimeout);\r\n        expandTimeout = undefined;\r\n      }\r\n\r\n      expandTimeout = setTimeout(() => {\r\n        const { eventKey } = dropNode.props;\r\n        const { dragOverNodeKey, dropPosition, expandedKeys: keys } = tree.state;\r\n\r\n        if (!newExpandedKeys) {\r\n          newExpandedKeys = arrAdd(keys, eventKey!);\r\n        }\r\n\r\n        if (\r\n          expandedKeys.indexOf(eventKey!) === -1 &&\r\n          dropPosition === 0 &&\r\n          dragOverNodeKey === eventKey\r\n        ) {\r\n          setExpandedKeys(newExpandedKeys);\r\n        }\r\n\r\n        expandTimeout = undefined;\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const doDrop = (dragNode: TreeNodeInstance, dropNode: TreeNodeInstance, dropPosition: number) => {\r\n    const dragData = dragNode.props.data!;\r\n    const dropData = dropNode.props.data!;\r\n    const isExpanded = dropNode.props.expanded ?? false;\r\n    const element = getChildElement(data, dragData.id);\r\n\r\n    updateDrop(treeData, dragData, dropData, dropPosition, isExpanded);\r\n\r\n    if (element) {\r\n      const oldParent = element?.parent;\r\n      const oldPosition = element && oldParent?.children.indexOf(element);\r\n\r\n      if (dropData.type === ElementType.Summary && dropData.parent) {\r\n        updateDrop(data, dragData, dropData.parent, 0, isExpanded);\r\n      } else {\r\n        updateDrop(data, dragData, dropData, dropPosition, isExpanded);\r\n      }\r\n\r\n      const newParent = element.parent;\r\n      const newPosition = element.parent?.children.indexOf(element);\r\n\r\n      if (\r\n        oldParent &&\r\n        newParent &&\r\n        oldPosition !== undefined &&\r\n        oldPosition !== -1 &&\r\n        newPosition !== undefined &&\r\n        newPosition !== -1 &&\r\n        (newParent.id !== oldParent.id || newPosition !== oldPosition)\r\n      ) {\r\n        positionElement(element, oldParent, newParent, newPosition);\r\n\r\n        if (element.isSummary && hasAutoSummary(newParent, Infinity)) {\r\n          updateAutoSummary(newParent, false);\r\n        }\r\n\r\n        setTreeData({ ...treeData });\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderTitle = (item: CourseElement) => {\r\n    if (action) {\r\n      if (action.type === TreeActionTypes.AddItem && item.id === \"newElement\") {\r\n        return (\r\n          <input\r\n            ref={handleInputRef}\r\n            type=\"text\"\r\n            value={title ?? item.name}\r\n            onFocus={handleInputFocus}\r\n            onBlur={handleInputBlur}\r\n            onKeyDown={handleInputKeyDown}\r\n            onChange={handleInputChange}\r\n          />\r\n        );\r\n      } else if (action.type === TreeActionTypes.RenameItem && item.id === action.element.id) {\r\n        return (\r\n          <input\r\n            type=\"text\"\r\n            autoFocus\r\n            value={title ?? item.name}\r\n            onFocus={handleInputFocus}\r\n            onBlur={handleInputBlur}\r\n            onKeyDown={handleInputKeyDown}\r\n            onChange={handleInputChange}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    return <span>{item.name}</span>;\r\n  };\r\n\r\n  const previewCopyFrom = (elementId: string, event: MouseEvent) => {\r\n    if (courseIdCopyFrom) {\r\n      getCoursePreview(courseIdCopyFrom, elementId, event.ctrlKey).then((result) => {\r\n        if (!result.error) {\r\n          const { file_uri } = result.payload;\r\n\r\n          if (file_uri) {\r\n            window.open(file_uri);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const addCopyFrom = (element: CourseElement, oldParentId: any) => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    let courseId = urlParams.get(\"courseId\");\r\n    duplicateElement(element, \"CopyFrom\", selectedElement?.id, courseId);\r\n  };\r\n\r\n  function renderOptions(item: CourseElement) {\r\n    const options = createOptions(item, treeType, elementProps);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {options.map((option, index) => (\r\n          <span key={index} className={option} />\r\n        ))}\r\n        {treeType === \"CopyFrom\" &&\r\n          (item.type === ElementType.Chapter ||\r\n            item.type === ElementType.Page ||\r\n            item.type === ElementType.Screen ||\r\n            item.type === ElementType.Question ||\r\n            item.type === ElementType.Evaluation ||\r\n            item.type === ElementType.Custom) && (\r\n            <>\r\n              {(item.type === ElementType.Page ||\r\n                item.type === ElementType.Screen ||\r\n                item.type === ElementType.Question) && (\r\n                <div\r\n                  className=\"copy-from-preview\"\r\n                  onClick={(event) => previewCopyFrom(item.id, event)}\r\n                />\r\n              )}\r\n              <div\r\n                className=\"copy-from-add\"\r\n                onClick={(event) => addCopyFrom(item, item?.parent?.id)}\r\n              />\r\n            </>\r\n          )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  const renderChildren = (item?: CourseElement) => {\r\n    if (item?.type !== ElementType.SimpleContent && item?.type !== ElementType.SimplePage) {\r\n      return item?.children?.map((item) => {\r\n        const { id, type, isVirtual } = item;\r\n        const children = renderChildren(item);\r\n\r\n        return (\r\n          <TreeNode\r\n            title={renderTitle(item)}\r\n            key={id}\r\n            data={item}\r\n            showOptionsIcon={\r\n              type === ElementType.Summary || (!isVirtual && type !== ElementType.AssociateContent)\r\n            }\r\n            className={clsx(item.type, {\r\n              \"tree-treenode-ctx-selected\": item.id === ctxItem?.id,\r\n              \"tree-treenode-no-children\": children?.length === 0,\r\n              \"tree-treenode-empty-template\": hasEmptyTemplate(item),\r\n              \"tree-treenode-outdated-tempalte\": item.isOutdated,\r\n            })}\r\n            optionsIcon={renderOptions(item)}\r\n          >\r\n            {children}\r\n          </TreeNode>\r\n        );\r\n      });\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\"blm-tree-container\", treeType, {\r\n        \"empty-tree\": treeData?.children.length === 0,\r\n      })}\r\n    >\r\n      <Tree\r\n        ref={treeRef}\r\n        draggable={!Boolean(action)}\r\n        showOptionsIcon={true}\r\n        expandedKeys={expandedKeys}\r\n        selectedKeys={selectedIds}\r\n        onExpand={handleExpand}\r\n        onDragEnter={handleDragEnter}\r\n        onDragOver={handleDragOver}\r\n        onDrop={handleDrop}\r\n        onOptionsClick={handleOptionsClick}\r\n        onClick={handleClick}\r\n        getNodeDropEffect={getDropEffect}\r\n      >\r\n        {renderChildren(treeData)}\r\n      </Tree>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmCourseTree;\r\n"]},"metadata":{},"sourceType":"module"}