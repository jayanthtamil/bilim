{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\question-editor\\\\panels\\\\main\\\\BlmQuestionMain.tsx\";\nimport React, { Fragment } from \"react\";\nimport { Select, MenuItem, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { AcceptedFileTypes, QuestionFeedbackTypes, QuestionTemplateTypes, TemplateEditorOptionTypes } from \"editor-constants\";\nimport { isQuestionCustom, isQuestionPropositions } from \"utils\";\nimport { BlmMediaPickerEditor } from \"components/shared\";\nimport { getIntroductionMedia } from \"template-builders\";\nimport { useQuestionEditorCtx } from \"components/question-editor/core\";\nimport { BlmLinkMedia, BlmQuestionPropositions, BlmQuestionCustom } from \"components/question-editor/components\";\nimport { updateQuestionMain } from \"components/question-editor/reducers\";\nimport \"./styles.scss\";\n\nfunction BlmQuestionMain(props) {\n  const {\n    type,\n    introduction,\n    data,\n    feedback,\n    dispatch\n  } = props;\n  const {\n    element\n  } = useQuestionEditorCtx();\n  const {\n    title,\n    text,\n    media,\n    sound,\n    simpleContent,\n    instruction,\n    validate,\n    content\n  } = data;\n  const introMedia = getIntroductionMedia(introduction);\n  const hasFBProps = feedback.type === QuestionFeedbackTypes.Propositions;\n  const {\n    t\n  } = useTranslation(\"question-editor\");\n\n  const updateChange = newData => {\n    if (dispatch) {\n      dispatch(updateQuestionMain(newData));\n    }\n  };\n\n  const handleChange = event => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const newData = { ...data\n    };\n\n    if (name === \"title\") {\n      newData.title.value = value;\n    } else if (name === \"description\") {\n      newData.text.value = value;\n    } else if (name === \"media\") {\n      newData.media.value = value;\n    } else if (name === \"sound\") {\n      if (value && !value.subtitle) {\n        var _newData$sound, _newData$sound$value;\n\n        value.subtitle = (_newData$sound = newData.sound) === null || _newData$sound === void 0 ? void 0 : (_newData$sound$value = _newData$sound.value) === null || _newData$sound$value === void 0 ? void 0 : _newData$sound$value.subtitle;\n      }\n\n      if (value && !value.marker) {\n        var _newData$sound2, _newData$sound2$value;\n\n        value.marker = (_newData$sound2 = newData.sound) === null || _newData$sound2 === void 0 ? void 0 : (_newData$sound2$value = _newData$sound2.value) === null || _newData$sound2$value === void 0 ? void 0 : _newData$sound2$value.marker;\n      }\n\n      newData.sound.value = value;\n    } else if (name === \"simpleContent\") {\n      newData.simpleContent.value = value;\n    } else if (name === \"instruction\") {\n      newData.instruction.value = value;\n    } else if (name === \"validate\") {\n      newData.validate.checked = value;\n    }\n\n    updateChange(newData);\n  };\n\n  const renderChildren = () => {\n    if (isQuestionPropositions(content) && content.value) {\n      return /*#__PURE__*/React.createElement(BlmQuestionPropositions, {\n        data: content.value,\n        isEditable: content.isEditable,\n        hasFBProbisitions: hasFBProps,\n        dispatch: dispatch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      });\n    } else if (isQuestionCustom(content)) {\n      return /*#__PURE__*/React.createElement(BlmQuestionCustom, {\n        data: content,\n        dispatch: dispatch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 14\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-main-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, type !== QuestionTemplateTypes.NoHeader && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-media-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BlmLinkMedia, {\n    name: \"media\",\n    elementId: element.id,\n    data: media.value,\n    linkMedia: introMedia,\n    isEditable: media.isEditable,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"title\",\n    type: \"text\",\n    value: title.value || \"\",\n    disabled: !title.isEditable,\n    className: \"main-media-title\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-media-title-hr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"description\",\n    placeholder: t(\"main.add_desc\"),\n    value: text.value || \"\",\n    disabled: !text.isEditable,\n    className: \"main-media-description\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(BlmMediaPickerEditor, {\n    name: \"sound\",\n    elementId: element.id,\n    acceptedFiles: [AcceptedFileTypes.Audio],\n    data: sound.value,\n    placeholder: t(\"label.no_sound\"),\n    disabled: !sound.isEditable,\n    className: \"sound-picker-1\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    name: \"simpleContent\",\n    value: simpleContent.value,\n    disabled: !simpleContent.isEditable,\n    className: \"main-simple-dropdown simple-content-select\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: TemplateEditorOptionTypes.None,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"simple-content-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"item-none-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"item-none-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, t(\"label.no_simple_content\")))), element === null || element === void 0 ? void 0 : element.children.map(item => {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: item.id,\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"simple-content-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"item-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"item-lbl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, item.name)));\n  })), type === QuestionTemplateTypes.Standard ? /*#__PURE__*/React.createElement(\"input\", {\n    name: \"instruction\",\n    type: \"text\",\n    value: instruction.value || \"\",\n    disabled: !instruction.isEditable,\n    className: \"main-media-instruction\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"validate\",\n    label: t(\"main.show_validate\"),\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      className: \"checkbox-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 24\n      }\n    }),\n    checked: validate.checked,\n    className: \"main-media-validate\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  })), renderChildren());\n}\n\nexport default BlmQuestionMain;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/question-editor/panels/main/BlmQuestionMain.tsx"],"names":["React","Fragment","Select","MenuItem","FormControlLabel","Checkbox","useTranslation","AcceptedFileTypes","QuestionFeedbackTypes","QuestionTemplateTypes","TemplateEditorOptionTypes","isQuestionCustom","isQuestionPropositions","BlmMediaPickerEditor","getIntroductionMedia","useQuestionEditorCtx","BlmLinkMedia","BlmQuestionPropositions","BlmQuestionCustom","updateQuestionMain","BlmQuestionMain","props","type","introduction","data","feedback","dispatch","element","title","text","media","sound","simpleContent","instruction","validate","content","introMedia","hasFBProps","Propositions","t","updateChange","newData","handleChange","event","target","name","value","checked","subtitle","marker","renderChildren","isEditable","NoHeader","id","Audio","None","children","map","item","Standard"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Fragment } from \"react\";\r\nimport { Select, MenuItem, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport {\r\n  CustomChangeEvent,\r\n  LinkMedia,\r\n  MediaFile,\r\n  QuestionFeedback,\r\n  QuestionIntroduction,\r\n  QuestionMain,\r\n} from \"types\";\r\nimport {\r\n  AcceptedFileTypes,\r\n  QuestionFeedbackTypes,\r\n  QuestionTemplateTypes,\r\n  TemplateEditorOptionTypes,\r\n} from \"editor-constants\";\r\nimport { isQuestionCustom, isQuestionPropositions } from \"utils\";\r\nimport { BlmMediaPickerEditor } from \"components/shared\";\r\nimport { getIntroductionMedia } from \"template-builders\";\r\nimport { useQuestionEditorCtx } from \"components/question-editor/core\";\r\nimport {\r\n  BlmLinkMedia,\r\n  BlmQuestionPropositions,\r\n  BlmQuestionCustom,\r\n} from \"components/question-editor/components\";\r\nimport { QuestionEditorDispatch, updateQuestionMain } from \"components/question-editor/reducers\";\r\nimport \"./styles.scss\";\r\n\r\ninterface CompProps {\r\n  type: QuestionTemplateTypes;\r\n  introduction: QuestionIntroduction;\r\n  data: QuestionMain;\r\n  feedback: QuestionFeedback;\r\n  dispatch: QuestionEditorDispatch;\r\n}\r\n\r\nfunction BlmQuestionMain(props: CompProps) {\r\n  const { type, introduction, data, feedback, dispatch } = props;\r\n  const { element } = useQuestionEditorCtx();\r\n  const { title, text, media, sound, simpleContent, instruction, validate, content } = data;\r\n  const introMedia = getIntroductionMedia(introduction);\r\n  const hasFBProps = feedback.type === QuestionFeedbackTypes.Propositions;\r\n  const { t } = useTranslation(\"question-editor\");\r\n\r\n  const updateChange = (newData: QuestionMain) => {\r\n    if (dispatch) {\r\n      dispatch(updateQuestionMain(newData));\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: ChangeEvent<any> | CustomChangeEvent<MediaFile | LinkMedia | undefined>\r\n  ) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const newData: QuestionMain = { ...data };\r\n\r\n    if (name === \"title\") {\r\n      newData.title.value = value;\r\n    } else if (name === \"description\") {\r\n      newData.text.value = value;\r\n    } else if (name === \"media\") {\r\n      newData.media.value = value;\r\n    } else if (name === \"sound\") {\r\n      if (value && !value.subtitle) {\r\n        value.subtitle = newData.sound?.value?.subtitle;\r\n      }\r\n      if (value && !value.marker) {\r\n        value.marker = newData.sound?.value?.marker;\r\n      }\r\n      newData.sound.value = value;\r\n    } else if (name === \"simpleContent\") {\r\n      newData.simpleContent.value = value;\r\n    } else if (name === \"instruction\") {\r\n      newData.instruction.value = value;\r\n    } else if (name === \"validate\") {\r\n      newData.validate.checked = value;\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const renderChildren = () => {\r\n    if (isQuestionPropositions(content) && content.value) {\r\n      return (\r\n        <BlmQuestionPropositions\r\n          data={content.value}\r\n          isEditable={content.isEditable}\r\n          hasFBProbisitions={hasFBProps}\r\n          dispatch={dispatch}\r\n        />\r\n      );\r\n    } else if (isQuestionCustom(content)) {\r\n      return <BlmQuestionCustom data={content} dispatch={dispatch} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-main-wrapper\">\r\n      {type !== QuestionTemplateTypes.NoHeader && (\r\n        <Fragment>\r\n          <div className=\"main-media-wrapper\">\r\n            <BlmLinkMedia\r\n              name=\"media\"\r\n              elementId={element!.id}\r\n              data={media.value}\r\n              linkMedia={introMedia}\r\n              isEditable={media.isEditable}\r\n              onChange={handleChange}\r\n            />\r\n            <input\r\n              name=\"title\"\r\n              type=\"text\"\r\n              value={title.value || \"\"}\r\n              disabled={!title.isEditable}\r\n              className=\"main-media-title\"\r\n              onChange={handleChange}\r\n            />\r\n            <div className=\"main-media-title-hr\" />\r\n            <textarea\r\n              name=\"description\"\r\n              placeholder={t(\"main.add_desc\")}\r\n              value={text.value || \"\"}\r\n              disabled={!text.isEditable}\r\n              className=\"main-media-description\"\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <BlmMediaPickerEditor\r\n            name=\"sound\"\r\n            elementId={element!.id}\r\n            acceptedFiles={[AcceptedFileTypes.Audio]}\r\n            data={sound.value}\r\n            placeholder={t(\"label.no_sound\")}\r\n            disabled={!sound.isEditable}\r\n            className=\"sound-picker-1\"\r\n            onChange={handleChange}\r\n          />\r\n          <Select\r\n            name=\"simpleContent\"\r\n            value={simpleContent.value}\r\n            disabled={!simpleContent.isEditable}\r\n            className=\"main-simple-dropdown simple-content-select\"\r\n            onChange={handleChange}\r\n          >\r\n            <MenuItem value={TemplateEditorOptionTypes.None}>\r\n              <div className=\"simple-content-item\">\r\n                <div className=\"item-none-icon\" />\r\n                <div className=\"item-none-lbl\">{t(\"label.no_simple_content\")}</div>\r\n              </div>\r\n            </MenuItem>\r\n            {element?.children.map((item) => {\r\n              return (\r\n                <MenuItem key={item.id} value={item.id}>\r\n                  <div className=\"simple-content-item\">\r\n                    <div className=\"item-icon\" />\r\n                    <div className=\"item-lbl\">{item.name}</div>\r\n                  </div>\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          {type === QuestionTemplateTypes.Standard ? (\r\n            <input\r\n              name=\"instruction\"\r\n              type=\"text\"\r\n              value={instruction.value || \"\"}\r\n              disabled={!instruction.isEditable}\r\n              className=\"main-media-instruction\"\r\n              onChange={handleChange}\r\n            />\r\n          ) : (\r\n            <FormControlLabel\r\n              name=\"validate\"\r\n              label={t(\"main.show_validate\")}\r\n              control={<Checkbox className=\"checkbox-3\" />}\r\n              checked={validate.checked}\r\n              className=\"main-media-validate\"\r\n              onChange={handleChange}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      )}\r\n      {renderChildren()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmQuestionMain;\r\n"]},"metadata":{},"sourceType":"module"}