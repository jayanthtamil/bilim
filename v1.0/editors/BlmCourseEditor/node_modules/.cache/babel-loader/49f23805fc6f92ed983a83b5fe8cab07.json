{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\media-format\\\\BlmMediaFormat.tsx\";\nimport React, { Fragment, useMemo } from \"react\";\nimport { Select, MenuItem, Divider, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { MediaFormats } from \"editor-constants\";\nimport { AutoIcon, ExtraHighIcon, ExtraWideIcon, FixedHeightIcon, FixedSizeIcon, FixedWidthIcon, FullHeightIcon, HighIcon, LargeIcon, RelativeHeightIcon, RoundIcon, SquareIcon, WideIcon } from \"assets/icons\";\nimport { BlmSubscriptInput } from \"shared\";\nimport \"./styles.scss\";\n\nfunction getLabelAndIcon(format, t) {\n  switch (format) {\n    case MediaFormats.Square:\n      return [`${t(\"format_opt.square\")}`, /*#__PURE__*/React.createElement(SquareIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 44\n        }\n      })];\n\n    case MediaFormats.Round:\n      return [`${t(\"format_opt.round\")}`, /*#__PURE__*/React.createElement(RoundIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 43\n        }\n      })];\n\n    case MediaFormats.Large:\n      return [`${t(\"format_opt.large\")}`, /*#__PURE__*/React.createElement(LargeIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 43\n        }\n      })];\n\n    case MediaFormats.Wide:\n      return [`${t(\"format_opt.wide\")}`, /*#__PURE__*/React.createElement(WideIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 42\n        }\n      })];\n\n    case MediaFormats.ExtraWide:\n      return [`${t(\"format_opt.extra_wide\")}`, /*#__PURE__*/React.createElement(ExtraWideIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 48\n        }\n      })];\n\n    case MediaFormats.FixedHeight:\n      return [`${t(\"format_opt.fixed_height\")}`, /*#__PURE__*/React.createElement(FixedHeightIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 50\n        }\n      })];\n\n    case MediaFormats.RelativeHeight:\n      return [`${t(\"format_opt.homothety\")}`, /*#__PURE__*/React.createElement(RelativeHeightIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 47\n        }\n      })];\n\n    case MediaFormats.FixedWidth:\n      return [`${t(\"format_opt.fixed_width\")}`, /*#__PURE__*/React.createElement(FixedWidthIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 49\n        }\n      })];\n\n    case MediaFormats.FixedSize:\n      return [`${t(\"format_opt.fixed_size\")}`, /*#__PURE__*/React.createElement(FixedSizeIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 48\n        }\n      })];\n\n    case MediaFormats.High:\n      return [`${t(\"format_opt.high\")}`, /*#__PURE__*/React.createElement(HighIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 42\n        }\n      })];\n\n    case MediaFormats.ExtraHigh:\n      return [`${t(\"format_opt.extra_high\")}`, /*#__PURE__*/React.createElement(ExtraHighIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 48\n        }\n      })];\n\n    case MediaFormats.FullHeight:\n      return [`${t(\"format_opt.full_height\")}`, /*#__PURE__*/React.createElement(FullHeightIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 49\n        }\n      })];\n\n    case MediaFormats.Auto:\n      return [`${t(\"format_opt.auto\")}`, /*#__PURE__*/React.createElement(AutoIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 42\n        }\n      })];\n  }\n}\n\nfunction BlmMediaFormat(props) {\n  const {\n    data,\n    formats = [],\n    onChange,\n    isButtonFormater\n  } = props;\n  const {\n    value,\n    width,\n    height,\n    defaultWidth,\n    defaultHeight\n  } = data;\n  const currentValue = value || formats.length && formats[0] || MediaFormats.Square;\n  const showWidth = currentValue === MediaFormats.FixedWidth || currentValue === MediaFormats.FixedSize;\n  const showHeight = currentValue === MediaFormats.FixedHeight || currentValue === MediaFormats.RelativeHeight || currentValue === MediaFormats.FixedSize;\n  const {\n    t\n  } = useTranslation(\"shared\");\n  const items = useMemo(() => {\n    const arr = [];\n    const dividers = [MediaFormats.Round, MediaFormats.ExtraWide, MediaFormats.FixedSize, MediaFormats.FullHeight];\n    let isDivider = false;\n\n    if (formats) {\n      Object.values(MediaFormats).forEach(item => {\n        if (formats.includes(item)) {\n          if (isDivider) {\n            arr.push( /*#__PURE__*/React.createElement(Divider, {\n              key: item + \"divider\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 22\n              }\n            }));\n            isDivider = false;\n          }\n\n          const [label, icon] = getLabelAndIcon(item, t);\n          arr.push( /*#__PURE__*/React.createElement(MenuItem, {\n            key: item,\n            value: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ListItemText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }\n          }, label), /*#__PURE__*/React.createElement(ListItemIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }\n          }, icon)));\n        }\n\n        if (dividers.includes(item) && arr.length > 0) {\n          isDivider = true;\n        }\n      });\n    }\n\n    return arr;\n  }, [formats, t]);\n\n  const updateChange = value => {\n    if (onChange) {\n      onChange({\n        target: {\n          name: \"format\",\n          value\n        }\n      });\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    const newData = { ...data\n    };\n\n    if (name === \"format\") {\n      newData.value = value;\n    } else if (name === \"width\") {\n      newData.width = value;\n    } else if (name === \"height\") {\n      newData.height = value;\n    }\n\n    updateChange(newData);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `media-format-wrapper ${isButtonFormater ? data && data.value === MediaFormats.FixedWidth ? \"button-media-width-format\" : \"button-media-format-wrapper\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, showWidth && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, t(\"title.width\")), /*#__PURE__*/React.createElement(BlmSubscriptInput, {\n    name: \"width\",\n    min: 10,\n    max: 1000,\n    value: width || defaultWidth,\n    label: \"px\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  })), showHeight && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, t(\"title.height\")), /*#__PURE__*/React.createElement(BlmSubscriptInput, {\n    name: \"height\",\n    min: 10,\n    max: 1000,\n    value: height || defaultHeight,\n    label: \"px\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, t(\"format_opt.format\")), /*#__PURE__*/React.createElement(Select, {\n    name: \"format\",\n    value: currentValue,\n    MenuProps: {\n      className: \"media-format-dropdown-menu\",\n      disableRestoreFocus: true //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\n\n    },\n    className: \"media-format-dropdown\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, items));\n}\n\nexport default BlmMediaFormat;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/media-format/BlmMediaFormat.tsx"],"names":["React","Fragment","useMemo","Select","MenuItem","Divider","ListItemIcon","ListItemText","useTranslation","MediaFormats","AutoIcon","ExtraHighIcon","ExtraWideIcon","FixedHeightIcon","FixedSizeIcon","FixedWidthIcon","FullHeightIcon","HighIcon","LargeIcon","RelativeHeightIcon","RoundIcon","SquareIcon","WideIcon","BlmSubscriptInput","getLabelAndIcon","format","t","Square","Round","Large","Wide","ExtraWide","FixedHeight","RelativeHeight","FixedWidth","FixedSize","High","ExtraHigh","FullHeight","Auto","BlmMediaFormat","props","data","formats","onChange","isButtonFormater","value","width","height","defaultWidth","defaultHeight","currentValue","length","showWidth","showHeight","items","arr","dividers","isDivider","Object","values","forEach","item","includes","push","label","icon","updateChange","target","name","handleChange","event","newData","className","disableRestoreFocus"],"mappings":";AAAA,OAAOA,KAAP,IAA6BC,QAA7B,EAAqDC,OAArD,QAAoE,OAApE;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,YAApC,EAAkDC,YAAlD,QAAsE,mBAAtE;AACA,SAASC,cAAT,QAA+B,eAA/B;AAGA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SACEC,QADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,eAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,cAPF,EAQEC,QARF,EASEC,SATF,EAUEC,kBAVF,EAWEC,SAXF,EAYEC,UAZF,EAaEC,QAbF,QAcO,cAdP;AAeA,SAASC,iBAAT,QAA6D,QAA7D;AACA,OAAO,eAAP;;AAWA,SAASC,eAAT,CAAyBC,MAAzB,EAA+CC,CAA/C,EAAuD;AACrD,UAAQD,MAAR;AACE,SAAKhB,YAAY,CAACkB,MAAlB;AACE,aAAO,CAAE,GAAED,CAAC,CAAC,mBAAD,CAAsB,EAA3B,eAA8B,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA9B,CAAP;;AACF,SAAKjB,YAAY,CAACmB,KAAlB;AACE,aAAO,CAAE,GAAEF,CAAC,CAAC,kBAAD,CAAqB,EAA1B,eAA6B,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA7B,CAAP;;AACF,SAAKjB,YAAY,CAACoB,KAAlB;AACE,aAAO,CAAE,GAAEH,CAAC,CAAC,kBAAD,CAAqB,EAA1B,eAA6B,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA7B,CAAP;;AACF,SAAKjB,YAAY,CAACqB,IAAlB;AACE,aAAO,CAAE,GAAEJ,CAAC,CAAC,iBAAD,CAAoB,EAAzB,eAA4B,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA5B,CAAP;;AACF,SAAKjB,YAAY,CAACsB,SAAlB;AACE,aAAO,CAAE,GAAEL,CAAC,CAAC,uBAAD,CAA0B,EAA/B,eAAkC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlC,CAAP;;AACF,SAAKjB,YAAY,CAACuB,WAAlB;AACE,aAAO,CAAE,GAAEN,CAAC,CAAC,yBAAD,CAA4B,EAAjC,eAAoC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApC,CAAP;;AACF,SAAKjB,YAAY,CAACwB,cAAlB;AACE,aAAO,CAAE,GAAEP,CAAC,CAAC,sBAAD,CAAyB,EAA9B,eAAiC,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjC,CAAP;;AACF,SAAKjB,YAAY,CAACyB,UAAlB;AACE,aAAO,CAAE,GAAER,CAAC,CAAC,wBAAD,CAA2B,EAAhC,eAAmC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAnC,CAAP;;AACF,SAAKjB,YAAY,CAAC0B,SAAlB;AACE,aAAO,CAAE,GAAET,CAAC,CAAC,uBAAD,CAA0B,EAA/B,eAAkC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlC,CAAP;;AACF,SAAKjB,YAAY,CAAC2B,IAAlB;AACE,aAAO,CAAE,GAAEV,CAAC,CAAC,iBAAD,CAAoB,EAAzB,eAA4B,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA5B,CAAP;;AACF,SAAKjB,YAAY,CAAC4B,SAAlB;AACE,aAAO,CAAE,GAAEX,CAAC,CAAC,uBAAD,CAA0B,EAA/B,eAAkC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlC,CAAP;;AACF,SAAKjB,YAAY,CAAC6B,UAAlB;AACE,aAAO,CAAE,GAAEZ,CAAC,CAAC,wBAAD,CAA2B,EAAhC,eAAmC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAnC,CAAP;;AACF,SAAKjB,YAAY,CAAC8B,IAAlB;AACE,aAAO,CAAE,GAAEb,CAAC,CAAC,iBAAD,CAAoB,EAAzB,eAA4B,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA5B,CAAP;AA1BJ;AA4BD;;AAED,SAASc,cAAT,CAAwBC,KAAxB,EAA0C;AACxC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAO,GAAG,EAAlB;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,MAAqDJ,KAA3D;AACA,QAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA,YAAxB;AAAsCC,IAAAA;AAAtC,MAAwDR,IAA9D;AACA,QAAMS,YAAY,GAAGL,KAAK,IAAKH,OAAO,CAACS,MAAR,IAAkBT,OAAO,CAAC,CAAD,CAAnC,IAA2ClC,YAAY,CAACkB,MAA7E;AACA,QAAM0B,SAAS,GACbF,YAAY,KAAK1C,YAAY,CAACyB,UAA9B,IAA4CiB,YAAY,KAAK1C,YAAY,CAAC0B,SAD5E;AAEA,QAAMmB,UAAU,GACdH,YAAY,KAAK1C,YAAY,CAACuB,WAA9B,IACAmB,YAAY,KAAK1C,YAAY,CAACwB,cAD9B,IAEAkB,YAAY,KAAK1C,YAAY,CAAC0B,SAHhC;AAIA,QAAM;AAAET,IAAAA;AAAF,MAAQlB,cAAc,CAAC,QAAD,CAA5B;AAEA,QAAM+C,KAAK,GAAGrD,OAAO,CAAC,MAAM;AAC1B,UAAMsD,GAAmB,GAAG,EAA5B;AACA,UAAMC,QAAQ,GAAG,CACfhD,YAAY,CAACmB,KADE,EAEfnB,YAAY,CAACsB,SAFE,EAGftB,YAAY,CAAC0B,SAHE,EAIf1B,YAAY,CAAC6B,UAJE,CAAjB;AAMA,QAAIoB,SAAS,GAAG,KAAhB;;AAEA,QAAIf,OAAJ,EAAa;AACXgB,MAAAA,MAAM,CAACC,MAAP,CAAcnD,YAAd,EAA4BoD,OAA5B,CAAqCC,IAAD,IAAU;AAC5C,YAAInB,OAAO,CAACoB,QAAR,CAAiBD,IAAjB,CAAJ,EAA4B;AAC1B,cAAIJ,SAAJ,EAAe;AACbF,YAAAA,GAAG,CAACQ,IAAJ,eAAS,oBAAC,OAAD;AAAS,cAAA,GAAG,EAAEF,IAAI,GAAG,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAT;AACAJ,YAAAA,SAAS,GAAG,KAAZ;AACD;;AAED,gBAAM,CAACO,KAAD,EAAQC,IAAR,IAAgB1C,eAAe,CAACsC,IAAD,EAAOpC,CAAP,CAArC;AAEA8B,UAAAA,GAAG,CAACQ,IAAJ,eACE,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAEF,IAAf;AAAqB,YAAA,KAAK,EAAEA,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAeG,KAAf,CADF,eAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAeC,IAAf,CAFF,CADF;AAMD;;AAED,YAAIT,QAAQ,CAACM,QAAT,CAAkBD,IAAlB,KAA2BN,GAAG,CAACJ,MAAJ,GAAa,CAA5C,EAA+C;AAC7CM,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OApBD;AAqBD;;AAED,WAAOF,GAAP;AACD,GAnCoB,EAmClB,CAACb,OAAD,EAAUjB,CAAV,CAnCkB,CAArB;;AAqCA,QAAMyC,YAAY,GAAIrB,KAAD,IAAwB;AAC3C,QAAIF,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC;AAAEwB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,QAAR;AAAkBvB,UAAAA;AAAlB;AAAV,OAAD,CAAR;AACD;AACF,GAJD;;AAMA,QAAMwB,YAAY,GAChBC,KADmB,IAEhB;AACH,UAAM;AAAEF,MAAAA,IAAF;AAAQvB,MAAAA;AAAR,QAAkByB,KAAK,CAACH,MAA9B;AACA,UAAMI,OAAO,GAAG,EAAE,GAAG9B;AAAL,KAAhB;;AAEA,QAAI2B,IAAI,KAAK,QAAb,EAAuB;AACrBG,MAAAA,OAAO,CAAC1B,KAAR,GAAgBA,KAAhB;AACD,KAFD,MAEO,IAAIuB,IAAI,KAAK,OAAb,EAAsB;AAC3BG,MAAAA,OAAO,CAACzB,KAAR,GAAgBD,KAAhB;AACD,KAFM,MAEA,IAAIuB,IAAI,KAAK,QAAb,EAAuB;AAC5BG,MAAAA,OAAO,CAACxB,MAAR,GAAiBF,KAAjB;AACD;;AAEDqB,IAAAA,YAAY,CAACK,OAAD,CAAZ;AACD,GAfD;;AAiBA,sBACE;AACE,IAAA,SAAS,EAAG,wBACV3B,gBAAgB,GACZH,IAAI,IAAIA,IAAI,CAACI,KAAL,KAAerC,YAAY,CAACyB,UAApC,GACE,2BADF,GAEE,6BAHU,GAIZ,EACL,EAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGmB,SAAS,iBACR,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO3B,CAAC,CAAC,aAAD,CAAR,CADF,eAEE,oBAAC,iBAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,GAAG,EAAE,EAFP;AAGE,IAAA,GAAG,EAAE,IAHP;AAIE,IAAA,KAAK,EAAEqB,KAAK,IAAIE,YAJlB;AAKE,IAAA,KAAK,EAAC,IALR;AAME,IAAA,QAAQ,EAAEqB,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVJ,EAsBGhB,UAAU,iBACT,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO5B,CAAC,CAAC,cAAD,CAAR,CADF,eAEE,oBAAC,iBAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,GAAG,EAAE,EAFP;AAGE,IAAA,GAAG,EAAE,IAHP;AAIE,IAAA,KAAK,EAAEsB,MAAM,IAAIE,aAJnB;AAKE,IAAA,KAAK,EAAC,IALR;AAME,IAAA,QAAQ,EAAEoB,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAvBJ,eAmCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO5C,CAAC,CAAC,mBAAD,CAAR,CAnCF,eAoCE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAEyB,YAFT;AAGE,IAAA,SAAS,EAAE;AACTsB,MAAAA,SAAS,EAAE,4BADF;AAETC,MAAAA,mBAAmB,EAAE,IAFZ,CAEkB;;AAFlB,KAHb;AAOE,IAAA,SAAS,EAAC,uBAPZ;AAQE,IAAA,QAAQ,EAAEJ,YARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGf,KAVH,CApCF,CADF;AAmDD;;AAED,eAAef,cAAf","sourcesContent":["import React, { ChangeEvent, Fragment, ReactElement, useMemo } from \"react\";\r\nimport { Select, MenuItem, Divider, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CustomChangeEvent, MediaFormat } from \"types\";\r\nimport { MediaFormats } from \"editor-constants\";\r\nimport {\r\n  AutoIcon,\r\n  ExtraHighIcon,\r\n  ExtraWideIcon,\r\n  FixedHeightIcon,\r\n  FixedSizeIcon,\r\n  FixedWidthIcon,\r\n  FullHeightIcon,\r\n  HighIcon,\r\n  LargeIcon,\r\n  RelativeHeightIcon,\r\n  RoundIcon,\r\n  SquareIcon,\r\n  WideIcon,\r\n} from \"assets/icons\";\r\nimport { BlmSubscriptInput, SubscriptInputChangeEvent } from \"shared\";\r\nimport \"./styles.scss\";\r\n\r\nexport type MediaFormatChangeEvent = CustomChangeEvent<MediaFormat>;\r\n\r\nexport interface CompProps {\r\n  data: MediaFormat;\r\n  formats?: MediaFormats[];\r\n  onChange: (event: MediaFormatChangeEvent) => void;\r\n  isButtonFormater?: boolean;\r\n}\r\n\r\nfunction getLabelAndIcon(format: MediaFormats, t: any) {\r\n  switch (format) {\r\n    case MediaFormats.Square:\r\n      return [`${t(\"format_opt.square\")}`, <SquareIcon />];\r\n    case MediaFormats.Round:\r\n      return [`${t(\"format_opt.round\")}`, <RoundIcon />];\r\n    case MediaFormats.Large:\r\n      return [`${t(\"format_opt.large\")}`, <LargeIcon />];\r\n    case MediaFormats.Wide:\r\n      return [`${t(\"format_opt.wide\")}`, <WideIcon />];\r\n    case MediaFormats.ExtraWide:\r\n      return [`${t(\"format_opt.extra_wide\")}`, <ExtraWideIcon />];\r\n    case MediaFormats.FixedHeight:\r\n      return [`${t(\"format_opt.fixed_height\")}`, <FixedHeightIcon />];\r\n    case MediaFormats.RelativeHeight:\r\n      return [`${t(\"format_opt.homothety\")}`, <RelativeHeightIcon />];\r\n    case MediaFormats.FixedWidth:\r\n      return [`${t(\"format_opt.fixed_width\")}`, <FixedWidthIcon />];\r\n    case MediaFormats.FixedSize:\r\n      return [`${t(\"format_opt.fixed_size\")}`, <FixedSizeIcon />];\r\n    case MediaFormats.High:\r\n      return [`${t(\"format_opt.high\")}`, <HighIcon />];\r\n    case MediaFormats.ExtraHigh:\r\n      return [`${t(\"format_opt.extra_high\")}`, <ExtraHighIcon />];\r\n    case MediaFormats.FullHeight:\r\n      return [`${t(\"format_opt.full_height\")}`, <FullHeightIcon />];\r\n    case MediaFormats.Auto:\r\n      return [`${t(\"format_opt.auto\")}`, <AutoIcon />];\r\n  }\r\n}\r\n\r\nfunction BlmMediaFormat(props: CompProps) {\r\n  const { data, formats = [], onChange, isButtonFormater } = props;\r\n  const { value, width, height, defaultWidth, defaultHeight } = data;\r\n  const currentValue = value || (formats.length && formats[0]) || MediaFormats.Square;\r\n  const showWidth =\r\n    currentValue === MediaFormats.FixedWidth || currentValue === MediaFormats.FixedSize;\r\n  const showHeight =\r\n    currentValue === MediaFormats.FixedHeight ||\r\n    currentValue === MediaFormats.RelativeHeight ||\r\n    currentValue === MediaFormats.FixedSize;\r\n  const { t } = useTranslation(\"shared\");\r\n\r\n  const items = useMemo(() => {\r\n    const arr: ReactElement[] = [];\r\n    const dividers = [\r\n      MediaFormats.Round,\r\n      MediaFormats.ExtraWide,\r\n      MediaFormats.FixedSize,\r\n      MediaFormats.FullHeight,\r\n    ];\r\n    let isDivider = false;\r\n\r\n    if (formats) {\r\n      Object.values(MediaFormats).forEach((item) => {\r\n        if (formats.includes(item)) {\r\n          if (isDivider) {\r\n            arr.push(<Divider key={item + \"divider\"} />);\r\n            isDivider = false;\r\n          }\r\n\r\n          const [label, icon] = getLabelAndIcon(item, t);\r\n\r\n          arr.push(\r\n            <MenuItem key={item} value={item}>\r\n              <ListItemText>{label}</ListItemText>\r\n              <ListItemIcon>{icon}</ListItemIcon>\r\n            </MenuItem>\r\n          );\r\n        }\r\n\r\n        if (dividers.includes(item) && arr.length > 0) {\r\n          isDivider = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    return arr;\r\n  }, [formats, t]);\r\n\r\n  const updateChange = (value: MediaFormat) => {\r\n    if (onChange) {\r\n      onChange({ target: { name: \"format\", value } });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: ChangeEvent<{ name?: string; value: unknown }> | SubscriptInputChangeEvent\r\n  ) => {\r\n    const { name, value } = event.target;\r\n    const newData = { ...data };\r\n\r\n    if (name === \"format\") {\r\n      newData.value = value as MediaFormats;\r\n    } else if (name === \"width\") {\r\n      newData.width = value as number;\r\n    } else if (name === \"height\") {\r\n      newData.height = value as number;\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`media-format-wrapper ${\r\n        isButtonFormater\r\n          ? data && data.value === MediaFormats.FixedWidth\r\n            ? \"button-media-width-format\"\r\n            : \"button-media-format-wrapper\"\r\n          : \"\"\r\n      }`}\r\n    >\r\n      {showWidth && (\r\n        <Fragment>\r\n          <span>{t(\"title.width\")}</span>\r\n          <BlmSubscriptInput\r\n            name=\"width\"\r\n            min={10}\r\n            max={1000}\r\n            value={width || defaultWidth}\r\n            label=\"px\"\r\n            onChange={handleChange}\r\n          />\r\n        </Fragment>\r\n      )}\r\n      {showHeight && (\r\n        <Fragment>\r\n          <span>{t(\"title.height\")}</span>\r\n          <BlmSubscriptInput\r\n            name=\"height\"\r\n            min={10}\r\n            max={1000}\r\n            value={height || defaultHeight}\r\n            label=\"px\"\r\n            onChange={handleChange}\r\n          />\r\n        </Fragment>\r\n      )}\r\n      <span>{t(\"format_opt.format\")}</span>\r\n      <Select\r\n        name=\"format\"\r\n        value={currentValue}\r\n        MenuProps={{\r\n          className: \"media-format-dropdown-menu\",\r\n          disableRestoreFocus: true, //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\r\n        }}\r\n        className=\"media-format-dropdown\"\r\n        onChange={handleChange}\r\n      >\r\n        {items}\r\n      </Select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmMediaFormat;\r\n"]},"metadata":{},"sourceType":"module"}