{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List;\nvar DELIMITER = '.';\n/**\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\n * instances to identify sections of a ContentBlock that should be rendered\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\n * be intended to stand out visually, be rendered as anchors, etc.\n *\n * The list of decorators supplied to the constructor will be used in the\n * order they are provided. This allows the caller to specify a priority for\n * string matching, in case of match collisions among decorators.\n *\n * For instance, I may have a link with a `#` in its text. Though this section\n * of text may match our hashtag decorator, it should not be treated as a\n * hashtag. I should therefore list my link DraftDecorator\n * before my hashtag DraftDecorator when constructing this composite\n * decorator instance.\n *\n * Thus, when a collision like this is encountered, the earlier match is\n * preserved and the new match is discarded.\n */\n\nvar CompositeDraftDecorator = /*#__PURE__*/function () {\n  function CompositeDraftDecorator(decorators) {\n    _defineProperty(this, \"_decorators\", void 0); // Copy the decorator array, since we use this array order to determine\n    // precedence of decoration matching. If the array is mutated externally,\n    // we don't want to be affected here.\n\n\n    this._decorators = decorators.slice();\n  }\n  /**\n   * Returns true if this CompositeDraftDecorator has the same decorators as\n   * the given array. This does a reference check, so the decorators themselves\n   * have to be the same objects.\n   */\n\n\n  var _proto = CompositeDraftDecorator.prototype;\n\n  _proto.isCompositionOfDecorators = function isCompositionOfDecorators(arr) {\n    if (this._decorators.length !== arr.length) {\n      return false;\n    }\n\n    for (var ii = 0; ii < arr.length; ii++) {\n      if (this._decorators[ii] !== arr[ii]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _proto.getDecorators = function getDecorators() {\n    return this._decorators;\n  };\n\n  _proto.getDecorations = function getDecorations(block, contentState) {\n    var decorations = Array(block.getText().length).fill(null);\n\n    this._decorators.forEach(function (decorator, ii) {\n      var counter = 0;\n      var strategy = decorator.strategy;\n\n      function getDecorationsChecker(start, end) {\n        // Find out if any of our matching range is already occupied\n        // by another decorator. If so, discard the match. Otherwise, store\n        // the component key for rendering.\n        if (canOccupySlice(decorations, start, end)) {\n          occupySlice(decorations, start, end, ii + DELIMITER + counter);\n          counter++;\n        }\n      }\n\n      strategy(block, getDecorationsChecker, contentState);\n    });\n\n    return List(decorations);\n  };\n\n  _proto.getComponentForKey = function getComponentForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].component;\n  };\n\n  _proto.getPropsForKey = function getPropsForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].props;\n  };\n\n  return CompositeDraftDecorator;\n}();\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */\n\n\nfunction canOccupySlice(decorations, start, end) {\n  for (var ii = start; ii < end; ii++) {\n    if (decorations[ii] != null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */\n\n\nfunction occupySlice(targetArr, start, end, componentKey) {\n  for (var ii = start; ii < end; ii++) {\n    targetArr[ii] = componentKey;\n  }\n}\n\nmodule.exports = CompositeDraftDecorator;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/node_modules/draft-js/lib/CompositeDraftDecorator.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Immutable","require","List","DELIMITER","CompositeDraftDecorator","decorators","_decorators","slice","_proto","prototype","isCompositionOfDecorators","arr","length","ii","getDecorators","getDecorations","block","contentState","decorations","Array","getText","fill","forEach","decorator","counter","strategy","getDecorationsChecker","start","end","canOccupySlice","occupySlice","getComponentForKey","componentKey","parseInt","split","component","getPropsForKey","props","targetArr","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List;\nvar DELIMITER = '.';\n/**\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\n * instances to identify sections of a ContentBlock that should be rendered\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\n * be intended to stand out visually, be rendered as anchors, etc.\n *\n * The list of decorators supplied to the constructor will be used in the\n * order they are provided. This allows the caller to specify a priority for\n * string matching, in case of match collisions among decorators.\n *\n * For instance, I may have a link with a `#` in its text. Though this section\n * of text may match our hashtag decorator, it should not be treated as a\n * hashtag. I should therefore list my link DraftDecorator\n * before my hashtag DraftDecorator when constructing this composite\n * decorator instance.\n *\n * Thus, when a collision like this is encountered, the earlier match is\n * preserved and the new match is discarded.\n */\n\nvar CompositeDraftDecorator = /*#__PURE__*/function () {\n  function CompositeDraftDecorator(decorators) {\n    _defineProperty(this, \"_decorators\", void 0);\n\n    // Copy the decorator array, since we use this array order to determine\n    // precedence of decoration matching. If the array is mutated externally,\n    // we don't want to be affected here.\n    this._decorators = decorators.slice();\n  }\n  /**\n   * Returns true if this CompositeDraftDecorator has the same decorators as\n   * the given array. This does a reference check, so the decorators themselves\n   * have to be the same objects.\n   */\n\n\n  var _proto = CompositeDraftDecorator.prototype;\n\n  _proto.isCompositionOfDecorators = function isCompositionOfDecorators(arr) {\n    if (this._decorators.length !== arr.length) {\n      return false;\n    }\n\n    for (var ii = 0; ii < arr.length; ii++) {\n      if (this._decorators[ii] !== arr[ii]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _proto.getDecorators = function getDecorators() {\n    return this._decorators;\n  };\n\n  _proto.getDecorations = function getDecorations(block, contentState) {\n    var decorations = Array(block.getText().length).fill(null);\n\n    this._decorators.forEach(function (decorator, ii) {\n      var counter = 0;\n      var strategy = decorator.strategy;\n\n      function getDecorationsChecker(start, end) {\n        // Find out if any of our matching range is already occupied\n        // by another decorator. If so, discard the match. Otherwise, store\n        // the component key for rendering.\n        if (canOccupySlice(decorations, start, end)) {\n          occupySlice(decorations, start, end, ii + DELIMITER + counter);\n          counter++;\n        }\n      }\n\n      strategy(block, getDecorationsChecker, contentState);\n    });\n\n    return List(decorations);\n  };\n\n  _proto.getComponentForKey = function getComponentForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].component;\n  };\n\n  _proto.getPropsForKey = function getPropsForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].props;\n  };\n\n  return CompositeDraftDecorator;\n}();\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */\n\n\nfunction canOccupySlice(decorations, start, end) {\n  for (var ii = start; ii < end; ii++) {\n    if (decorations[ii] != null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */\n\n\nfunction occupySlice(targetArr, start, end, componentKey) {\n  for (var ii = start; ii < end; ii++) {\n    targetArr[ii] = componentKey;\n  }\n}\n\nmodule.exports = CompositeDraftDecorator;"]},"metadata":{},"sourceType":"script"}