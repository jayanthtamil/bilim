{"ast":null,"code":"import { EventDispatcher, Matrix4, Raycaster, Sphere, Vector2, Vector3 } from \"three\";\n\nconst _sphere = new Sphere();\n\nconst _raycaster = new Raycaster();\n\nconst _pointer = new Vector2();\n\nconst _offset = new Vector3();\n\nconst _intersection = new Vector3();\n\nconst _worldPosition = new Vector3();\n\nconst _inverseMatrix = new Matrix4();\n\nclass DragControls extends EventDispatcher {\n  constructor(_viewer, _container) {\n    super();\n    let _selected = null;\n    let _objects = [];\n    const scope = this;\n\n    function add(object) {\n      if (object) {\n        object.element.addEventListener(\"pointerdown\", onPointerDown);\n\n        _objects.push(object);\n      }\n    }\n\n    function remove(object) {\n      const ind = _objects.indexOf(object);\n\n      if (ind !== -1) {\n        object.element.removeEventListener(\"pointerdown\", onPointerDown);\n\n        _objects.splice(ind, 1);\n      }\n    }\n\n    function activate() {\n      _container.addEventListener(\"pointermove\", onPointerMove);\n\n      _container.addEventListener(\"pointerup\", onPointerCancel);\n\n      _container.addEventListener(\"pointerleave\", onPointerCancel);\n    }\n\n    function deactivate() {\n      _container.removeEventListener(\"pointermove\", onPointerMove);\n\n      _container.removeEventListener(\"pointerup\", onPointerCancel);\n\n      _container.removeEventListener(\"pointerleave\", onPointerCancel);\n    }\n\n    function dispose() {\n      _objects.forEach(obj => remove(obj));\n\n      _objects = [];\n    }\n\n    function getRaycaster() {\n      return _raycaster;\n    }\n\n    function onPointerDown(event) {\n      const object = _objects.find(obj => obj.element === event.target);\n\n      if (scope.enabled === false || !object) return;\n      event.preventDefault();\n      updatePointer(event);\n\n      _raycaster.setFromCamera(_pointer, _viewer.camera);\n\n      _selected = object;\n\n      if (_sphere.isEmpty()) {\n        _viewer.panorama.geometry.computeBoundingSphere();\n\n        _sphere.copy(_viewer.panorama.geometry.boundingSphere);\n      }\n\n      if (_raycaster.ray.intersectSphere(_sphere, _intersection)) {\n        _inverseMatrix.copy(_selected.parent.matrixWorld).invert();\n\n        _offset.copy(_intersection).sub(_worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n      }\n\n      scope.dispatchEvent({\n        type: \"dragstart\",\n        object: _selected\n      });\n      activate();\n    }\n\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n      updatePointer(event);\n\n      _raycaster.setFromCamera(_pointer, _viewer.camera);\n\n      if (_selected) {\n        if (_raycaster.ray.intersectSphere(_sphere, _intersection)) {\n          _selected.position.copy(_intersection.sub(_offset).applyMatrix4(_inverseMatrix));\n        }\n\n        scope.dispatchEvent({\n          type: \"drag\",\n          object: _selected\n        });\n      }\n    }\n\n    function onPointerCancel() {\n      if (scope.enabled === false) return;\n\n      if (_selected) {\n        scope.dispatchEvent({\n          type: \"dragend\",\n          object: _selected\n        });\n        _selected = null;\n      }\n\n      deactivate();\n    }\n\n    function updatePointer(event) {\n      const rect = _container.getBoundingClientRect();\n\n      _pointer.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      _pointer.y = -(event.clientY - rect.top) / rect.height * 2 + 1;\n    } // API\n\n\n    this.enabled = true;\n    this.add = add;\n    this.remove = remove;\n    this.dispose = dispose;\n    this.getRaycaster = getRaycaster;\n  }\n\n}\n\nexport { DragControls };","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/media/hotspot/picker/360/drag-controls.ts"],"names":["EventDispatcher","Matrix4","Raycaster","Sphere","Vector2","Vector3","_sphere","_raycaster","_pointer","_offset","_intersection","_worldPosition","_inverseMatrix","DragControls","constructor","_viewer","_container","_selected","_objects","scope","add","object","element","addEventListener","onPointerDown","push","remove","ind","indexOf","removeEventListener","splice","activate","onPointerMove","onPointerCancel","deactivate","dispose","forEach","obj","getRaycaster","event","find","target","enabled","preventDefault","updatePointer","setFromCamera","camera","isEmpty","panorama","geometry","computeBoundingSphere","copy","boundingSphere","ray","intersectSphere","parent","matrixWorld","invert","sub","setFromMatrixPosition","dispatchEvent","type","position","applyMatrix4","rect","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height"],"mappings":"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","sourcesContent":["import { EventDispatcher, Matrix4, Raycaster, Sphere, Vector2, Vector3 } from \"three\";\r\n\r\nconst _sphere = new Sphere();\r\nconst _raycaster = new Raycaster();\r\nconst _pointer = new Vector2();\r\nconst _offset = new Vector3();\r\nconst _intersection = new Vector3();\r\nconst _worldPosition = new Vector3();\r\nconst _inverseMatrix = new Matrix4();\r\n\r\nclass DragControls extends EventDispatcher {\r\n  constructor(_viewer: any, _container: HTMLElement) {\r\n    super();\r\n\r\n    let _selected: any = null;\r\n    let _objects: any[] = [];\r\n\r\n    const scope = this;\r\n\r\n    function add(object: any) {\r\n      if (object) {\r\n        object.element.addEventListener(\"pointerdown\", onPointerDown);\r\n        _objects.push(object);\r\n      }\r\n    }\r\n\r\n    function remove(object: any) {\r\n      const ind = _objects.indexOf(object);\r\n\r\n      if (ind !== -1) {\r\n        object.element.removeEventListener(\"pointerdown\", onPointerDown);\r\n        _objects.splice(ind, 1);\r\n      }\r\n    }\r\n\r\n    function activate() {\r\n      _container.addEventListener(\"pointermove\", onPointerMove);\r\n      _container.addEventListener(\"pointerup\", onPointerCancel);\r\n      _container.addEventListener(\"pointerleave\", onPointerCancel);\r\n    }\r\n\r\n    function deactivate() {\r\n      _container.removeEventListener(\"pointermove\", onPointerMove);\r\n      _container.removeEventListener(\"pointerup\", onPointerCancel);\r\n      _container.removeEventListener(\"pointerleave\", onPointerCancel);\r\n    }\r\n\r\n    function dispose() {\r\n      _objects.forEach((obj) => remove(obj));\r\n      _objects = [];\r\n    }\r\n\r\n    function getRaycaster() {\r\n      return _raycaster;\r\n    }\r\n\r\n    function onPointerDown(event: any) {\r\n      const object = _objects.find((obj) => obj.element === event.target);\r\n\r\n      if (scope.enabled === false || !object) return;\r\n\r\n      event.preventDefault();\r\n      updatePointer(event);\r\n\r\n      _raycaster.setFromCamera(_pointer, _viewer.camera);\r\n\r\n      _selected = object;\r\n\r\n      if (_sphere.isEmpty()) {\r\n        _viewer.panorama.geometry.computeBoundingSphere();\r\n        _sphere.copy(_viewer.panorama.geometry.boundingSphere);\r\n      }\r\n\r\n      if (_raycaster.ray.intersectSphere(_sphere, _intersection)) {\r\n        _inverseMatrix.copy(_selected.parent.matrixWorld).invert();\r\n        _offset\r\n          .copy(_intersection)\r\n          .sub(_worldPosition.setFromMatrixPosition(_selected.matrixWorld));\r\n      }\r\n\r\n      scope.dispatchEvent({ type: \"dragstart\", object: _selected });\r\n      activate();\r\n    }\r\n\r\n    function onPointerMove(event: any) {\r\n      if (scope.enabled === false) return;\r\n\r\n      updatePointer(event);\r\n\r\n      _raycaster.setFromCamera(_pointer, _viewer.camera);\r\n\r\n      if (_selected) {\r\n        if (_raycaster.ray.intersectSphere(_sphere, _intersection)) {\r\n          _selected.position.copy(_intersection.sub(_offset).applyMatrix4(_inverseMatrix));\r\n        }\r\n\r\n        scope.dispatchEvent({ type: \"drag\", object: _selected });\r\n      }\r\n    }\r\n\r\n    function onPointerCancel() {\r\n      if (scope.enabled === false) return;\r\n\r\n      if (_selected) {\r\n        scope.dispatchEvent({ type: \"dragend\", object: _selected });\r\n\r\n        _selected = null;\r\n      }\r\n\r\n      deactivate();\r\n    }\r\n\r\n    function updatePointer(event: any) {\r\n      const rect = _container.getBoundingClientRect();\r\n\r\n      _pointer.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n      _pointer.y = (-(event.clientY - rect.top) / rect.height) * 2 + 1;\r\n    }\r\n\r\n    // API\r\n    this.enabled = true;\r\n\r\n    this.add = add;\r\n    this.remove = remove;\r\n    this.dispose = dispose;\r\n    this.getRaycaster = getRaycaster;\r\n  }\r\n}\r\n\r\nexport { DragControls };\r\n"]},"metadata":{},"sourceType":"module"}