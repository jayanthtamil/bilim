{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\template-editors\\\\controls\\\\actions\\\\simple-content\\\\BlmSimpleContentAction.tsx\";\nimport React, { Fragment, useMemo } from \"react\";\nimport { Checkbox, FormControlLabel, Radio, RadioGroup, Select, MenuItem, Divider, ListItemIcon } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { ElementType, SCActionDisplayTypes } from \"editor-constants\";\nimport { getSimpleContentLabel, SIMPLE_CONTENT_FLAP_ITEMS, SIMPLE_CONTENT_POPUP_ITEMS } from \"utils\";\nimport BlmStructureSelect from \"components/structures/select\";\nimport \"./styles.scss\";\n\nfunction getDefaultValue(option, display) {\n  if (display) {\n    if (option === \"popup\" && SIMPLE_CONTENT_POPUP_ITEMS.includes(display)) {\n      return display;\n    } else if (option === \"flap\" && SIMPLE_CONTENT_FLAP_ITEMS.includes(display)) {\n      return display;\n    }\n  }\n\n  switch (option) {\n    case \"popup\":\n      return SCActionDisplayTypes.Large;\n\n    case \"flap\":\n      return SCActionDisplayTypes.LeftMedium;\n  }\n}\n\nfunction BlmSimpleContentAction(props) {\n  const {\n    name,\n    element,\n    data,\n    onChange\n  } = props;\n  const {\n    checked = false,\n    simpleContentId,\n    option = \"popup\",\n    display\n  } = data || {};\n  const curDisplay = useMemo(() => getDefaultValue(option, display), [option, display]);\n  const {\n    t\n  } = useTranslation(\"template-editors\");\n\n  const updateChange = newData => {\n    if (onChange) {\n      onChange({\n        target: {\n          name,\n          value: newData\n        }\n      });\n    }\n  };\n\n  const handleChange = event => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const newData = { ...data,\n      checked,\n      option,\n      display: name !== \"option\" ? curDisplay : getDefaultValue(option, display)\n    };\n\n    if (name === \"checked\" || name === \"simpleContentId\" || name === \"option\" || name === \"display\") {\n      newData[name] = value;\n    }\n\n    updateChange(newData);\n  };\n\n  const renderDropDown = () => {\n    if (option === \"popup\" || option === \"flap\") {\n      const arr = option === \"popup\" ? SIMPLE_CONTENT_POPUP_ITEMS : SIMPLE_CONTENT_FLAP_ITEMS;\n      return /*#__PURE__*/React.createElement(Select, {\n        name: \"display\",\n        value: curDisplay,\n        MenuProps: {\n          className: \"template-sc-action-dropdown-popover\"\n        },\n        className: \"template-sc-action-dropdown\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }\n      }, arr.map((item, ind) => {\n        if (item === \"divider\") {\n          return /*#__PURE__*/React.createElement(Divider, {\n            key: \"divider\" + ind,\n            className: \"template-sc-action-dropdown-divider\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(MenuItem, {\n            key: item,\n            value: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }\n          }, getSimpleContentLabel(item), /*#__PURE__*/React.createElement(ListItemIcon, {\n            className: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }\n          }));\n        }\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-sc-action-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"checked\",\n    label: t(\"simple_content_Action.open_simple_content\"),\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 18\n      }\n    }),\n    checked: checked,\n    className: \"template-sc-frm-lbl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), checked && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BlmStructureSelect, {\n    name: \"simpleContentId\",\n    element: element,\n    structures: {\n      show: false\n    },\n    annexes: {\n      show: true\n    },\n    selectables: [ElementType.SimplePage, ElementType.SimpleContent, ElementType.Page, ElementType.Screen],\n    value: simpleContentId,\n    className: \"structure-select-with-icons\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }), simpleContentId && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    name: \"option\",\n    value: option,\n    className: \"template-sc-option-group\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    label: t(\"simple_content_Action.popup\"),\n    control: /*#__PURE__*/React.createElement(Radio, {\n      className: \"radio-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 28\n      }\n    }),\n    value: \"popup\",\n    className: \"template-sc-frm-ctrl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    label: t(\"simple_content_Action.flap\"),\n    control: /*#__PURE__*/React.createElement(Radio, {\n      className: \"radio-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 28\n      }\n    }),\n    value: \"flap\",\n    className: \"template-sc-frm-ctrl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  })), renderDropDown())));\n}\n\nexport default BlmSimpleContentAction;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/template-editors/controls/actions/simple-content/BlmSimpleContentAction.tsx"],"names":["React","Fragment","useMemo","Checkbox","FormControlLabel","Radio","RadioGroup","Select","MenuItem","Divider","ListItemIcon","useTranslation","ElementType","SCActionDisplayTypes","getSimpleContentLabel","SIMPLE_CONTENT_FLAP_ITEMS","SIMPLE_CONTENT_POPUP_ITEMS","BlmStructureSelect","getDefaultValue","option","display","includes","Large","LeftMedium","BlmSimpleContentAction","props","name","element","data","onChange","checked","simpleContentId","curDisplay","t","updateChange","newData","target","value","handleChange","event","type","renderDropDown","arr","className","map","item","ind","show","SimplePage","SimpleContent","Page","Screen"],"mappings":";AAAA,OAAOA,KAAP,IAA6BC,QAA7B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SACEC,QADF,EAEEC,gBAFF,EAGEC,KAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,QANF,EAOEC,OAPF,EAQEC,YARF,QASO,mBATP;AAUA,SAASC,cAAT,QAA+B,eAA/B;AAGA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,kBAAlD;AACA,SACEC,qBADF,EAEEC,yBAFF,EAGEC,0BAHF,QAIO,OAJP;AAKA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAO,eAAP;;AASA,SAASC,eAAT,CAAyBC,MAAzB,EAA0CC,OAA1C,EAA4D;AAC1D,MAAIA,OAAJ,EAAa;AACX,QAAID,MAAM,KAAK,OAAX,IAAsBH,0BAA0B,CAACK,QAA3B,CAAoCD,OAApC,CAA1B,EAAwE;AACtE,aAAOA,OAAP;AACD,KAFD,MAEO,IAAID,MAAM,KAAK,MAAX,IAAqBJ,yBAAyB,CAACM,QAA1B,CAAmCD,OAAnC,CAAzB,EAAsE;AAC3E,aAAOA,OAAP;AACD;AACF;;AAED,UAAQD,MAAR;AACE,SAAK,OAAL;AACE,aAAON,oBAAoB,CAACS,KAA5B;;AACF,SAAK,MAAL;AACE,aAAOT,oBAAoB,CAACU,UAA5B;AAJJ;AAMD;;AAED,SAASC,sBAAT,CAAgCC,KAAhC,EAAkD;AAChD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,MAAoCJ,KAA1C;AACA,QAAM;AAAEK,IAAAA,OAAO,GAAG,KAAZ;AAAmBC,IAAAA,eAAnB;AAAoCZ,IAAAA,MAAM,GAAG,OAA7C;AAAsDC,IAAAA;AAAtD,MAAkEQ,IAAI,IAAI,EAAhF;AACA,QAAMI,UAAU,GAAG9B,OAAO,CAAC,MAAMgB,eAAe,CAACC,MAAD,EAASC,OAAT,CAAtB,EAAyC,CAACD,MAAD,EAASC,OAAT,CAAzC,CAA1B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAQtB,cAAc,CAAC,kBAAD,CAA5B;;AAEA,QAAMuB,YAAY,GAAIC,OAAD,IAA0C;AAC7D,QAAIN,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,MAAM,EAAE;AAAEV,UAAAA,IAAF;AAAQW,UAAAA,KAAK,EAAEF;AAAf;AAAV,OAAD,CAAR;AACD;AACF,GAJD;;AAMA,QAAMG,YAAY,GAAIC,KAAD,IAAyD;AAC5E,UAAMH,MAAM,GAAGG,KAAK,CAACH,MAArB;AACA,UAAMV,IAAI,GAAGU,MAAM,CAACV,IAApB;AACA,UAAMW,KAAK,GAAGD,MAAM,CAACI,IAAP,KAAgB,UAAhB,GAA6BJ,MAAM,CAACN,OAApC,GAA8CM,MAAM,CAACC,KAAnE;AACA,UAAMF,OAAoC,GAAG,EAC3C,GAAGP,IADwC;AAE3CE,MAAAA,OAF2C;AAG3CX,MAAAA,MAH2C;AAI3CC,MAAAA,OAAO,EAAEM,IAAI,KAAK,QAAT,GAAoBM,UAApB,GAAiCd,eAAe,CAACC,MAAD,EAASC,OAAT;AAJd,KAA7C;;AAOA,QACEM,IAAI,KAAK,SAAT,IACAA,IAAI,KAAK,iBADT,IAEAA,IAAI,KAAK,QAFT,IAGAA,IAAI,KAAK,SAJX,EAKE;AACCS,MAAAA,OAAO,CAACT,IAAD,CAAR,GAAyBW,KAAzB;AACD;;AAEDH,IAAAA,YAAY,CAACC,OAAD,CAAZ;AACD,GArBD;;AAuBA,QAAMM,cAAc,GAAG,MAAM;AAC3B,QAAItB,MAAM,KAAK,OAAX,IAAsBA,MAAM,KAAK,MAArC,EAA6C;AAC3C,YAAMuB,GAAG,GAAGvB,MAAM,KAAK,OAAX,GAAqBH,0BAArB,GAAkDD,yBAA9D;AAEA,0BACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,KAAK,EAAEiB,UAFT;AAGE,QAAA,SAAS,EAAE;AAAEW,UAAAA,SAAS,EAAE;AAAb,SAHb;AAIE,QAAA,SAAS,EAAC,6BAJZ;AAKE,QAAA,QAAQ,EAAEL,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGI,GAAG,CAACE,GAAJ,CAAQ,CAACC,IAAD,EAAOC,GAAP,KAAe;AACtB,YAAID,IAAI,KAAK,SAAb,EAAwB;AACtB,8BACE,oBAAC,OAAD;AAAS,YAAA,GAAG,EAAE,YAAYC,GAA1B;AAA+B,YAAA,SAAS,EAAC,qCAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,SAJD,MAIO;AACL,8BACE,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAED,IAAf;AAAqB,YAAA,KAAK,EAAEA,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG/B,qBAAqB,CAAC+B,IAAD,CADxB,eAEE,oBAAC,YAAD;AAAc,YAAA,SAAS,EAAEA,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADF;AAMD;AACF,OAbA,CAPH,CADF;AAwBD;AACF,GA7BD;;AA+BA,sBACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,KAAK,EAAEZ,CAAC,CAAC,2CAAD,CAFV;AAGE,IAAA,OAAO,eAAE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHX;AAIE,IAAA,OAAO,EAAEH,OAJX;AAKE,IAAA,SAAS,EAAC,qBALZ;AAME,IAAA,QAAQ,EAAEQ,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASGR,OAAO,iBACN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,kBAAD;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,OAAO,EAAEH,OAFX;AAGE,IAAA,UAAU,EAAE;AAAEoB,MAAAA,IAAI,EAAE;AAAR,KAHd;AAIE,IAAA,OAAO,EAAE;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAJX;AAKE,IAAA,WAAW,EAAE,CACXnC,WAAW,CAACoC,UADD,EAEXpC,WAAW,CAACqC,aAFD,EAGXrC,WAAW,CAACsC,IAHD,EAIXtC,WAAW,CAACuC,MAJD,CALf;AAWE,IAAA,KAAK,EAAEpB,eAXT;AAYE,IAAA,SAAS,EAAC,6BAZZ;AAaE,IAAA,QAAQ,EAAEO,YAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAgBGP,eAAe,iBACd,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAEZ,MAFT;AAGE,IAAA,SAAS,EAAC,0BAHZ;AAIE,IAAA,QAAQ,EAAEmB,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEL,CAAC,CAAC,6BAAD,CADV;AAEE,IAAA,OAAO,eAAE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFX;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,SAAS,EAAC,sBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAYE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEA,CAAC,CAAC,4BAAD,CADV;AAEE,IAAA,OAAO,eAAE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFX;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,SAAS,EAAC,sBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF,EAoBGQ,cAAc,EApBjB,CAjBJ,CAVJ,CADF;AAuDD;;AAED,eAAejB,sBAAf","sourcesContent":["import React, { ChangeEvent, Fragment, useMemo } from \"react\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Select,\r\n  MenuItem,\r\n  Divider,\r\n  ListItemIcon,\r\n} from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CourseElement, CustomChangeEvent, TemplateSimpleContentAction } from \"types\";\r\nimport { ElementType, SCActionDisplayTypes } from \"editor-constants\";\r\nimport {\r\n  getSimpleContentLabel,\r\n  SIMPLE_CONTENT_FLAP_ITEMS,\r\n  SIMPLE_CONTENT_POPUP_ITEMS,\r\n} from \"utils\";\r\nimport BlmStructureSelect from \"components/structures/select\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  name: string;\r\n  element: CourseElement;\r\n  data?: TemplateSimpleContentAction;\r\n  onChange?: (event: CustomChangeEvent<TemplateSimpleContentAction>) => void;\r\n}\r\n\r\nfunction getDefaultValue(option?: string, display?: string) {\r\n  if (display) {\r\n    if (option === \"popup\" && SIMPLE_CONTENT_POPUP_ITEMS.includes(display)) {\r\n      return display;\r\n    } else if (option === \"flap\" && SIMPLE_CONTENT_FLAP_ITEMS.includes(display)) {\r\n      return display;\r\n    }\r\n  }\r\n\r\n  switch (option) {\r\n    case \"popup\":\r\n      return SCActionDisplayTypes.Large;\r\n    case \"flap\":\r\n      return SCActionDisplayTypes.LeftMedium;\r\n  }\r\n}\r\n\r\nfunction BlmSimpleContentAction(props: CompProps) {\r\n  const { name, element, data, onChange } = props;\r\n  const { checked = false, simpleContentId, option = \"popup\", display } = data || {};\r\n  const curDisplay = useMemo(() => getDefaultValue(option, display), [option, display]);\r\n  const { t } = useTranslation(\"template-editors\");\r\n\r\n  const updateChange = (newData: TemplateSimpleContentAction) => {\r\n    if (onChange) {\r\n      onChange({ target: { name, value: newData } });\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<any> | CustomChangeEvent<string>) => {\r\n    const target = event.target;\r\n    const name = target.name as string;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const newData: TemplateSimpleContentAction = {\r\n      ...data,\r\n      checked,\r\n      option,\r\n      display: name !== \"option\" ? curDisplay : getDefaultValue(option, display),\r\n    };\r\n\r\n    if (\r\n      name === \"checked\" ||\r\n      name === \"simpleContentId\" ||\r\n      name === \"option\" ||\r\n      name === \"display\"\r\n    ) {\r\n      (newData[name] as any) = value;\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const renderDropDown = () => {\r\n    if (option === \"popup\" || option === \"flap\") {\r\n      const arr = option === \"popup\" ? SIMPLE_CONTENT_POPUP_ITEMS : SIMPLE_CONTENT_FLAP_ITEMS;\r\n\r\n      return (\r\n        <Select\r\n          name=\"display\"\r\n          value={curDisplay}\r\n          MenuProps={{ className: \"template-sc-action-dropdown-popover\" }}\r\n          className=\"template-sc-action-dropdown\"\r\n          onChange={handleChange}\r\n        >\r\n          {arr.map((item, ind) => {\r\n            if (item === \"divider\") {\r\n              return (\r\n                <Divider key={\"divider\" + ind} className=\"template-sc-action-dropdown-divider\" />\r\n              );\r\n            } else {\r\n              return (\r\n                <MenuItem key={item} value={item}>\r\n                  {getSimpleContentLabel(item)}\r\n                  <ListItemIcon className={item} />\r\n                </MenuItem>\r\n              );\r\n            }\r\n          })}\r\n        </Select>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"template-sc-action-wrapper\">\r\n      <FormControlLabel\r\n        name=\"checked\"\r\n        label={t(\"simple_content_Action.open_simple_content\")}\r\n        control={<Checkbox />}\r\n        checked={checked}\r\n        className=\"template-sc-frm-lbl\"\r\n        onChange={handleChange}\r\n      />\r\n      {checked && (\r\n        <Fragment>\r\n          <BlmStructureSelect\r\n            name=\"simpleContentId\"\r\n            element={element}\r\n            structures={{ show: false }}\r\n            annexes={{ show: true }}\r\n            selectables={[\r\n              ElementType.SimplePage,\r\n              ElementType.SimpleContent,\r\n              ElementType.Page,\r\n              ElementType.Screen,\r\n            ]}\r\n            value={simpleContentId}\r\n            className=\"structure-select-with-icons\"\r\n            onChange={handleChange}\r\n          />\r\n          {simpleContentId && (\r\n            <Fragment>\r\n              <RadioGroup\r\n                name=\"option\"\r\n                value={option}\r\n                className=\"template-sc-option-group\"\r\n                onChange={handleChange}\r\n              >\r\n                <FormControlLabel\r\n                  label={t(\"simple_content_Action.popup\")}\r\n                  control={<Radio className=\"radio-3\" />}\r\n                  value=\"popup\"\r\n                  className=\"template-sc-frm-ctrl\"\r\n                />\r\n                <FormControlLabel\r\n                  label={t(\"simple_content_Action.flap\")}\r\n                  control={<Radio className=\"radio-3\" />}\r\n                  value=\"flap\"\r\n                  className=\"template-sc-frm-ctrl\"\r\n                />\r\n              </RadioGroup>\r\n              {renderDropDown()}\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmSimpleContentAction;\r\n"]},"metadata":{},"sourceType":"module"}