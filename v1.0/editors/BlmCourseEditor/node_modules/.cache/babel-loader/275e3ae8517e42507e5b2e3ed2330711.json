{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\media-editor\\\\core\\\\main\\\\BlmMediaEditor.tsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { createMediaCues, createUUID, createVTTFile } from \"utils\";\nimport { normalizeMarkers } from \"../../utils\";\nimport BlmBaseMediaEditor from \"../base\";\n\nfunction BlmMediaEditor(props) {\n  const {\n    open,\n    elementId,\n    data,\n    files,\n    waveformUrl,\n    waveformFile,\n    subtitleFile,\n    markerFile,\n    onSave,\n    onClose,\n    uploadFiles,\n    clearFile,\n    addFiles,\n    getFile,\n    getMediaProperties,\n    openDialog\n  } = props;\n  const [upload, setUpload] = useState();\n  const [peaks, setPeaks] = useState();\n  const [subtitles, setSubtitles] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const {\n    id,\n    waveform = waveformUrl,\n    subtitle,\n    marker\n  } = data;\n  const {\n    t\n  } = useTranslation();\n  const updateSave = useCallback((newSubtitle, newMarker) => {\n    if (onSave) {\n      onSave({ ...data,\n        waveform,\n        subtitle: newSubtitle || subtitle,\n        marker: newMarker || marker\n      });\n    }\n  }, [data, waveform, subtitle, marker, onSave]);\n  useEffect(() => {\n    if (!waveform) {\n      getMediaProperties(id);\n    }\n  }, [id, waveform, getMediaProperties]);\n  useEffect(() => {\n    if (id && waveform && !waveformFile) {\n      getFile(id, waveform);\n    }\n  }, [id, waveform, waveformFile, getFile]);\n  useEffect(() => {\n    if (subtitle && !subtitleFile) {\n      getFile(subtitle.id, subtitle.url);\n    }\n  }, [subtitle, subtitleFile, getFile]);\n  useEffect(() => {\n    if (marker && !markerFile) {\n      getFile(marker.id, marker.url);\n    }\n  }, [marker, markerFile, getFile]);\n  useEffect(() => {\n    if (typeof waveformFile === \"object\" && Array.isArray(waveformFile.data)) {\n      setPeaks(waveformFile.data);\n    }\n  }, [waveformFile]);\n  useEffect(() => {\n    if (typeof subtitleFile === \"string\") {\n      try {\n        const subtitles = createMediaCues(subtitleFile);\n        setSubtitles(subtitles);\n      } catch (er) {\n        openDialog(`${t(\"alert.error\")}`, `${t(\"alert.invalid_subtitle\")}`);\n      }\n    }\n  }, [subtitleFile, openDialog, t]);\n  useEffect(() => {\n    if (typeof markerFile === \"string\") {\n      try {\n        const markers = createMediaCues(markerFile).map(cue => ({ ...cue,\n          endTime: NaN\n        }));\n        setMarkers(markers);\n      } catch (er) {\n        openDialog(`${t(\"alert.error\")}`, `${t(\"alert.invalid_marker\")}`);\n      }\n    }\n  }, [markerFile, openDialog, t]);\n  useEffect(() => {\n    if (upload) {\n      const medias = files[upload.id];\n\n      if (medias) {\n        const [subtitle, marker] = medias;\n\n        if (subtitle && marker) {\n          updateSave(subtitle, marker);\n          clearFile(upload.id);\n          setUpload(undefined);\n\n          if (upload.isNewFile) {\n            addFiles([subtitle, marker]);\n          }\n        }\n      }\n    }\n  }, [upload, files, clearFile, addFiles, updateSave]);\n\n  const handleSave = (newSubtitles, newMarkers, duration = 0) => {\n    if (newSubtitles && newMarkers) {\n      const id = createUUID();\n      const file1 = {\n        id: subtitle === null || subtitle === void 0 ? void 0 : subtitle.id,\n        name: (subtitle === null || subtitle === void 0 ? void 0 : subtitle.name) || `${elementId}-subtitle.vtt`,\n        content: createVTTFile(newSubtitles)\n      };\n      const file2 = {\n        id: marker === null || marker === void 0 ? void 0 : marker.id,\n        name: (marker === null || marker === void 0 ? void 0 : marker.name) || `${elementId}-marker.vtt`,\n        content: createVTTFile(normalizeMarkers(newMarkers, duration))\n      };\n      setUpload({\n        id,\n        isNewFile: !Boolean(subtitle === null || subtitle === void 0 ? void 0 : subtitle.id)\n      });\n      uploadFiles(id, elementId, [file1, file2]);\n    } else {\n      updateSave();\n    }\n  };\n\n  const handleClose = event => {\n    if (onClose) {\n      onClose(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(BlmBaseMediaEditor, {\n    open: open,\n    type: \"standard\",\n    elementId: elementId,\n    peaks: peaks,\n    data: data,\n    cues1: subtitles,\n    cues2: markers,\n    onSave: handleSave,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default BlmMediaEditor;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/media-editor/core/main/BlmMediaEditor.tsx"],"names":["React","useState","useEffect","useCallback","useTranslation","createMediaCues","createUUID","createVTTFile","normalizeMarkers","BlmBaseMediaEditor","BlmMediaEditor","props","open","elementId","data","files","waveformUrl","waveformFile","subtitleFile","markerFile","onSave","onClose","uploadFiles","clearFile","addFiles","getFile","getMediaProperties","openDialog","upload","setUpload","peaks","setPeaks","subtitles","setSubtitles","markers","setMarkers","id","waveform","subtitle","marker","t","updateSave","newSubtitle","newMarker","url","Array","isArray","er","map","cue","endTime","NaN","medias","undefined","isNewFile","handleSave","newSubtitles","newMarkers","duration","file1","name","content","file2","Boolean","handleClose","event"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, MouseEvent, useCallback } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { MediaFile, MediaTrackCue } from \"types\";\r\nimport { createMediaCues, createUUID, createVTTFile } from \"utils\";\r\nimport { normalizeMarkers } from \"../../utils\";\r\nimport BlmBaseMediaEditor from \"../base\";\r\nimport { ContainerProps } from \"./container\";\r\n\r\nexport interface MediaEditorProps {\r\n  open?: boolean;\r\n  elementId: string;\r\n  data: MediaFile;\r\n  onSave?: (data: MediaFile) => void;\r\n  onClose?: (event: MouseEvent) => void;\r\n}\r\n\r\nfunction BlmMediaEditor(props: MediaEditorProps & ContainerProps) {\r\n  const {\r\n    open,\r\n    elementId,\r\n    data,\r\n    files,\r\n    waveformUrl,\r\n    waveformFile,\r\n    subtitleFile,\r\n    markerFile,\r\n    onSave,\r\n    onClose,\r\n    uploadFiles,\r\n    clearFile,\r\n    addFiles,\r\n    getFile,\r\n    getMediaProperties,\r\n    openDialog,\r\n  } = props;\r\n  const [upload, setUpload] = useState<{ id: string; isNewFile: boolean }>();\r\n  const [peaks, setPeaks] = useState<number[]>();\r\n  const [subtitles, setSubtitles] = useState<MediaTrackCue[]>([]);\r\n  const [markers, setMarkers] = useState<MediaTrackCue[]>([]);\r\n  const { id, waveform = waveformUrl, subtitle, marker } = data;\r\n  const { t } = useTranslation();\r\n\r\n  const updateSave = useCallback(\r\n    (newSubtitle?: MediaFile, newMarker?: MediaFile) => {\r\n      if (onSave) {\r\n        onSave({\r\n          ...data,\r\n          waveform,\r\n          subtitle: newSubtitle || subtitle,\r\n          marker: newMarker || marker,\r\n        });\r\n      }\r\n    },\r\n    [data, waveform, subtitle, marker, onSave]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!waveform) {\r\n      getMediaProperties(id);\r\n    }\r\n  }, [id, waveform, getMediaProperties]);\r\n\r\n  useEffect(() => {\r\n    if (id && waveform && !waveformFile) {\r\n      getFile(id, waveform);\r\n    }\r\n  }, [id, waveform, waveformFile, getFile]);\r\n\r\n  useEffect(() => {\r\n    if (subtitle && !subtitleFile) {\r\n      getFile(subtitle.id, subtitle.url);\r\n    }\r\n  }, [subtitle, subtitleFile, getFile]);\r\n\r\n  useEffect(() => {\r\n    if (marker && !markerFile) {\r\n      getFile(marker.id, marker.url);\r\n    }\r\n  }, [marker, markerFile, getFile]);\r\n\r\n  useEffect(() => {\r\n    if (typeof waveformFile === \"object\" && Array.isArray(waveformFile.data)) {\r\n      setPeaks(waveformFile.data);\r\n    }\r\n  }, [waveformFile]);\r\n\r\n  useEffect(() => {\r\n    if (typeof subtitleFile === \"string\") {\r\n      try {\r\n        const subtitles = createMediaCues(subtitleFile);\r\n\r\n        setSubtitles(subtitles);\r\n      } catch (er) {\r\n        openDialog(`${t(\"alert.error\")}`, `${t(\"alert.invalid_subtitle\")}`);\r\n      }\r\n    }\r\n  }, [subtitleFile, openDialog, t]);\r\n\r\n  useEffect(() => {\r\n    if (typeof markerFile === \"string\") {\r\n      try {\r\n        const markers = createMediaCues(markerFile).map((cue) => ({\r\n          ...cue,\r\n          endTime: NaN,\r\n        }));\r\n\r\n        setMarkers(markers);\r\n      } catch (er) {\r\n        openDialog(`${t(\"alert.error\")}`, `${t(\"alert.invalid_marker\")}`);\r\n      }\r\n    }\r\n  }, [markerFile, openDialog, t]);\r\n\r\n  useEffect(() => {\r\n    if (upload) {\r\n      const medias = files[upload.id];\r\n\r\n      if (medias) {\r\n        const [subtitle, marker] = medias;\r\n\r\n        if (subtitle && marker) {\r\n          updateSave(subtitle, marker);\r\n          clearFile(upload.id);\r\n          setUpload(undefined);\r\n\r\n          if (upload.isNewFile) {\r\n            addFiles([subtitle, marker]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [upload, files, clearFile, addFiles, updateSave]);\r\n\r\n  const handleSave = (\r\n    newSubtitles?: MediaTrackCue[],\r\n    newMarkers?: MediaTrackCue[],\r\n    duration = 0\r\n  ) => {\r\n    if (newSubtitles && newMarkers) {\r\n      const id = createUUID();\r\n      const file1 = {\r\n        id: subtitle?.id,\r\n        name: subtitle?.name || `${elementId}-subtitle.vtt`,\r\n        content: createVTTFile(newSubtitles),\r\n      };\r\n      const file2 = {\r\n        id: marker?.id,\r\n        name: marker?.name || `${elementId}-marker.vtt`,\r\n        content: createVTTFile(normalizeMarkers(newMarkers, duration)),\r\n      };\r\n\r\n      setUpload({ id, isNewFile: !Boolean(subtitle?.id) });\r\n      uploadFiles(id, elementId, [file1, file2]);\r\n    } else {\r\n      updateSave();\r\n    }\r\n  };\r\n\r\n  const handleClose = (event: MouseEvent) => {\r\n    if (onClose) {\r\n      onClose(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BlmBaseMediaEditor\r\n      open={open}\r\n      type=\"standard\"\r\n      elementId={elementId}\r\n      peaks={peaks}\r\n      data={data}\r\n      cues1={subtitles}\r\n      cues2={markers}\r\n      onSave={handleSave}\r\n      onClose={handleClose}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BlmMediaEditor;\r\n"]},"metadata":{},"sourceType":"module"}