{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\animation\\\\options\\\\BlmOptionsEditor.tsx\";\nimport React, { useState } from \"react\";\nimport { Modal } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport BlmOptionItem from \"./item\";\nimport \"./styles.scss\";\n\nfunction BlmOptionsEditor(props) {\n  const {\n    open,\n    data,\n    onSave,\n    onClose\n  } = props;\n  const [state, setState] = useState({\n    options: data,\n    isEdited: false\n  });\n  const {\n    options,\n    isEdited\n  } = state;\n  const {\n    t\n  } = useTranslation(\"shared\");\n\n  const saveChanges = () => {\n    if (onSave) {\n      onSave(options);\n    }\n  };\n\n  const handleChange = (name, option) => {\n    const newData = { ...options\n    };\n    newData[name] = option;\n    setState({\n      options: newData,\n      isEdited: true\n    });\n  };\n\n  const handleSave = event => {\n    if (isEdited) {\n      saveChanges();\n    }\n\n    handleClose(event);\n  };\n\n  const handleClose = event => {\n    if (onClose) {\n      onClose(event);\n    }\n  };\n\n  const renderItems = () => {\n    return Object.keys(options).map((key, ind) => {\n      const option = options[key];\n      return /*#__PURE__*/React.createElement(BlmOptionItem, {\n        key: ind,\n        name: key,\n        data: option,\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 14\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    open: open,\n    className: \"options-editor-modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"options-editor-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"options-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, t(\"title.option\")), renderItems(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"options-save-btn\",\n    onClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, t(\"button.save\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"options-cancel-btn\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, t(\"button.cancel\"))));\n}\n\nexport default BlmOptionsEditor;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/animation/options/BlmOptionsEditor.tsx"],"names":["React","useState","Modal","useTranslation","BlmOptionItem","BlmOptionsEditor","props","open","data","onSave","onClose","state","setState","options","isEdited","t","saveChanges","handleChange","name","option","newData","handleSave","event","handleClose","renderItems","Object","keys","map","key","ind"],"mappings":";AAAA,OAAOA,KAAP,IAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAGA,OAAOC,aAAP,MAA0B,QAA1B;AACA,OAAO,eAAP;;AASA,SAASC,gBAAT,CAA0BC,KAA1B,EAA4C;AAC1C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA;AAAtB,MAAkCJ,KAAxC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC;AAAEY,IAAAA,OAAO,EAAEL,IAAX;AAAiBM,IAAAA,QAAQ,EAAE;AAA3B,GAAD,CAAlC;AACA,QAAM;AAAED,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBH,KAA9B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAQZ,cAAc,CAAC,QAAD,CAA5B;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACxB,QAAIP,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACI,OAAD,CAAN;AACD;AACF,GAJD;;AAMA,QAAMI,YAAY,GAAG,CAACC,IAAD,EAAeC,MAAf,KAA2C;AAC9D,UAAMC,OAAO,GAAG,EAAE,GAAGP;AAAL,KAAhB;AAEAO,IAAAA,OAAO,CAACF,IAAD,CAAP,GAAgBC,MAAhB;AAEAP,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,OAAO,EAAEO,OAAX;AAAoBN,MAAAA,QAAQ,EAAE;AAA9B,KAAD,CAAR;AACD,GAND;;AAQA,QAAMO,UAAU,GAAIC,KAAD,IAAuB;AACxC,QAAIR,QAAJ,EAAc;AACZE,MAAAA,WAAW;AACZ;;AAEDO,IAAAA,WAAW,CAACD,KAAD,CAAX;AACD,GAND;;AAQA,QAAMC,WAAW,GAAID,KAAD,IAAuB;AACzC,QAAIZ,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACY,KAAD,CAAP;AACD;AACF,GAJD;;AAMA,QAAME,WAAW,GAAG,MAAM;AACxB,WAAOC,MAAM,CAACC,IAAP,CAAYb,OAAZ,EAAqBc,GAArB,CAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5C,YAAMV,MAAM,GAAGN,OAAO,CAACe,GAAD,CAAtB;AAEA,0BAAO,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAEC,GAApB;AAAyB,QAAA,IAAI,EAAED,GAA/B;AAAoC,QAAA,IAAI,EAAET,MAA1C;AAAkD,QAAA,QAAQ,EAAEF,YAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAJM,CAAP;AAKD,GAND;;AAQA,sBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEV,IAAb;AAAmB,IAAA,SAAS,EAAC,sBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCQ,CAAC,CAAC,cAAD,CAAjC,CADF,EAEGS,WAAW,EAFd,eAGE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,OAAO,EAAEH,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,CAAC,CAAC,aAAD,CADJ,CAHF,eAME;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,OAAO,EAAEQ,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,CAAC,CAAC,eAAD,CADJ,CANF,CADF,CADF;AAcD;;AAED,eAAeV,gBAAf","sourcesContent":["import React, { MouseEvent, useState } from \"react\";\r\nimport { Modal } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { AnimationOption, AnimationOptions } from \"types\";\r\nimport BlmOptionItem from \"./item\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  open: boolean;\r\n  data: AnimationOptions;\r\n  onSave?: (data: AnimationOptions) => void;\r\n  onClose?: (event: MouseEvent) => void;\r\n}\r\n\r\nfunction BlmOptionsEditor(props: CompProps) {\r\n  const { open, data, onSave, onClose } = props;\r\n  const [state, setState] = useState({ options: data, isEdited: false });\r\n  const { options, isEdited } = state;\r\n  const { t } = useTranslation(\"shared\");\r\n\r\n  const saveChanges = () => {\r\n    if (onSave) {\r\n      onSave(options);\r\n    }\r\n  };\r\n\r\n  const handleChange = (name: string, option: AnimationOption) => {\r\n    const newData = { ...options };\r\n\r\n    newData[name] = option;\r\n\r\n    setState({ options: newData, isEdited: true });\r\n  };\r\n\r\n  const handleSave = (event: MouseEvent) => {\r\n    if (isEdited) {\r\n      saveChanges();\r\n    }\r\n\r\n    handleClose(event);\r\n  };\r\n\r\n  const handleClose = (event: MouseEvent) => {\r\n    if (onClose) {\r\n      onClose(event);\r\n    }\r\n  };\r\n\r\n  const renderItems = () => {\r\n    return Object.keys(options).map((key, ind) => {\r\n      const option = options[key];\r\n\r\n      return <BlmOptionItem key={ind} name={key} data={option} onChange={handleChange} />;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} className=\"options-editor-modal\">\r\n      <div className=\"options-editor-wrapper\">\r\n        <div className=\"options-title\">{t(\"title.option\")}</div>\r\n        {renderItems()}\r\n        <div className=\"options-save-btn\" onClick={handleSave}>\r\n          {t(\"button.save\")}\r\n        </div>\r\n        <div className=\"options-cancel-btn\" onClick={handleClose}>\r\n          {t(\"button.cancel\")}\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default BlmOptionsEditor;\r\n"]},"metadata":{},"sourceType":"module"}