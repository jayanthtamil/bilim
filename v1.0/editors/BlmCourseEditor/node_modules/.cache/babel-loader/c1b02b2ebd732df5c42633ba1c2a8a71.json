{"ast":null,"code":"import { ElementType } from \"editor-constants\";\nimport { findIndex } from \"utils\";\nimport { getAllMedias } from \"template-builders\";\nimport { fetchAPI } from \"redux/api\";\nimport * as actions from \"../types\";\nimport { createPropertiesAPI, createTemplatesAPI, resetTemplatesAPI, createDuplicateTemplatesAPI } from \"../utils\";\nexport const getElementProperties = element => {\n  return fetchAPI({\n    url: \"api/\" + element.type + \"/\" + element.id,\n    method: \"GET\",\n    authenticated: true,\n    meta: element,\n    types: [actions.GET_ELEMENT_PROPERTIES_STARTED, actions.GET_ELEMENT_PROPERTIES_SUCCESS, actions.GET_ELEMENT_PROPERTIES_ERROR]\n  });\n};\nexport const updateElementProperties = properties => {\n  const body = createPropertiesAPI(properties);\n  return fetchAPI({\n    url: \"api/\" + properties.type + \"/\" + properties.id,\n    method: \"PATCH\",\n    authenticated: true,\n    meta: properties,\n    body: JSON.stringify(body),\n    types: [actions.UPDATE_ELEMENT_PROPERTIES_STARTED, actions.UPDATE_ELEMENT_PROPERTIES_SUCCESS, actions.UPDATE_ELEMENT_PROPERTIES_ERROR]\n  });\n};\nexport const clearElementProperties = id => {\n  return {\n    type: actions.CLEAR_ELEMENT_PROPERTIES,\n    payload: {\n      id\n    }\n  };\n};\nexport const getElementTemplates = element => {\n  return fetchAPI({\n    url: \"api/pp_template/\" + element.id,\n    method: \"GET\",\n    authenticated: true,\n    meta: element,\n    types: [actions.GET_ELEMENT_TEMPLATES_STARTED, actions.GET_ELEMENT_TEMPLATES_SUCCESS, actions.GET_ELEMENT_TEMPLATES_ERROR]\n  });\n};\nexport const getElementTemplateVal = elementId => {\n  return fetchAPI({\n    url: \"api/pp_template/\" + elementId,\n    method: \"GET\",\n    authenticated: true,\n    meta: elementId,\n    types: [actions.GET_SELECTED_ELEMENT_TEMPLATES_STARTED, actions.GET_SELECTED_ELEMENT_TEMPLATES_SUCCESS, actions.GET_SELECTED_ELEMENT_TEMPLATES_ERROR]\n  });\n};\nexport const getCopyFromDomainList = () => {\n  return fetchAPI({\n    url: \"api/domain_list\",\n    method: \"GET\",\n    authenticated: true,\n    types: [actions.GET_COPY_FROM_DOMAIN_LIST_STARTED, actions.GET_COPY_FROM_DOMAIN_LIST_SUCCESS, actions.GET_COPY_FROM_DOMAIN_LIST_ERROR]\n  });\n};\nexport const getCopyFromDomainCategory = domainId => {\n  let body = {\n    id: domainId\n  };\n  return fetchAPI({\n    url: \"api/domain_categories/\" + domainId,\n    method: \"GET\",\n    authenticated: true,\n    meta: JSON.stringify(body),\n    types: [actions.GET_COPY_FROM_DOMAIN_CATEGORY_STARTED, actions.GET_COPY_FROM_DOMAIN_CATEGORY_SUCCESS, actions.GET_COPY_FROM_DOMAIN_CATEGORY_ERROR]\n  });\n};\nexport const getCopyFromSubFolderList = (id1, id2, id3) => {\n  return fetchAPI({\n    url: \"api/domain_sub_categories/\" + id3 + \"/\" + id2 + \"/\" + id1,\n    method: \"GET\",\n    authenticated: true,\n    types: [actions.GET_COPY_FROM_SUB_FOLDER_STARTED, actions.GET_COPY_FROM_SUB_FOLDER_SUCCESS, actions.GET_COPY_FROM_SUB_FOLDER_ERROR]\n  });\n};\nexport const getCopyFromStructureList = categoryId => {\n  return fetchAPI({\n    url: \"api/course_tree/\" + categoryId,\n    method: \"GET\",\n    authenticated: true,\n    types: [actions.GET_COPY_FROM_STRUCTURE_LIST_STARTED, actions.GET_COPY_FROM_STRUCTURE_LIST_SUCCESS, actions.GET_COPY_FROM_STRUCTURE_LIST_ERROR]\n  });\n};\nexport const saveTemplates = (element, template, position = 0) => (dispatch, getState) => {\n  const {\n    course: {\n      element: {\n        templates: {\n          templates\n        } = {}\n      }\n    }\n  } = getState();\n\n  if (element) {\n    if (element.type === ElementType.Page || element.type === ElementType.SimplePage) {\n      if (templates && templates.length !== 0) {\n        const newTemplates = [...templates];\n\n        if (template.id === \"\") {\n          //For new templates\n          newTemplates.splice(position, 0, template);\n        } else {\n          const ind = findIndex(newTemplates, template.id, \"id\");\n\n          if (ind !== -1) {\n            newTemplates.splice(ind, 1, template);\n          }\n        }\n\n        dispatch(updateElementTemplates(element.id, newTemplates));\n      } else {\n        dispatch(updateElementTemplates(element.id, [template]));\n      }\n    } else if (element.type === ElementType.Screen || element.type === ElementType.Question || element.type === ElementType.SimpleContent) {\n      if (template) {\n        dispatch(updateElementTemplates(element.id, template));\n      }\n    }\n  } else {\n    return undefined;\n  }\n};\nexport const updateElementTemplates = (elementId, templates, duplicate) => {\n  var body;\n\n  if (duplicate) {\n    body = createDuplicateTemplatesAPI(templates);\n  } else {\n    body = createTemplatesAPI(templates);\n  }\n\n  return fetchAPI({\n    url: \"api/pp_template/\" + elementId,\n    method: \"PATCH\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    // meta: element,\n    types: [actions.UPDATE_ELEMENT_TEMPLATES_STARTED, actions.UPDATE_ELEMENT_TEMPLATES_SUCCESS, actions.UPDATE_ELEMENT_TEMPLATES_ERROR]\n  });\n};\nexport const duplicateElementTemplate = (parent, template) => {\n  let body = {\n    parent: parent.id,\n    action: \"duplicate\"\n  };\n  return fetchAPI({\n    url: \"api/pp_template/new/\" + template.id,\n    method: \"POST\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    types: [actions.DUPLICATE_ELEMENT_TEMPLATE_STARTED, actions.DUPLICATE_ELEMENT_TEMPLATE_SUCCESS, actions.DUPLICATE_ELEMENT_TEMPLATE_ERROR]\n  });\n};\nexport const duplicateImageTemplate = payload => {\n  return fetchAPI({\n    url: \"api/media/new\",\n    method: \"POST\",\n    authenticated: true,\n    body: JSON.stringify(payload),\n    types: [actions.UPDATE_DUPLICATE_IMAGE_STARTED, actions.UPDATE_DUPLICATE_IMAGE_SUCCESS, actions.UPDATE_DUPLICATE_IMAGE_ERROR]\n  });\n};\nexport const deleteElementTemplate = (parent, template) => {\n  let body = {\n    parent: parent.id\n  };\n  return fetchAPI({\n    url: \"api/pp_template/\" + template.id,\n    method: \"DELETE\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    types: [actions.DELETE_ELEMENT_TEMPLATE_STARTED, actions.DELETE_ELEMENT_TEMPLATE_SUCCESS, actions.DELETE_ELEMENT_TEMPLATE_ERROR]\n  });\n};\nexport const positionElementTemplate = (element, templates) => {\n  let body = {\n    templateIds: templates.map(template => template.id)\n  };\n  return fetchAPI({\n    url: \"api/pp_position/\" + element.id,\n    method: \"PATCH\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    types: [actions.POSITION_ELEMENT_TEMPLATE_STARTED, actions.POSITION_ELEMENT_TEMPLATE_SUCCESS, actions.POSITION_ELEMENT_TEMPLATE_ERROR]\n  });\n};\nexport const resetElementTemplate = element => (dispatch, getState) => {\n  const callback = () => {\n    const {\n      course: {\n        element: {\n          templates\n        }\n      }\n    } = getState();\n\n    if (templates === null || templates === void 0 ? void 0 : templates.templates) {\n      templates.templates.forEach(template => {\n        return dispatch(resetTemplate(template));\n      });\n    }\n\n    return undefined;\n  };\n\n  const {\n    course: {\n      element: {\n        templates\n      }\n    }\n  } = getState();\n\n  if ((templates === null || templates === void 0 ? void 0 : templates.id) === element.id) {\n    return callback();\n  } else {\n    return dispatch(getElementTemplates(element)).then(result => {\n      if (!result.error) {\n        callback();\n      }\n\n      return result;\n    });\n  }\n};\nexport const resetTemplate = template => {\n  const medias = getAllMedias(template);\n  const body = resetTemplatesAPI(medias);\n  return fetchAPI({\n    url: \"api/reset_template/\" + template.id,\n    method: \"PATCH\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    types: [actions.RESET_ELEMENT_TEMPLATE_STARTED, actions.RESET_ELEMENT_TEMPLATE_SUCCESS, actions.RESET_ELEMENT_TEMPLATE_ERROR]\n  });\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/course/element/actions/index.ts"],"names":["ElementType","findIndex","getAllMedias","fetchAPI","actions","createPropertiesAPI","createTemplatesAPI","resetTemplatesAPI","createDuplicateTemplatesAPI","getElementProperties","element","url","type","id","method","authenticated","meta","types","GET_ELEMENT_PROPERTIES_STARTED","GET_ELEMENT_PROPERTIES_SUCCESS","GET_ELEMENT_PROPERTIES_ERROR","updateElementProperties","properties","body","JSON","stringify","UPDATE_ELEMENT_PROPERTIES_STARTED","UPDATE_ELEMENT_PROPERTIES_SUCCESS","UPDATE_ELEMENT_PROPERTIES_ERROR","clearElementProperties","CLEAR_ELEMENT_PROPERTIES","payload","getElementTemplates","GET_ELEMENT_TEMPLATES_STARTED","GET_ELEMENT_TEMPLATES_SUCCESS","GET_ELEMENT_TEMPLATES_ERROR","getElementTemplateVal","elementId","GET_SELECTED_ELEMENT_TEMPLATES_STARTED","GET_SELECTED_ELEMENT_TEMPLATES_SUCCESS","GET_SELECTED_ELEMENT_TEMPLATES_ERROR","getCopyFromDomainList","GET_COPY_FROM_DOMAIN_LIST_STARTED","GET_COPY_FROM_DOMAIN_LIST_SUCCESS","GET_COPY_FROM_DOMAIN_LIST_ERROR","getCopyFromDomainCategory","domainId","GET_COPY_FROM_DOMAIN_CATEGORY_STARTED","GET_COPY_FROM_DOMAIN_CATEGORY_SUCCESS","GET_COPY_FROM_DOMAIN_CATEGORY_ERROR","getCopyFromSubFolderList","id1","id2","id3","GET_COPY_FROM_SUB_FOLDER_STARTED","GET_COPY_FROM_SUB_FOLDER_SUCCESS","GET_COPY_FROM_SUB_FOLDER_ERROR","getCopyFromStructureList","categoryId","GET_COPY_FROM_STRUCTURE_LIST_STARTED","GET_COPY_FROM_STRUCTURE_LIST_SUCCESS","GET_COPY_FROM_STRUCTURE_LIST_ERROR","saveTemplates","template","position","dispatch","getState","course","templates","Page","SimplePage","length","newTemplates","splice","ind","updateElementTemplates","Screen","Question","SimpleContent","undefined","duplicate","UPDATE_ELEMENT_TEMPLATES_STARTED","UPDATE_ELEMENT_TEMPLATES_SUCCESS","UPDATE_ELEMENT_TEMPLATES_ERROR","duplicateElementTemplate","parent","action","DUPLICATE_ELEMENT_TEMPLATE_STARTED","DUPLICATE_ELEMENT_TEMPLATE_SUCCESS","DUPLICATE_ELEMENT_TEMPLATE_ERROR","duplicateImageTemplate","UPDATE_DUPLICATE_IMAGE_STARTED","UPDATE_DUPLICATE_IMAGE_SUCCESS","UPDATE_DUPLICATE_IMAGE_ERROR","deleteElementTemplate","DELETE_ELEMENT_TEMPLATE_STARTED","DELETE_ELEMENT_TEMPLATE_SUCCESS","DELETE_ELEMENT_TEMPLATE_ERROR","positionElementTemplate","templateIds","map","POSITION_ELEMENT_TEMPLATE_STARTED","POSITION_ELEMENT_TEMPLATE_SUCCESS","POSITION_ELEMENT_TEMPLATE_ERROR","resetElementTemplate","callback","forEach","resetTemplate","then","result","error","medias","RESET_ELEMENT_TEMPLATE_STARTED","RESET_ELEMENT_TEMPLATE_SUCCESS","RESET_ELEMENT_TEMPLATE_ERROR"],"mappings":"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","sourcesContent":["import { CourseElement, CourseElementProps, CourseElementTemplate } from \"types\";\r\nimport { ElementType } from \"editor-constants\";\r\nimport { findIndex } from \"utils\";\r\nimport { getAllMedias } from \"template-builders\";\r\nimport { fetchAPI } from \"redux/api\";\r\nimport { ApiThunkAction } from \"redux/types\";\r\nimport * as actions from \"../types\";\r\nimport {\r\n  createPropertiesAPI,\r\n  createTemplatesAPI,\r\n  resetTemplatesAPI,\r\n  createDuplicateTemplatesAPI,\r\n} from \"../utils\";\r\n\r\nexport const getElementProperties = (element: CourseElement) => {\r\n  return fetchAPI({\r\n    url: \"api/\" + element.type + \"/\" + element.id,\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    meta: element,\r\n    types: [\r\n      actions.GET_ELEMENT_PROPERTIES_STARTED,\r\n      actions.GET_ELEMENT_PROPERTIES_SUCCESS,\r\n      actions.GET_ELEMENT_PROPERTIES_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const updateElementProperties = (properties: CourseElementProps) => {\r\n  const body = createPropertiesAPI(properties);\r\n\r\n  return fetchAPI({\r\n    url: \"api/\" + properties.type + \"/\" + properties.id,\r\n    method: \"PATCH\",\r\n    authenticated: true,\r\n    meta: properties,\r\n    body: JSON.stringify(body),\r\n    types: [\r\n      actions.UPDATE_ELEMENT_PROPERTIES_STARTED,\r\n      actions.UPDATE_ELEMENT_PROPERTIES_SUCCESS,\r\n      actions.UPDATE_ELEMENT_PROPERTIES_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const clearElementProperties = (id?: string) => {\r\n  return {\r\n    type: actions.CLEAR_ELEMENT_PROPERTIES,\r\n    payload: { id },\r\n  };\r\n};\r\n\r\nexport const getElementTemplates = (element: CourseElement) => {\r\n  return fetchAPI({\r\n    url: \"api/pp_template/\" + element.id,\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    meta: element,\r\n    types: [\r\n      actions.GET_ELEMENT_TEMPLATES_STARTED,\r\n      actions.GET_ELEMENT_TEMPLATES_SUCCESS,\r\n      actions.GET_ELEMENT_TEMPLATES_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const getElementTemplateVal = (elementId: string) => {\r\n  return fetchAPI({\r\n    url: \"api/pp_template/\" + elementId,\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    meta: elementId,\r\n    types: [\r\n      actions.GET_SELECTED_ELEMENT_TEMPLATES_STARTED,\r\n      actions.GET_SELECTED_ELEMENT_TEMPLATES_SUCCESS,\r\n      actions.GET_SELECTED_ELEMENT_TEMPLATES_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const getCopyFromDomainList = () => {\r\n  return fetchAPI({\r\n    url: \"api/domain_list\",\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    types: [\r\n      actions.GET_COPY_FROM_DOMAIN_LIST_STARTED,\r\n      actions.GET_COPY_FROM_DOMAIN_LIST_SUCCESS,\r\n      actions.GET_COPY_FROM_DOMAIN_LIST_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const getCopyFromDomainCategory = (domainId: number) => {\r\n  let body = {\r\n    id: domainId,\r\n  };\r\n  return fetchAPI({\r\n    url: \"api/domain_categories/\" + domainId,\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    meta: JSON.stringify(body),\r\n    types: [\r\n      actions.GET_COPY_FROM_DOMAIN_CATEGORY_STARTED,\r\n      actions.GET_COPY_FROM_DOMAIN_CATEGORY_SUCCESS,\r\n      actions.GET_COPY_FROM_DOMAIN_CATEGORY_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const getCopyFromSubFolderList = (id1: string, id2: any, id3: any) => {\r\n  return fetchAPI({\r\n    url: \"api/domain_sub_categories/\" + id3 + \"/\" + id2 + \"/\" + id1,\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    types: [\r\n      actions.GET_COPY_FROM_SUB_FOLDER_STARTED,\r\n      actions.GET_COPY_FROM_SUB_FOLDER_SUCCESS,\r\n      actions.GET_COPY_FROM_SUB_FOLDER_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const getCopyFromStructureList = (categoryId: number) => {\r\n  return fetchAPI({\r\n    url: \"api/course_tree/\" + categoryId,\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    types: [\r\n      actions.GET_COPY_FROM_STRUCTURE_LIST_STARTED,\r\n      actions.GET_COPY_FROM_STRUCTURE_LIST_SUCCESS,\r\n      actions.GET_COPY_FROM_STRUCTURE_LIST_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const saveTemplates =\r\n  (element: CourseElement, template: CourseElementTemplate, position = 0): ApiThunkAction =>\r\n  (dispatch, getState) => {\r\n    const {\r\n      course: {\r\n        element: { templates: { templates } = {} },\r\n      },\r\n    } = getState();\r\n\r\n    if (element) {\r\n      if (element.type === ElementType.Page || element.type === ElementType.SimplePage) {\r\n        if (templates && templates.length !== 0) {\r\n          const newTemplates = [...templates];\r\n\r\n          if (template.id === \"\") {\r\n            //For new templates\r\n            newTemplates.splice(position, 0, template);\r\n          } else {\r\n            const ind = findIndex(newTemplates, template.id, \"id\");\r\n\r\n            if (ind !== -1) {\r\n              newTemplates.splice(ind, 1, template);\r\n            }\r\n          }\r\n\r\n          dispatch(updateElementTemplates(element.id, newTemplates));\r\n        } else {\r\n          dispatch(updateElementTemplates(element.id, [template]));\r\n        }\r\n      } else if (\r\n        element.type === ElementType.Screen ||\r\n        element.type === ElementType.Question ||\r\n        element.type === ElementType.SimpleContent\r\n      ) {\r\n        if (template) {\r\n          dispatch(updateElementTemplates(element.id, template));\r\n        }\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\nexport const updateElementTemplates = (\r\n  elementId: string,\r\n  templates: CourseElementTemplate | CourseElementTemplate[],\r\n  duplicate?: string\r\n) => {\r\n  var body;\r\n  if (duplicate) {\r\n    body = createDuplicateTemplatesAPI(templates);\r\n  } else {\r\n    body = createTemplatesAPI(templates);\r\n  }\r\n\r\n  return fetchAPI({\r\n    url: \"api/pp_template/\" + elementId,\r\n    method: \"PATCH\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    // meta: element,\r\n    types: [\r\n      actions.UPDATE_ELEMENT_TEMPLATES_STARTED,\r\n      actions.UPDATE_ELEMENT_TEMPLATES_SUCCESS,\r\n      actions.UPDATE_ELEMENT_TEMPLATES_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const duplicateElementTemplate = (\r\n  parent: CourseElement,\r\n  template: CourseElementTemplate\r\n) => {\r\n  let body = {\r\n    parent: parent.id,\r\n    action: \"duplicate\",\r\n  };\r\n\r\n  return fetchAPI({\r\n    url: \"api/pp_template/new/\" + template.id,\r\n    method: \"POST\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    types: [\r\n      actions.DUPLICATE_ELEMENT_TEMPLATE_STARTED,\r\n      actions.DUPLICATE_ELEMENT_TEMPLATE_SUCCESS,\r\n      actions.DUPLICATE_ELEMENT_TEMPLATE_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const duplicateImageTemplate = (payload: any) => {\r\n  return fetchAPI({\r\n    url: \"api/media/new\",\r\n    method: \"POST\",\r\n    authenticated: true,\r\n    body: JSON.stringify(payload),\r\n    types: [\r\n      actions.UPDATE_DUPLICATE_IMAGE_STARTED,\r\n      actions.UPDATE_DUPLICATE_IMAGE_SUCCESS,\r\n      actions.UPDATE_DUPLICATE_IMAGE_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const deleteElementTemplate = (parent: CourseElement, template: CourseElementTemplate) => {\r\n  let body = {\r\n    parent: parent.id,\r\n  };\r\n\r\n  return fetchAPI({\r\n    url: \"api/pp_template/\" + template.id,\r\n    method: \"DELETE\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    types: [\r\n      actions.DELETE_ELEMENT_TEMPLATE_STARTED,\r\n      actions.DELETE_ELEMENT_TEMPLATE_SUCCESS,\r\n      actions.DELETE_ELEMENT_TEMPLATE_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const positionElementTemplate = (\r\n  element: CourseElement,\r\n  templates: CourseElementTemplate[]\r\n) => {\r\n  let body = {\r\n    templateIds: templates.map((template) => template.id),\r\n  };\r\n\r\n  return fetchAPI({\r\n    url: \"api/pp_position/\" + element.id,\r\n    method: \"PATCH\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    types: [\r\n      actions.POSITION_ELEMENT_TEMPLATE_STARTED,\r\n      actions.POSITION_ELEMENT_TEMPLATE_SUCCESS,\r\n      actions.POSITION_ELEMENT_TEMPLATE_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport const resetElementTemplate =\r\n  (element: CourseElement): ApiThunkAction =>\r\n  (dispatch, getState) => {\r\n    const callback = () => {\r\n      const {\r\n        course: {\r\n          element: { templates },\r\n        },\r\n      } = getState();\r\n\r\n      if (templates?.templates) {\r\n        templates.templates.forEach((template) => {\r\n          return dispatch(resetTemplate(template));\r\n        });\r\n      }\r\n\r\n      return undefined;\r\n    };\r\n\r\n    const {\r\n      course: {\r\n        element: { templates },\r\n      },\r\n    } = getState();\r\n\r\n    if (templates?.id === element.id) {\r\n      return callback();\r\n    } else {\r\n      return dispatch(getElementTemplates(element)).then((result) => {\r\n        if (!result.error) {\r\n          callback();\r\n        }\r\n\r\n        return result;\r\n      });\r\n    }\r\n  };\r\n\r\nexport const resetTemplate = (template: CourseElementTemplate) => {\r\n  const medias = getAllMedias(template);\r\n  const body = resetTemplatesAPI(medias);\r\n\r\n  return fetchAPI({\r\n    url: \"api/reset_template/\" + template.id,\r\n    method: \"PATCH\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    types: [\r\n      actions.RESET_ELEMENT_TEMPLATE_STARTED,\r\n      actions.RESET_ELEMENT_TEMPLATE_SUCCESS,\r\n      actions.RESET_ELEMENT_TEMPLATE_ERROR,\r\n    ],\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}