{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\shared\\\\material-ui\\\\autocomplete\\\\BlmAutoComplete.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { DropdownImg } from \"assets/icons\";\nimport { toNumber } from \"utils\";\nimport \"./styles.scss\";\n\nfunction formatValue(value, suffix = \"\") {\n  return value !== undefined ? value.toString() + suffix : \"\";\n}\n\nfunction BlmAutoComplete(props) {\n  const {\n    name = \"autocomplete\",\n    value,\n    options,\n    suffix,\n    min,\n    max,\n    className,\n    onChange\n  } = props;\n  const [inputValue, setInputValue] = useState(\"\");\n  useEffect(() => {\n    setInputValue(formatValue(value, suffix));\n  }, [value, suffix]);\n\n  const updateChange = newInput => {\n    let newValue = toNumber(newInput);\n\n    if (!isNaN(newValue)) {\n      newValue = Math.min(Math.max(newValue, min || -Infinity), max || Infinity);\n    } else {\n      newValue = min;\n    }\n\n    setInputValue(formatValue(newValue, suffix));\n\n    if (onChange && value !== newValue) {\n      onChange({\n        target: {\n          name,\n          value: newValue\n        }\n      });\n    }\n  };\n\n  const getFilterOptions = opts => {\n    return opts;\n  };\n\n  const getOptionsSelected = option => {\n    if (inputValue && inputValue !== \"\") {\n      return toNumber(option) === toNumber(inputValue);\n    }\n\n    return false;\n  };\n\n  const handleInputChange = (event, newValue, reason) => {\n    const regex = /^[0-9%\\b]+$/;\n\n    if (newValue === \"\" || regex.test(newValue)) {\n      if (reason !== \"input\") {\n        updateChange(newValue);\n      } else {\n        setInputValue(newValue);\n      }\n    }\n  };\n\n  const handleBlur = event => {\n    updateChange(inputValue);\n  };\n\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    freeSolo: true,\n    inputValue: inputValue,\n    options: options,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      onBlur: handleBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 32\n      }\n    })),\n    disableClearable: true,\n    forcePopupIcon: true,\n    popupIcon: DropdownImg,\n    className: clsx(\"mui-autocomplete\", className),\n    filterOptions: getFilterOptions,\n    getOptionSelected: getOptionsSelected,\n    onInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default BlmAutoComplete;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/material-ui/autocomplete/BlmAutoComplete.tsx"],"names":["React","useEffect","useState","clsx","TextField","Autocomplete","DropdownImg","toNumber","formatValue","value","suffix","undefined","toString","BlmAutoComplete","props","name","options","min","max","className","onChange","inputValue","setInputValue","updateChange","newInput","newValue","isNaN","Math","Infinity","target","getFilterOptions","opts","getOptionsSelected","option","handleInputChange","event","reason","regex","test","handleBlur","params"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, FocusEvent, useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nimport { CustomChangeEvent } from \"types\";\r\nimport { DropdownImg } from \"assets/icons\";\r\nimport { toNumber } from \"utils\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  name?: string;\r\n  value?: number;\r\n  options: string[];\r\n  suffix?: string;\r\n  min?: number;\r\n  max?: number;\r\n  className?: string;\r\n  onChange?: (event: AutoCompleteChangeEvent) => void;\r\n}\r\n\r\nexport type AutoCompleteChangeEvent = CustomChangeEvent<number | undefined>;\r\n\r\nfunction formatValue(value?: number, suffix = \"\") {\r\n  return value !== undefined ? value.toString() + suffix : \"\";\r\n}\r\n\r\nfunction BlmAutoComplete(props: CompProps) {\r\n  const { name = \"autocomplete\", value, options, suffix, min, max, className, onChange } = props;\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setInputValue(formatValue(value, suffix));\r\n  }, [value, suffix]);\r\n\r\n  const updateChange = (newInput: string) => {\r\n    let newValue: number | undefined = toNumber(newInput);\r\n\r\n    if (!isNaN(newValue)) {\r\n      newValue = Math.min(Math.max(newValue, min || -Infinity), max || Infinity);\r\n    } else {\r\n      newValue = min;\r\n    }\r\n\r\n    setInputValue(formatValue(newValue, suffix));\r\n\r\n    if (onChange && value !== newValue) {\r\n      onChange({ target: { name, value: newValue } });\r\n    }\r\n  };\r\n\r\n  const getFilterOptions = (opts: string[]) => {\r\n    return opts;\r\n  };\r\n\r\n  const getOptionsSelected = (option: string) => {\r\n    if (inputValue && inputValue !== \"\") {\r\n      return toNumber(option) === toNumber(inputValue);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const handleInputChange = (event: ChangeEvent<any>, newValue: string, reason: string) => {\r\n    const regex = /^[0-9%\\b]+$/;\r\n\r\n    if (newValue === \"\" || regex.test(newValue)) {\r\n      if (reason !== \"input\") {\r\n        updateChange(newValue);\r\n      } else {\r\n        setInputValue(newValue);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBlur = (event: FocusEvent) => {\r\n    updateChange(inputValue);\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      freeSolo\r\n      inputValue={inputValue}\r\n      options={options}\r\n      renderInput={(params) => <TextField {...params} variant=\"outlined\" onBlur={handleBlur} />}\r\n      disableClearable={true}\r\n      forcePopupIcon={true}\r\n      popupIcon={DropdownImg}\r\n      className={clsx(\"mui-autocomplete\", className)}\r\n      filterOptions={getFilterOptions}\r\n      getOptionSelected={getOptionsSelected}\r\n      onInputChange={handleInputChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BlmAutoComplete;\r\n"]},"metadata":{},"sourceType":"module"}