{"ast":null,"code":"import { CompositeDecorator } from \"draft-js\";\nimport { INLINE_STYLE_SIZE_PREFIX, INLINE_STYLE_COLOR_PREFIX, INLINE_STYLE_BG_COLOR_PREFIX, INLINE_STYLE_FONT_PREFIX, INLINE_STYLE_HIGHLIGHT } from \"editor-constants\";\nimport BlmLink from \"./BlmLink\";\n\nconst updateInlineStyle = (style, styleName) => {\n  if (styleName.startsWith(INLINE_STYLE_FONT_PREFIX)) {\n    style.fontFamily = styleName.replace(INLINE_STYLE_FONT_PREFIX, \"\");\n  } else if (styleName.startsWith(INLINE_STYLE_SIZE_PREFIX)) {\n    style.fontSize = styleName.replace(INLINE_STYLE_SIZE_PREFIX, \"\");\n  } else if (styleName.startsWith(INLINE_STYLE_COLOR_PREFIX)) {\n    style.color = styleName.replace(INLINE_STYLE_COLOR_PREFIX, \"\");\n  } else if (styleName.startsWith(INLINE_STYLE_BG_COLOR_PREFIX)) {\n    style.backgroundColor = styleName.replace(INLINE_STYLE_BG_COLOR_PREFIX, \"\");\n  } else if (styleName.startsWith(INLINE_STYLE_HIGHLIGHT)) {\n    style.color = \"#ffffff\";\n    style.backgroundColor = \"#3398fd\";\n  }\n};\n\nexport const blockStyleFn = block => {\n  const align = block.getData().get(\"textAlign\");\n\n  if (align) {\n    return `text-align-${align}`;\n  }\n\n  return \"\";\n};\nexport const customStyleFn = (style, block) => {\n  return style.reduce((styles = {}, styleName) => {\n    if (styleName) {\n      updateInlineStyle(styles, styleName);\n    }\n\n    return styles;\n  }, {});\n};\n\nfunction findLinkEntities(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(character => {\n    const entityKey = character.getEntity();\n    return entityKey !== null && contentState.getEntity(entityKey).getType() === \"LINK\";\n  }, callback);\n}\n\nexport const decorator = new CompositeDecorator([{\n  strategy: findLinkEntities,\n  component: BlmLink\n}]);\n/**\r\n * As per discussed with client, We should avoid P tag in text component.\r\n * Bcos P tag may have styles from css. That style not matched with editing content.\r\n * So we convert all P tag into div tag for generated html after editing.\r\n */\n\nexport const stateConfig = {\n  customInlineFn: (element, {\n    Style,\n    Entity\n  }) => {\n    const {\n      tagName\n    } = element;\n\n    if (tagName === \"SPAN\") {\n      const {\n        fontFamily,\n        fontSize,\n        color,\n        backgroundColor\n      } = element.style;\n      const arr = [];\n\n      if (fontFamily) {\n        arr.push(INLINE_STYLE_FONT_PREFIX + fontFamily);\n      }\n\n      if (fontSize) {\n        arr.push(INLINE_STYLE_SIZE_PREFIX + fontSize);\n      }\n\n      if (color) {\n        arr.push(INLINE_STYLE_COLOR_PREFIX + color);\n      }\n\n      if (backgroundColor) {\n        arr.push(INLINE_STYLE_BG_COLOR_PREFIX + backgroundColor);\n      }\n\n      if (arr.length) {\n        return Style(arr);\n      }\n    } else if (tagName === \"A\") {\n      return Entity(\"LINK\", {\n        url: element.href\n      });\n    }\n  },\n  customBlockFn: element => {\n    const {\n      nodeName,\n      style\n    } = element;\n\n    if ((nodeName === \"DIV\" || nodeName === \"P\" || nodeName === \"LI\") && style.textAlign) {\n      const align = style.textAlign.toLowerCase();\n      return {\n        data: {\n          textAlign: `${align}`\n        }\n      };\n    }\n  }\n};\nexport const htmlConfig = {\n  inlineStyles: {\n    BOLD: {\n      element: \"b\"\n    },\n    ITALIC: {\n      element: \"i\"\n    },\n    UNDERLINE: {\n      element: \"u\"\n    }\n  },\n  defaultBlockTag: \"div\",\n  //@ts-ignore\n  inlineStyleFn: styles => {\n    const style = {};\n    styles.forEach(value => {\n      updateInlineStyle(style, value);\n    });\n\n    if (Object.keys(style).length) {\n      return {\n        element: \"span\",\n        style: style\n      };\n    }\n  },\n  blockStyleFn: block => {\n    const textAlign = block.getData().get(\"textAlign\");\n\n    if (textAlign) {\n      return {\n        style: {\n          textAlign\n        }\n      };\n    }\n  },\n  entityStyleFn: entity => {\n    const type = entity.getType();\n    const data = entity.getData();\n\n    if (type === \"LINK\") {\n      return {\n        element: \"a\",\n        attributes: {\n          href: data.url\n        }\n      };\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/component-editor/text/config.ts"],"names":["CompositeDecorator","INLINE_STYLE_SIZE_PREFIX","INLINE_STYLE_COLOR_PREFIX","INLINE_STYLE_BG_COLOR_PREFIX","INLINE_STYLE_FONT_PREFIX","INLINE_STYLE_HIGHLIGHT","BlmLink","updateInlineStyle","style","styleName","startsWith","fontFamily","replace","fontSize","color","backgroundColor","blockStyleFn","block","align","getData","get","customStyleFn","reduce","styles","findLinkEntities","contentBlock","callback","contentState","findEntityRanges","character","entityKey","getEntity","getType","decorator","strategy","component","stateConfig","customInlineFn","element","Style","Entity","tagName","arr","push","length","url","href","customBlockFn","nodeName","textAlign","toLowerCase","data","htmlConfig","inlineStyles","BOLD","ITALIC","UNDERLINE","defaultBlockTag","inlineStyleFn","forEach","value","Object","keys","entityStyleFn","entity","type","attributes"],"mappings":"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","sourcesContent":["import { CompositeDecorator, ContentBlock, ContentState } from \"draft-js\";\r\nimport { Options as ImportOptions } from \"draft-js-import-html\";\r\nimport { Options as ExportOptions } from \"draft-js-export-html\";\r\n\r\nimport { SimpleObject } from \"types\";\r\nimport {\r\n  INLINE_STYLE_SIZE_PREFIX,\r\n  INLINE_STYLE_COLOR_PREFIX,\r\n  INLINE_STYLE_BG_COLOR_PREFIX,\r\n  INLINE_STYLE_FONT_PREFIX,\r\n  INLINE_STYLE_HIGHLIGHT,\r\n} from \"editor-constants\";\r\nimport BlmLink from \"./BlmLink\";\r\n\r\nconst updateInlineStyle = (style: SimpleObject, styleName: string) => {\r\n  if (styleName.startsWith(INLINE_STYLE_FONT_PREFIX)) {\r\n    style.fontFamily = styleName.replace(INLINE_STYLE_FONT_PREFIX, \"\");\r\n  } else if (styleName.startsWith(INLINE_STYLE_SIZE_PREFIX)) {\r\n    style.fontSize = styleName.replace(INLINE_STYLE_SIZE_PREFIX, \"\");\r\n  } else if (styleName.startsWith(INLINE_STYLE_COLOR_PREFIX)) {\r\n    style.color = styleName.replace(INLINE_STYLE_COLOR_PREFIX, \"\");\r\n  } else if (styleName.startsWith(INLINE_STYLE_BG_COLOR_PREFIX)) {\r\n    style.backgroundColor = styleName.replace(INLINE_STYLE_BG_COLOR_PREFIX, \"\");\r\n  } else if (styleName.startsWith(INLINE_STYLE_HIGHLIGHT)) {\r\n    style.color = \"#ffffff\";\r\n    style.backgroundColor = \"#3398fd\";\r\n  }\r\n};\r\n\r\nexport const blockStyleFn = (block: ContentBlock) => {\r\n  const align = block.getData().get(\"textAlign\");\r\n\r\n  if (align) {\r\n    return `text-align-${align}`;\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\nexport const customStyleFn = (style: Immutable.OrderedSet<string>, block: ContentBlock) => {\r\n  return style.reduce((styles: Record<string, any> = {}, styleName?: string) => {\r\n    if (styleName) {\r\n      updateInlineStyle(styles, styleName);\r\n    }\r\n\r\n    return styles;\r\n  }, {});\r\n};\r\n\r\nfunction findLinkEntities(\r\n  contentBlock: ContentBlock,\r\n  callback: (start: number, end: number) => void,\r\n  contentState: ContentState\r\n) {\r\n  contentBlock.findEntityRanges((character) => {\r\n    const entityKey = character.getEntity();\r\n\r\n    return entityKey !== null && contentState.getEntity(entityKey).getType() === \"LINK\";\r\n  }, callback);\r\n}\r\n\r\nexport const decorator = new CompositeDecorator([\r\n  {\r\n    strategy: findLinkEntities,\r\n    component: BlmLink,\r\n  },\r\n]);\r\n\r\n/**\r\n * As per discussed with client, We should avoid P tag in text component.\r\n * Bcos P tag may have styles from css. That style not matched with editing content.\r\n * So we convert all P tag into div tag for generated html after editing.\r\n */\r\n\r\nexport const stateConfig: ImportOptions = {\r\n  customInlineFn: (element, { Style, Entity }) => {\r\n    const { tagName } = element;\r\n\r\n    if (tagName === \"SPAN\") {\r\n      const { fontFamily, fontSize, color, backgroundColor } = (element as HTMLSpanElement).style;\r\n      const arr = [];\r\n\r\n      if (fontFamily) {\r\n        arr.push(INLINE_STYLE_FONT_PREFIX + fontFamily);\r\n      }\r\n      if (fontSize) {\r\n        arr.push(INLINE_STYLE_SIZE_PREFIX + fontSize);\r\n      }\r\n      if (color) {\r\n        arr.push(INLINE_STYLE_COLOR_PREFIX + color);\r\n      }\r\n      if (backgroundColor) {\r\n        arr.push(INLINE_STYLE_BG_COLOR_PREFIX + backgroundColor);\r\n      }\r\n\r\n      if (arr.length) {\r\n        return Style(arr as any);\r\n      }\r\n    } else if (tagName === \"A\") {\r\n      return Entity(\"LINK\", {\r\n        url: (element as HTMLAnchorElement).href,\r\n      });\r\n    }\r\n  },\r\n  customBlockFn: (element) => {\r\n    const { nodeName, style } = element as HTMLElement;\r\n\r\n    if ((nodeName === \"DIV\" || nodeName === \"P\" || nodeName === \"LI\") && style.textAlign) {\r\n      const align = style.textAlign.toLowerCase();\r\n\r\n      return {\r\n        data: {\r\n          textAlign: `${align}`,\r\n        },\r\n      };\r\n    }\r\n  },\r\n};\r\n\r\nexport const htmlConfig: ExportOptions = {\r\n  inlineStyles: {\r\n    BOLD: { element: \"b\" },\r\n    ITALIC: { element: \"i\" },\r\n    UNDERLINE: { element: \"u\" },\r\n  },\r\n  defaultBlockTag: \"div\",\r\n  //@ts-ignore\r\n  inlineStyleFn: (styles: any) => {\r\n    const style: SimpleObject = {};\r\n\r\n    styles.forEach((value: string) => {\r\n      updateInlineStyle(style, value);\r\n    });\r\n\r\n    if (Object.keys(style).length) {\r\n      return {\r\n        element: \"span\",\r\n        style: style,\r\n      };\r\n    }\r\n  },\r\n  blockStyleFn: (block) => {\r\n    const textAlign = block.getData().get(\"textAlign\");\r\n\r\n    if (textAlign) {\r\n      return { style: { textAlign } };\r\n    }\r\n  },\r\n  entityStyleFn: (entity) => {\r\n    const type = entity.getType();\r\n    const data = entity.getData();\r\n\r\n    if (type === \"LINK\") {\r\n      return {\r\n        element: \"a\",\r\n        attributes: {\r\n          href: data.url,\r\n        },\r\n      };\r\n    }\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}