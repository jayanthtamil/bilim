{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\actions\\\\closeandexit\\\\BlmCloseOrExit.tsx\";\nimport React, { useMemo } from \"react\";\nimport \"./styles.scss\";\nimport { useTranslation } from \"react-i18next\";\nimport { CloseOrExitTypes } from \"editor-constants\";\nimport { Divider, ListItemText, MenuItem, Select } from \"@material-ui/core\";\n\nconst BlmCloseOrExit = props => {\n  const {\n    data,\n    onChange\n  } = props;\n  const {\n    action,\n    option\n  } = data || {};\n  const {\n    t\n  } = useTranslation(\"content-editor\");\n  const items = useMemo(() => {\n    const result = [];\n    result.push(\"CLOSE\", {\n      label: t(\"close_or_exit.close_pop_up\"),\n      type: CloseOrExitTypes.ClosePopup\n    }, {\n      label: t(\"close_or_exit.close_flap\"),\n      type: CloseOrExitTypes.CloseFlap\n    }, {\n      label: t(\"close_or_exit.close_below\"),\n      type: CloseOrExitTypes.CloseBelow\n    });\n    result.push(\"divider\", \"EXIT\", {\n      label: t(\"close_or_exit.exit_course\"),\n      type: CloseOrExitTypes.ExitCourse\n    });\n    return result;\n  }, [t]);\n\n  const updateChange = newData => {\n    if (onChange) {\n      onChange({\n        target: {\n          name: \"closeexit\",\n          value: newData\n        }\n      });\n    }\n  };\n\n  const renderPlaceholder = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    }, \"Select Action\");\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    const newData = {\n      action: value,\n      option\n    };\n\n    if (name === \"action\") {\n      newData.option = value;\n    }\n\n    updateChange(newData);\n  };\n\n  const renderItems = () => {\n    if (items) {\n      return items.map((item, ind) => {\n        if (typeof item === \"object\") {\n          const {\n            type,\n            label\n          } = item;\n          return /*#__PURE__*/React.createElement(MenuItem, {\n            key: type,\n            value: type,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(ListItemText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }\n          }, label));\n        } else if (item === \"divider\") {\n          return /*#__PURE__*/React.createElement(Divider, {\n            key: item + ind,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 18\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: item,\n            className: \"closeorexit-dropdown-menu-title\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }\n          }, item);\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"closeorexit-action-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"action\",\n    value: action || \"\",\n    displayEmpty: true,\n    MenuProps: {\n      className: \"closeorexit-actions-dropdown-popover\"\n    },\n    className: \"closeorexit-actions-dropdown\",\n    renderValue: action ? undefined : renderPlaceholder,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, renderItems()));\n};\n\nexport default BlmCloseOrExit;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/actions/closeandexit/BlmCloseOrExit.tsx"],"names":["React","useMemo","useTranslation","CloseOrExitTypes","Divider","ListItemText","MenuItem","Select","BlmCloseOrExit","props","data","onChange","action","option","t","items","result","push","label","type","ClosePopup","CloseFlap","CloseBelow","ExitCourse","updateChange","newData","target","name","value","renderPlaceholder","handleChange","event","renderItems","map","item","ind","className","undefined"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useMemo } from \"react\";\r\nimport { CloseOrExitAction, CustomChangeEvent } from \"types\";\r\nimport \"./styles.scss\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CloseOrExitTypes } from \"editor-constants\";\r\nimport { Divider, ListItemText, MenuItem, Select } from \"@material-ui/core\";\r\n\r\nexport interface CompProps {\r\n  data?: CloseOrExitAction;\r\n  onChange?: (event: CustomChangeEvent<CloseOrExitAction>) => void;\r\n}\r\n\r\nconst BlmCloseOrExit = (props: CompProps) => {\r\n  const { data, onChange } = props;\r\n  const { action, option } = data || {};\r\n  const { t } = useTranslation(\"content-editor\");\r\n\r\n  const items = useMemo(() => {\r\n    const result = [];\r\n\r\n    result.push(\r\n      \"CLOSE\",\r\n      { label: t(\"close_or_exit.close_pop_up\"), type: CloseOrExitTypes.ClosePopup },\r\n      { label: t(\"close_or_exit.close_flap\"), type: CloseOrExitTypes.CloseFlap },\r\n      { label: t(\"close_or_exit.close_below\"), type: CloseOrExitTypes.CloseBelow }\r\n    );\r\n\r\n    result.push(\"divider\", \"EXIT\", {\r\n      label: t(\"close_or_exit.exit_course\"),\r\n      type: CloseOrExitTypes.ExitCourse,\r\n    });\r\n\r\n    return result;\r\n  }, [t]);\r\n\r\n  const updateChange = (newData: CloseOrExitAction) => {\r\n    if (onChange) {\r\n      onChange({ target: { name: \"closeexit\", value: newData } });\r\n    }\r\n  };\r\n\r\n  const renderPlaceholder = () => {\r\n    return <div>Select Action</div>;\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<any> | CustomChangeEvent<string>) => {\r\n    const { name, value } = event.target;\r\n    const newData = { action: value, option };\r\n\r\n    if (name === \"action\") {\r\n      newData.option = value;\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const renderItems = () => {\r\n    if (items) {\r\n      return items.map((item, ind) => {\r\n        if (typeof item === \"object\") {\r\n          const { type, label } = item;\r\n          return (\r\n            <MenuItem key={type} value={type}>\r\n              <ListItemText>{label}</ListItemText>\r\n            </MenuItem>\r\n          );\r\n        } else if (item === \"divider\") {\r\n          return <Divider key={item + ind} />;\r\n        } else {\r\n          return (\r\n            <div key={item} className=\"closeorexit-dropdown-menu-title\">\r\n              {item}\r\n            </div>\r\n          );\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"closeorexit-action-wrapper\">\r\n      <Select\r\n        name=\"action\"\r\n        value={action || \"\"}\r\n        displayEmpty={true}\r\n        MenuProps={{\r\n          className: \"closeorexit-actions-dropdown-popover\",\r\n        }}\r\n        className=\"closeorexit-actions-dropdown\"\r\n        renderValue={action ? undefined : renderPlaceholder}\r\n        onChange={handleChange}\r\n      >\r\n        {renderItems()}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlmCloseOrExit;\r\n"]},"metadata":{},"sourceType":"module"}