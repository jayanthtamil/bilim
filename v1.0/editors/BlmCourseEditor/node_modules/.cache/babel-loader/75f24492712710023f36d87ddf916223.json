{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\shared\\\\subscript-input\\\\BlmSubscriptInput.tsx\";\nimport React, { useState, useEffect, forwardRef } from \"react\";\nimport clsx from \"clsx\";\nimport \"./subscript-input.scss\";\nconst TYPYPING_INTERVAL = 3000;\n\nconst BlmSubscriptInput = (props, ref) => {\n  const {\n    name,\n    value,\n    label,\n    min,\n    max,\n    disabled,\n    className,\n    onChange,\n    ...other\n  } = props;\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const [shouldValidate, setShouldValidate] = useState(false);\n  useEffect(() => {\n    setCurrentValue(value !== undefined ? value.toString() : \"\");\n  }, [value]);\n  useEffect(() => {\n    if (shouldValidate) {\n      const timerId = setTimeout(validateValue, TYPYPING_INTERVAL);\n      return () => {\n        clearTimeout(timerId);\n      };\n    }\n  });\n\n  const validateValue = () => {\n    if (!shouldValidate) {\n      return;\n    }\n\n    let newValue = currentValue;\n\n    if (newValue !== \"\") {\n      if (min !== undefined) {\n        newValue = Math.max(min, Number(newValue)).toString();\n      }\n\n      if (max !== undefined) {\n        newValue = Math.min(max, Number(newValue)).toString();\n      }\n\n      if (newValue !== currentValue) {\n        setCurrentValue(newValue);\n      }\n\n      if (onChange) {\n        onChange({\n          target: {\n            name,\n            value: Number(newValue)\n          }\n        });\n      }\n    }\n\n    setShouldValidate(false);\n  };\n\n  const handleChange = event => {\n    const regex = /^$|^[0-9\\b]+$/;\n    let valueStr = event.target.value;\n\n    if (regex.test(valueStr)) {\n      setCurrentValue(valueStr);\n      setShouldValidate(true);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.keyCode === 13) {\n      validateValue();\n    }\n  };\n\n  const handleBlur = event => {\n    validateValue();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: clsx(\"subscript-input-container\", className, {\n      disabled\n    })\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    ref: ref,\n    value: currentValue,\n    min: min,\n    max: max,\n    disabled: disabled,\n    className: \"subscript-input\",\n    onChange: handleChange,\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"subscript-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, label));\n};\n\nexport default forwardRef(BlmSubscriptInput);","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/subscript-input/BlmSubscriptInput.tsx"],"names":["React","useState","useEffect","forwardRef","clsx","TYPYPING_INTERVAL","BlmSubscriptInput","props","ref","name","value","label","min","max","disabled","className","onChange","other","currentValue","setCurrentValue","shouldValidate","setShouldValidate","undefined","toString","timerId","setTimeout","validateValue","clearTimeout","newValue","Math","Number","target","handleChange","event","regex","valueStr","test","handleKeyDown","keyCode","handleBlur"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAQEC,UARF,QASO,OATP;AAUA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,OAAO,wBAAP;AAcA,MAAMC,iBAAiB,GAAG,IAA1B;;AAEA,MAAMC,iBAAwE,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC/F,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,GAAtB;AAA2BC,IAAAA,GAA3B;AAAgCC,IAAAA,QAAhC;AAA0CC,IAAAA,SAA1C;AAAqDC,IAAAA,QAArD;AAA+D,OAAGC;AAAlE,MAA4EV,KAAlF;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,KAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,eAAe,CAACT,KAAK,KAAKY,SAAV,GAAsBZ,KAAK,CAACa,QAAN,EAAtB,GAAyC,EAA1C,CAAf;AACD,GAFQ,EAEN,CAACb,KAAD,CAFM,CAAT;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,cAAJ,EAAoB;AAClB,YAAMI,OAAO,GAAGC,UAAU,CAACC,aAAD,EAAgBrB,iBAAhB,CAA1B;AAEA,aAAO,MAAM;AACXsB,QAAAA,YAAY,CAACH,OAAD,CAAZ;AACD,OAFD;AAGD;AACF,GARQ,CAAT;;AAUA,QAAME,aAAa,GAAG,MAAM;AAC1B,QAAI,CAACN,cAAL,EAAqB;AACnB;AACD;;AAED,QAAIQ,QAAQ,GAAGV,YAAf;;AAEA,QAAIU,QAAQ,KAAK,EAAjB,EAAqB;AACnB,UAAIhB,GAAG,KAAKU,SAAZ,EAAuB;AACrBM,QAAAA,QAAQ,GAAGC,IAAI,CAAChB,GAAL,CAASD,GAAT,EAAckB,MAAM,CAACF,QAAD,CAApB,EAAgCL,QAAhC,EAAX;AACD;;AACD,UAAIV,GAAG,KAAKS,SAAZ,EAAuB;AACrBM,QAAAA,QAAQ,GAAGC,IAAI,CAACjB,GAAL,CAASC,GAAT,EAAciB,MAAM,CAACF,QAAD,CAApB,EAAgCL,QAAhC,EAAX;AACD;;AAED,UAAIK,QAAQ,KAAKV,YAAjB,EAA+B;AAC7BC,QAAAA,eAAe,CAACS,QAAD,CAAf;AACD;;AAED,UAAIZ,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAAC;AACPe,UAAAA,MAAM,EAAE;AACNtB,YAAAA,IADM;AAENC,YAAAA,KAAK,EAAEoB,MAAM,CAACF,QAAD;AAFP;AADD,SAAD,CAAR;AAMD;AACF;;AAEDP,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GA9BD;;AAgCA,QAAMW,YAAY,GAAIC,KAAD,IAA0C;AAC7D,UAAMC,KAAK,GAAG,eAAd;AACA,QAAIC,QAAQ,GAAGF,KAAK,CAACF,MAAN,CAAarB,KAA5B;;AAEA,QAAIwB,KAAK,CAACE,IAAN,CAAWD,QAAX,CAAJ,EAA0B;AACxBhB,MAAAA,eAAe,CAACgB,QAAD,CAAf;AACAd,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF,GARD;;AAUA,QAAMgB,aAAa,GAAIJ,KAAD,IAA0B;AAC9C,QAAIA,KAAK,CAACK,OAAN,KAAkB,EAAtB,EAA0B;AACxBZ,MAAAA,aAAa;AACd;AACF,GAJD;;AAMA,QAAMa,UAAU,GAAIN,KAAD,IAAyC;AAC1DP,IAAAA,aAAa;AACd,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEtB,IAAI,CAAC,2BAAD,EAA8BW,SAA9B,EAAyC;AAAED,MAAAA;AAAF,KAAzC;AAApB,KAAgFG,KAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AACE,IAAA,GAAG,EAAET,GADP;AAEE,IAAA,KAAK,EAAEU,YAFT;AAGE,IAAA,GAAG,EAAEN,GAHP;AAIE,IAAA,GAAG,EAAEC,GAJP;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAME,IAAA,SAAS,EAAC,iBANZ;AAOE,IAAA,QAAQ,EAAEkB,YAPZ;AAQE,IAAA,SAAS,EAAEK,aARb;AASE,IAAA,MAAM,EAAEE,UATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAYE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiC5B,KAAjC,CAZF,CADF;AAgBD,CAvFD;;AAyFA,eAAeR,UAAU,CAACG,iBAAD,CAAzB","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  ChangeEvent,\r\n  HTMLAttributes,\r\n  FocusEvent,\r\n  KeyboardEvent,\r\n  ForwardRefRenderFunction,\r\n  forwardRef,\r\n} from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { CustomChangeEvent } from \"types\";\r\nimport \"./subscript-input.scss\";\r\n\r\nexport type SubscriptInputChangeEvent = CustomChangeEvent<number>;\r\n\r\ninterface CompProps extends Omit<HTMLAttributes<HTMLDivElement>, \"onChange\"> {\r\n  name: string;\r\n  label: string;\r\n  value?: number;\r\n  min?: number;\r\n  max?: number;\r\n  disabled?: boolean;\r\n  onChange?: (event: SubscriptInputChangeEvent) => void;\r\n}\r\n\r\nconst TYPYPING_INTERVAL = 3000;\r\n\r\nconst BlmSubscriptInput: ForwardRefRenderFunction<HTMLInputElement, CompProps> = (props, ref) => {\r\n  const { name, value, label, min, max, disabled, className, onChange, ...other } = props;\r\n  const [currentValue, setCurrentValue] = useState(\"\");\r\n  const [shouldValidate, setShouldValidate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setCurrentValue(value !== undefined ? value.toString() : \"\");\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (shouldValidate) {\r\n      const timerId = setTimeout(validateValue, TYPYPING_INTERVAL);\r\n\r\n      return () => {\r\n        clearTimeout(timerId);\r\n      };\r\n    }\r\n  });\r\n\r\n  const validateValue = () => {\r\n    if (!shouldValidate) {\r\n      return;\r\n    }\r\n\r\n    let newValue = currentValue;\r\n\r\n    if (newValue !== \"\") {\r\n      if (min !== undefined) {\r\n        newValue = Math.max(min, Number(newValue)).toString();\r\n      }\r\n      if (max !== undefined) {\r\n        newValue = Math.min(max, Number(newValue)).toString();\r\n      }\r\n\r\n      if (newValue !== currentValue) {\r\n        setCurrentValue(newValue);\r\n      }\r\n\r\n      if (onChange) {\r\n        onChange({\r\n          target: {\r\n            name,\r\n            value: Number(newValue),\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    setShouldValidate(false);\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const regex = /^$|^[0-9\\b]+$/;\r\n    let valueStr = event.target.value;\r\n\r\n    if (regex.test(valueStr)) {\r\n      setCurrentValue(valueStr);\r\n      setShouldValidate(true);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: KeyboardEvent) => {\r\n    if (event.keyCode === 13) {\r\n      validateValue();\r\n    }\r\n  };\r\n\r\n  const handleBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    validateValue();\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(\"subscript-input-container\", className, { disabled })} {...other}>\r\n      <input\r\n        ref={ref}\r\n        value={currentValue}\r\n        min={min}\r\n        max={max}\r\n        disabled={disabled}\r\n        className=\"subscript-input\"\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        onBlur={handleBlur}\r\n      />\r\n      <span className=\"subscript-lbl\">{label}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default forwardRef(BlmSubscriptInput);\r\n"]},"metadata":{},"sourceType":"module"}