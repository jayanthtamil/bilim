{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\shared\\\\numeric-select\\\\autocomplete\\\\BlmAutoComplete.tsx\";\nimport React, { Fragment } from \"react\";\nimport clsx from \"clsx\";\nimport { IconButton, Paper, Popper, Typography } from \"@material-ui/core\";\nimport { useAutocomplete } from \"@material-ui/lab\";\nimport { useStyles } from \"./styles\";\n\nfunction BlmAutoComplete(props) {\n  const {\n    freeSolo,\n    suffix,\n    disabled = false,\n    size = \"medium\",\n    openText = \"Open\",\n    closeText = \"Close\",\n    popupIcon,\n    forcePopupIcon,\n    fullWidth = false,\n    disablePortal = false,\n    className,\n    popupClassName,\n    renderInput,\n    renderOption: renderOptionProp,\n    getOptionLabel = x => x\n  } = props;\n  const {\n    id,\n    focused,\n    popupOpen,\n    anchorEl,\n    groupedOptions,\n    focusedTag,\n    inputValue,\n    setAnchorEl,\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getListboxProps,\n    getOptionProps,\n    getPopupIndicatorProps\n  } = useAutocomplete({ ...props,\n    componentName: \"Autocomplete\"\n  });\n  const classes = useStyles();\n  const renderOption = renderOptionProp || getOptionLabel;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: clsx(classes.root, {\n      [classes.focused]: focused,\n      [classes.fullWidth]: fullWidth,\n      [classes.hasPopupIcon]: hasPopupIcon\n    }, className)\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }), renderInput({\n    id,\n    disabled,\n    fullWidth: true,\n    size: size === \"small\" ? \"small\" : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: undefined,\n      endAdornment: /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, suffix ? /*#__PURE__*/React.createElement(Typography, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }\n      }, suffix) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, Object.assign({\n        disableRipple: true,\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, {\n          [classes.popupIndicatorOpen]: popupOpen\n        })\n      }, getPopupIndicatorProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }), popupIcon) : null)\n    },\n    inputProps: {\n      className: clsx(classes.input, {\n        [classes.inputFocused]: focusedTag === -1\n      }),\n      disabled,\n      ...getInputProps()\n    }\n  }), popupOpen && anchorEl && /*#__PURE__*/React.createElement(Popper, {\n    role: \"presentation\",\n    open: true,\n    anchorEl: anchorEl,\n    style: {\n      width: anchorEl.clientWidth + \"px\"\n    },\n    className: clsx(classes.popper, popupClassName, {\n      [classes.popperDisablePortal]: disablePortal\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, groupedOptions.length > 0 && /*#__PURE__*/React.createElement(\"ul\", Object.assign({\n    className: classes.listbox\n  }, getListboxProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }), groupedOptions.map((option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, optionProps, {\n      className: classes.option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }), renderOption(option, {\n      selected: optionProps[\"aria-selected\"],\n      inputValue\n    }));\n  })))));\n}\n\nexport default BlmAutoComplete;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/numeric-select/autocomplete/BlmAutoComplete.tsx"],"names":["React","Fragment","clsx","IconButton","Paper","Popper","Typography","useAutocomplete","useStyles","BlmAutoComplete","props","freeSolo","suffix","disabled","size","openText","closeText","popupIcon","forcePopupIcon","fullWidth","disablePortal","className","popupClassName","renderInput","renderOption","renderOptionProp","getOptionLabel","x","id","focused","popupOpen","anchorEl","groupedOptions","focusedTag","inputValue","setAnchorEl","getRootProps","getInputProps","getInputLabelProps","getListboxProps","getOptionProps","getPopupIndicatorProps","componentName","classes","hasPopupIcon","root","undefined","InputLabelProps","InputProps","ref","inputRoot","startAdornment","endAdornment","popupIndicator","popupIndicatorOpen","inputProps","input","inputFocused","width","clientWidth","popper","popperDisablePortal","paper","length","listbox","map","option","index","optionProps","selected"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { IconButton, Paper, Popper, Typography } from \"@material-ui/core\";\r\nimport { AutocompleteProps, useAutocomplete } from \"@material-ui/lab\";\r\n\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport interface CompProps<T>\r\n  extends AutocompleteProps<T, boolean | undefined, boolean | undefined, boolean | undefined> {\r\n  suffix?: string;\r\n  popupClassName?: string;\r\n}\r\n\r\nfunction BlmAutoComplete<T>(props: CompProps<T>) {\r\n  const {\r\n    freeSolo,\r\n    suffix,\r\n    disabled = false,\r\n    size = \"medium\",\r\n    openText = \"Open\",\r\n    closeText = \"Close\",\r\n    popupIcon,\r\n    forcePopupIcon,\r\n    fullWidth = false,\r\n    disablePortal = false,\r\n    className,\r\n    popupClassName,\r\n    renderInput,\r\n    renderOption: renderOptionProp,\r\n    getOptionLabel = (x) => x,\r\n  } = props;\r\n  const {\r\n    id,\r\n    focused,\r\n    popupOpen,\r\n    anchorEl,\r\n    groupedOptions,\r\n    focusedTag,\r\n    inputValue,\r\n    setAnchorEl,\r\n    getRootProps,\r\n    getInputProps,\r\n    getInputLabelProps,\r\n    getListboxProps,\r\n    getOptionProps,\r\n    getPopupIndicatorProps,\r\n  } = useAutocomplete({ ...props, componentName: \"Autocomplete\" });\r\n  const classes = useStyles();\r\n  const renderOption = renderOptionProp || getOptionLabel;\r\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        classes.root,\r\n        {\r\n          [classes.focused]: focused,\r\n          [classes.fullWidth]: fullWidth,\r\n          [classes.hasPopupIcon]: hasPopupIcon,\r\n        },\r\n        className\r\n      )}\r\n      {...getRootProps()}\r\n    >\r\n      {renderInput({\r\n        id,\r\n        disabled,\r\n        fullWidth: true,\r\n        size: size === \"small\" ? \"small\" : undefined,\r\n        InputLabelProps: getInputLabelProps(),\r\n        InputProps: {\r\n          ref: setAnchorEl,\r\n          className: classes.inputRoot,\r\n          startAdornment: undefined,\r\n          endAdornment: (\r\n            <Fragment>\r\n              {suffix ? <Typography>{suffix}</Typography> : null}\r\n              {hasPopupIcon ? (\r\n                <IconButton\r\n                  disableRipple={true}\r\n                  disabled={disabled}\r\n                  aria-label={popupOpen ? closeText : openText}\r\n                  title={popupOpen ? closeText : openText}\r\n                  className={clsx(classes.popupIndicator, {\r\n                    [classes.popupIndicatorOpen]: popupOpen,\r\n                  })}\r\n                  {...getPopupIndicatorProps()}\r\n                >\r\n                  {popupIcon}\r\n                </IconButton>\r\n              ) : null}\r\n            </Fragment>\r\n          ),\r\n        },\r\n        inputProps: {\r\n          className: clsx(classes.input, {\r\n            [classes.inputFocused]: focusedTag === -1,\r\n          }),\r\n          disabled,\r\n          ...getInputProps(),\r\n        },\r\n      })}\r\n      {popupOpen && anchorEl && (\r\n        <Popper\r\n          role=\"presentation\"\r\n          open={true}\r\n          anchorEl={anchorEl}\r\n          style={{\r\n            width: anchorEl.clientWidth + \"px\",\r\n          }}\r\n          className={clsx(classes.popper, popupClassName, {\r\n            [classes.popperDisablePortal]: disablePortal,\r\n          })}\r\n        >\r\n          <Paper className={classes.paper}>\r\n            {groupedOptions.length > 0 && (\r\n              <ul className={classes.listbox} {...getListboxProps()}>\r\n                {groupedOptions.map((option, index) => {\r\n                  const optionProps = getOptionProps({ option, index }) as any;\r\n\r\n                  return (\r\n                    <li {...optionProps} className={classes.option}>\r\n                      {renderOption(option, {\r\n                        selected: optionProps[\"aria-selected\"],\r\n                        inputValue,\r\n                      })}\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            )}\r\n          </Paper>\r\n        </Popper>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmAutoComplete;\r\n"]},"metadata":{},"sourceType":"module"}