{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\background-media\\\\BlmBackgroundMedia.tsx\";\nimport React, { Fragment, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { Checkbox, FormControlLabel, Select, MenuItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { CoverOptionIcon, ContainOptionIcon, NoResizeOptionIcon } from \"assets/icons\";\nimport { AcceptedFileTypes, BackgroundOptionTypes, MediaTypes, ImageDisplayTypes } from \"editor-constants\";\nimport { isVideo, isImage } from \"utils\";\nimport { BlmToggleButton, BlmSubscriptInput, BlmTintPicker } from \"shared\";\nimport BlmMediaPicker from \"../media-picker\";\nimport { createItems, getDefaultOption, getOptions, getOptions2 } from \"./utils\";\nimport { BlmPosition } from \"shared\";\nimport \"./styles.scss\";\n\nfunction BlmBackgroundMedia(props) {\n  const {\n    name,\n    elementId,\n    type,\n    data,\n    bgColors,\n    onChange\n  } = props;\n  const {\n    main,\n    webm,\n    image,\n    option,\n    optionValue,\n    option2,\n    option3,\n    restore,\n    tint,\n    position\n  } = data;\n  const [mediaType, setMediaType] = useState(MediaTypes.Main);\n  const hasMedia = Boolean(main);\n  const hasVideo = main ? isVideo(main.type) : false;\n  const isMedia = main ? isImage(main.type) : false;\n  const showOptions = hasMedia;\n  const showOptions3 = hasMedia && (type === \"partpage\" || type === \"screen\");\n  const showOptions2 = !hasVideo && (type === \"page\" || type === \"page-action\");\n  const currentMedia = data[mediaType];\n  const options = getOptions(type, hasVideo);\n  const currentOption = getDefaultOption(options, option);\n  const options2 = getOptions2(currentOption);\n  const currentOption2 = getDefaultOption(options2, option2);\n  const {\n    t\n  } = useTranslation(\"shared\");\n\n  const updateChange = newData => {\n    if (onChange) {\n      onChange({\n        target: {\n          name,\n          value: newData\n        }\n      });\n    }\n  };\n\n  const handleTypeChange = event => {\n    const target = event.target;\n    const {\n      name\n    } = target;\n    setMediaType(name);\n  };\n\n  const handleChange = event => {\n    const {\n      target\n    } = event;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const newData = { ...data\n    };\n\n    if (name === mediaType) {\n      const newMedia = value;\n      newData[name] = newMedia;\n\n      if (name === MediaTypes.Main) {\n        newData.option = getDefaultOption(options, newData.option);\n        newData.option2 = getDefaultOption(getOptions2(newData.option), newData.option2);\n      }\n    } else if (name === \"tint\") {\n      newData.tint = value;\n    } else if (name === \"option\" || name === \"option2\" || name === \"option3\" || name === \"restore\") {\n      newData[name] = value;\n\n      if (name === \"option\") {\n        newData.option2 = getDefaultOption(getOptions2(newData.option), newData.option2);\n      }\n    } else if (name === \"parallax\" || name === \"loop\") {\n      newData.optionValue = value;\n\n      if (name === \"loop\") {\n        newData.option = getDefaultOption(options, newData.option);\n      }\n    } else if (name === \"position\") {\n      newData[name] = value;\n    }\n\n    updateChange(newData);\n  };\n\n  const getAcceptedTypes = () => {\n    if (mediaType === MediaTypes.Image) {\n      return [AcceptedFileTypes.Image];\n    } else if (mediaType === MediaTypes.Webm) {\n      return [AcceptedFileTypes.Webm];\n    } else {\n      return [AcceptedFileTypes.Image, AcceptedFileTypes.Video];\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"background-media-wrapper\", type, {\n      \"has-media\": hasMedia,\n      \"has-video\": hasVideo\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"background-media-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, currentMedia ? currentMedia.name : \"Media\"), /*#__PURE__*/React.createElement(BlmMediaPicker, {\n    name: mediaType,\n    elementId: elementId,\n    acceptedFiles: getAcceptedTypes(),\n    data: currentMedia,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BlmTintPicker, {\n    title: t(\"label.tint\"),\n    data: tint,\n    colors: bgColors,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }), hasVideo && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"background-video-btns-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: MediaTypes.Main,\n    selected: hasMedia,\n    className: \"mp4-toggle-btn\",\n    onChange: handleTypeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: MediaTypes.Webm,\n    selected: Boolean(webm),\n    className: \"webm-toggle-btn\",\n    onChange: handleTypeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: MediaTypes.Image,\n    selected: Boolean(image),\n    className: \"img-toggle-btn\",\n    onChange: handleTypeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }), currentOption === BackgroundOptionTypes.Autoplay && /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"loop\",\n    label: t(\"background_media.loop\"),\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      className: \"checkbox-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 24\n      }\n    }),\n    checked: Boolean(optionValue),\n    className: \"background-video-loop-ctrl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  })), showOptions && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"background-dropdown-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"option\",\n    value: currentOption,\n    className: \"bg-option-dropdown\",\n    MenuProps: {\n      className: \"bg-option-dropdown-menu\",\n      disableRestoreFocus: true //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\n\n    },\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, createItems(options, !hasVideo)), currentOption === BackgroundOptionTypes.Parallax && /*#__PURE__*/React.createElement(BlmSubscriptInput, {\n    name: \"parallax\",\n    label: \"px\",\n    min: 0,\n    max: 1000,\n    value: Number(optionValue),\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  })), showOptions3 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"background-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, isMedia && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"option3\",\n    value: option3,\n    MenuProps: {\n      className: \"background-image-params-dropdown-menu\",\n      disableRestoreFocus: true //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\n\n    },\n    className: \"background-image-params-dropdown\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: ImageDisplayTypes.Cover,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(CoverOptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 23\n    }\n  }, t(\"list.cover\"))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: ImageDisplayTypes.Contain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(ContainOptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 23\n    }\n  }, t(\"list.contain\"))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: ImageDisplayTypes.NoResize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(NoResizeOptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 23\n    }\n  }, t(\"list.no_resize\"))))), /*#__PURE__*/React.createElement(BlmPosition, {\n    name: \"position\",\n    media: \"background-media-item\",\n    value: position,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  })), showOptions2 && /*#__PURE__*/React.createElement(Select, {\n    name: \"option2\",\n    value: currentOption2,\n    className: \"bg-option-2-dropdown\",\n    MenuProps: {\n      className: \"bg-option-2-dropdown-menu\",\n      disableRestoreFocus: true //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\n\n    },\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, createItems(options2, false)), type === \"page-action\" && /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"restore\",\n    label: t(\"background_media.restore\"),\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 24\n      }\n    }),\n    checked: restore,\n    className: \"background-restore-ctrl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default BlmBackgroundMedia;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/background-media/BlmBackgroundMedia.tsx"],"names":["React","Fragment","useState","clsx","Checkbox","FormControlLabel","Select","MenuItem","ListItemIcon","ListItemText","useTranslation","CoverOptionIcon","ContainOptionIcon","NoResizeOptionIcon","AcceptedFileTypes","BackgroundOptionTypes","MediaTypes","ImageDisplayTypes","isVideo","isImage","BlmToggleButton","BlmSubscriptInput","BlmTintPicker","BlmMediaPicker","createItems","getDefaultOption","getOptions","getOptions2","BlmPosition","BlmBackgroundMedia","props","name","elementId","type","data","bgColors","onChange","main","webm","image","option","optionValue","option2","option3","restore","tint","position","mediaType","setMediaType","Main","hasMedia","Boolean","hasVideo","isMedia","showOptions","showOptions3","showOptions2","currentMedia","options","currentOption","options2","currentOption2","t","updateChange","newData","target","value","handleTypeChange","event","handleChange","checked","newMedia","getAcceptedTypes","Image","Webm","Video","Autoplay","className","disableRestoreFocus","Parallax","Number","Cover","Contain","NoResize"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Fragment, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Select,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CoverOptionIcon, ContainOptionIcon, NoResizeOptionIcon } from \"assets/icons\";\r\nimport { BackgroundMedia, CustomChangeEvent, MediaFile, Tint } from \"types\";\r\nimport {\r\n  AcceptedFileTypes,\r\n  BackgroundOptionTypes,\r\n  MediaTypes,\r\n  ImageDisplayTypes,\r\n  Positions,\r\n  MediaBackgroundPosition,\r\n  MediaPosition,\r\n} from \"editor-constants\";\r\nimport { isVideo, isImage } from \"utils\";\r\nimport { BlmToggleButton, BlmSubscriptInput, BlmTintPicker } from \"shared\";\r\nimport BlmMediaPicker from \"../media-picker\";\r\nimport { createItems, getDefaultOption, getOptions, getOptions2 } from \"./utils\";\r\nimport { ContainerProps } from \"./container\";\r\nimport { BlmPosition } from \"shared\";\r\nimport \"./styles.scss\";\r\n\r\nexport type BGMediaDisplayTypes = \"page\" | \"page-action\" | \"screen\" | \"partpage\";\r\nexport type BackgroundMediaChangeEvent = CustomChangeEvent<BackgroundMedia>;\r\n\r\nexport interface CompProps extends ContainerProps {\r\n  name: string;\r\n  elementId: string;\r\n  type: BGMediaDisplayTypes;\r\n  data: BackgroundMedia;\r\n  onChange: (event: BackgroundMediaChangeEvent) => void;\r\n}\r\n\r\nfunction BlmBackgroundMedia(props: CompProps) {\r\n  const { name, elementId, type, data, bgColors, onChange } = props;\r\n    const { main, webm, image, option, optionValue, option2, option3, restore, tint, position } =\r\n    data;\r\n  const [mediaType, setMediaType] = useState(MediaTypes.Main);\r\n  const hasMedia = Boolean(main);\r\n  const hasVideo = main ? isVideo(main.type) : false;\r\n  const isMedia = main ? isImage(main.type) : false;\r\n  const showOptions = hasMedia ;\r\n  const showOptions3 = hasMedia && (type === \"partpage\" || type === \"screen\");\r\n  const showOptions2 = !hasVideo && (type === \"page\" || type === \"page-action\");\r\n  const currentMedia = data[mediaType];\r\n  const options = getOptions(type, hasVideo);\r\n  const currentOption = getDefaultOption(options, option);\r\n  const options2 = getOptions2(currentOption);\r\n  const currentOption2 = getDefaultOption(options2, option2);\r\n  const { t } = useTranslation(\"shared\");\r\n  \r\n  const updateChange = (newData: BackgroundMedia) => {\r\n    if (onChange) {\r\n      onChange({ target: { name, value: newData } });\r\n    }\r\n  };\r\n\r\n  const handleTypeChange = (event: CustomChangeEvent<boolean>) => {\r\n    const target = event.target;\r\n    const { name } = target;\r\n\r\n    setMediaType(name as MediaTypes);\r\n  };\r\n\r\n  const handleChange = (\r\n    event:\r\n      | ChangeEvent<any>\r\n      | CustomChangeEvent<\r\n          | MediaFile\r\n          | Tint\r\n          | number\r\n          | undefined\r\n          | MediaBackgroundPosition\r\n          | MediaPosition\r\n          | Positions\r\n        >\r\n  ) => {\r\n    const { target } = event;\r\n    const name = target.name as string;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const newData: BackgroundMedia = { ...data };\r\n\r\n    if (name === mediaType) {\r\n      const newMedia = value as MediaFile;\r\n\r\n      newData[name as MediaTypes] = newMedia;\r\n\r\n      if (name === MediaTypes.Main) {\r\n        newData.option = getDefaultOption(options, newData.option);\r\n        newData.option2 = getDefaultOption(getOptions2(newData.option), newData.option2);\r\n      }\r\n    } else if (name === \"tint\") {\r\n      newData.tint = value as Tint;\r\n    } else if (\r\n      name === \"option\" ||\r\n      name === \"option2\" ||\r\n      name === \"option3\" ||\r\n      name === \"restore\"\r\n    ) {\r\n      (newData[name] as any) = value;\r\n\r\n      if (name === \"option\") {\r\n        newData.option2 = getDefaultOption(getOptions2(newData.option), newData.option2);\r\n      }\r\n    } else if (name === \"parallax\" || name === \"loop\") {\r\n      newData.optionValue = value;\r\n      if (name === \"loop\") {\r\n        newData.option = getDefaultOption(options, newData.option);\r\n      }\r\n    } else if (name === \"position\") {\r\n      newData[name] = value;\r\n    }\r\n    updateChange(newData);\r\n  };\r\n\r\n  const getAcceptedTypes = () => {\r\n    if (mediaType === MediaTypes.Image) {\r\n      return [AcceptedFileTypes.Image];\r\n    } else if (mediaType === MediaTypes.Webm) {\r\n      return [AcceptedFileTypes.Webm];\r\n    } else {\r\n      return [AcceptedFileTypes.Image, AcceptedFileTypes.Video];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\"background-media-wrapper\", type, {\r\n        \"has-media\": hasMedia,\r\n        \"has-video\": hasVideo,\r\n      })}\r\n    >\r\n      <span className=\"background-media-title\">{currentMedia ? currentMedia.name : \"Media\"}</span>\r\n      <BlmMediaPicker\r\n        name={mediaType}\r\n        elementId={elementId}\r\n        acceptedFiles={getAcceptedTypes()}\r\n        data={currentMedia}\r\n        onChange={handleChange}\r\n      />\r\n      <BlmTintPicker\r\n        title={t(\"label.tint\")}\r\n        data={tint}\r\n        colors={bgColors}\r\n        onChange={handleChange}\r\n      />\r\n      {hasVideo && (\r\n        <div className=\"background-video-btns-wrapper\">\r\n          <BlmToggleButton\r\n            name={MediaTypes.Main}\r\n            selected={hasMedia}\r\n            className=\"mp4-toggle-btn\"\r\n            onChange={handleTypeChange}\r\n          />\r\n          <BlmToggleButton\r\n            name={MediaTypes.Webm}\r\n            selected={Boolean(webm)}\r\n            className=\"webm-toggle-btn\"\r\n            onChange={handleTypeChange}\r\n          />\r\n          <BlmToggleButton\r\n            name={MediaTypes.Image}\r\n            selected={Boolean(image)}\r\n            className=\"img-toggle-btn\"\r\n            onChange={handleTypeChange}\r\n          />\r\n          {currentOption === BackgroundOptionTypes.Autoplay && (\r\n            <FormControlLabel\r\n              name=\"loop\"\r\n              label={t(\"background_media.loop\")}\r\n              control={<Checkbox className=\"checkbox-2\" />}\r\n              checked={Boolean(optionValue)}\r\n              className=\"background-video-loop-ctrl\"\r\n              onChange={handleChange}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n      {showOptions && (\r\n        <Fragment>\r\n          <div className=\"background-dropdown-wrapper\">\r\n            <Select\r\n              name=\"option\"\r\n              value={currentOption}\r\n              className=\"bg-option-dropdown\"\r\n              MenuProps={{\r\n                className: \"bg-option-dropdown-menu\",\r\n                disableRestoreFocus: true, //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\r\n              }}\r\n              onChange={handleChange}\r\n            >\r\n              {createItems(options, !hasVideo)}\r\n            </Select>\r\n            {currentOption === BackgroundOptionTypes.Parallax && (\r\n              <BlmSubscriptInput\r\n                name=\"parallax\"\r\n                label=\"px\"\r\n                min={0}\r\n                max={1000}\r\n                value={Number(optionValue)}\r\n                onChange={handleChange}\r\n              />\r\n            )}\r\n          </div>\r\n\r\n          {showOptions3 && (\r\n            <div className=\"background-options\">\r\n              {isMedia && (\r\n                <Fragment>\r\n                  <Select\r\n                    name=\"option3\"\r\n                    value={option3}\r\n                    MenuProps={{\r\n                      className: \"background-image-params-dropdown-menu\",\r\n                      disableRestoreFocus: true, //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\r\n                    }}\r\n                    className=\"background-image-params-dropdown\"\r\n                    onChange={handleChange}\r\n                  >\r\n                    <MenuItem value={ImageDisplayTypes.Cover}>\r\n                      <ListItemIcon>\r\n                        <CoverOptionIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText>{t(\"list.cover\")}</ListItemText>\r\n                    </MenuItem>\r\n                    <MenuItem value={ImageDisplayTypes.Contain}>\r\n                      <ListItemIcon>\r\n                        <ContainOptionIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText>{t(\"list.contain\")}</ListItemText>\r\n                    </MenuItem>\r\n                    <MenuItem value={ImageDisplayTypes.NoResize}>\r\n                      <ListItemIcon>\r\n                        <NoResizeOptionIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText>{t(\"list.no_resize\")}</ListItemText>\r\n                    </MenuItem>\r\n                  </Select>\r\n                </Fragment>\r\n              )}\r\n              <BlmPosition\r\n                name=\"position\"\r\n                media=\"background-media-item\"\r\n                value={position}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {showOptions2 && (\r\n            <Select\r\n              name=\"option2\"\r\n              value={currentOption2}\r\n              className=\"bg-option-2-dropdown\"\r\n              MenuProps={{\r\n                className: \"bg-option-2-dropdown-menu\",\r\n                disableRestoreFocus: true, //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\r\n              }}\r\n              onChange={handleChange}\r\n            >\r\n              {createItems(options2, false)}\r\n            </Select>\r\n          )}\r\n          {type === \"page-action\" && (\r\n            <FormControlLabel\r\n              name=\"restore\"\r\n              label={t(\"background_media.restore\")}\r\n              control={<Checkbox />}\r\n              checked={restore}\r\n              className=\"background-restore-ctrl\"\r\n              onChange={handleChange}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmBackgroundMedia;\r\n"]},"metadata":{},"sourceType":"module"}