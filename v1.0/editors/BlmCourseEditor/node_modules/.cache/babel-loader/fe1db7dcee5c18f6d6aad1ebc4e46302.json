{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\media\\\\image\\\\BlmMediaImage.tsx\";\nimport React, { Fragment } from \"react\";\nimport { Checkbox, FormControlLabel, ListItemIcon, ListItemText, MenuItem, Select } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { AcceptedFileTypes, StyleListTypes, ImageDisplayTypes } from \"editor-constants\";\nimport { CoverOptionIcon, ParallaxOptionIcon, ContainOptionIcon, NoResizeOptionIcon } from \"assets/icons\";\nimport { getMediaImage } from \"utils\";\nimport { BlmMediaPicker } from \"components/shared\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport { updateMediaComponent } from \"components/content-editor/reducers\";\nimport { BlmStyleTintPicker } from \"../../styles\";\nimport BlmMediaDashboard from \"../dashboard\";\nimport { BlmPosition } from \"shared\";\nimport \"./styles.scss\";\n\nfunction BlmMediaImage(props) {\n  const {\n    data\n  } = props;\n  const state = getMediaImage(data);\n  const {\n    element,\n    dispatch\n  } = useContentEditorCtx();\n  const {\n    value: image,\n    hasApplyStyle\n  } = state;\n  const {\n    media,\n    title,\n    description,\n    caption,\n    option,\n    isZoom,\n    style,\n    position\n  } = image;\n  const {\n    t\n  } = useTranslation(\"content-editor\");\n\n  const updateChange = newImage => {\n    const newData = { ...state,\n      value: newImage\n    };\n\n    if (dispatch) {\n      dispatch(updateMediaComponent(newData));\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value,\n      checked\n    } = event.target;\n    const newImage = { ...image\n    };\n\n    if (name === \"media\" || name === \"title\" || name === \"description\" || name === \"caption\" || name === \"option\" || name === \"style\") {\n      newImage[name] = value;\n    } else if (name === \"zoom\") {\n      newImage.isZoom = checked;\n    } else if (name === \"position\") {\n      newImage[name] = value;\n    }\n\n    if (newImage.media === undefined) {\n      newImage.style.bgTint = undefined;\n      newImage.style.tint = undefined;\n    }\n\n    updateChange(newImage);\n  };\n\n  return /*#__PURE__*/React.createElement(BlmMediaDashboard, {\n    data: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-media-image-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-params-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-params-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, t(\"title.parameters\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-params-left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BlmMediaPicker, {\n    name: \"media\",\n    elementId: element.id,\n    acceptedFiles: [AcceptedFileTypes.Image],\n    data: media,\n    placeholder: \"Select media\",\n    className: \"media-picker-3\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }), media && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"option\",\n    value: option,\n    MenuProps: {\n      className: \"image-params-dropdown-menu\",\n      disableRestoreFocus: true //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\n\n    },\n    className: \"image-params-dropdown\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: ImageDisplayTypes.Cover,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CoverOptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, t(\"list.cover\"))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: ImageDisplayTypes.Parallax,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ParallaxOptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, t(\"list.parallax\"))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: ImageDisplayTypes.Contain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ContainOptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, t(\"list.contain\"))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: ImageDisplayTypes.NoResize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(NoResizeOptionIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, t(\"list.no_resize\")))), /*#__PURE__*/React.createElement(BlmPosition, {\n    name: \"position\",\n    media: \"media-item\",\n    value: position,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"zoom\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      className: \"switch-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 28\n      }\n    }),\n    checked: isZoom,\n    label: t(\"image.zoom_on_click\"),\n    className: \"image-params-zoom-ctrl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-params-right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    placeholder: t(\"label.title\"),\n    value: title,\n    className: \"image-params-title-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"description\",\n    placeholder: t(\"label.description\"),\n    value: description.replace(/(<([^>]+)>)/gi, \"\"),\n    className: \"image-params-desc-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"caption\",\n    placeholder: t(\"label.caption\"),\n    value: caption,\n    className: \"image-params-caption-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }))), media && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-styles-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-styles-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, t(\"title.style\")), /*#__PURE__*/React.createElement(BlmStyleTintPicker, {\n    type: StyleListTypes.MediaImage,\n    name: \"style\",\n    data: style,\n    showBgTint: true,\n    label: t(\"image.apply_image\"),\n    showApplyStyle: hasApplyStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default BlmMediaImage;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/media/image/BlmMediaImage.tsx"],"names":["React","Fragment","Checkbox","FormControlLabel","ListItemIcon","ListItemText","MenuItem","Select","useTranslation","AcceptedFileTypes","StyleListTypes","ImageDisplayTypes","CoverOptionIcon","ParallaxOptionIcon","ContainOptionIcon","NoResizeOptionIcon","getMediaImage","BlmMediaPicker","useContentEditorCtx","updateMediaComponent","BlmStyleTintPicker","BlmMediaDashboard","BlmPosition","BlmMediaImage","props","data","state","element","dispatch","value","image","hasApplyStyle","media","title","description","caption","option","isZoom","style","position","t","updateChange","newImage","newData","handleChange","event","name","checked","target","undefined","bgTint","tint","id","Image","className","disableRestoreFocus","Cover","Parallax","Contain","NoResize","replace","MediaImage"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Fragment } from \"react\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { ComponentStyle, CustomChangeEvent, MediaComponent, MediaFile, MediaImage } from \"types\";\r\nimport {\r\n  AcceptedFileTypes,\r\n  StyleListTypes,\r\n  ImageDisplayTypes,\r\n  Positions,\r\n  MediaPosition,\r\n  MediaBackgroundPosition,\r\n} from \"editor-constants\";\r\nimport {\r\n  CoverOptionIcon,\r\n  ParallaxOptionIcon,\r\n  ContainOptionIcon,\r\n  NoResizeOptionIcon,\r\n} from \"assets/icons\";\r\nimport { getMediaImage } from \"utils\";\r\nimport { BlmMediaPicker } from \"components/shared\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport { updateMediaComponent } from \"components/content-editor/reducers\";\r\nimport { BlmStyleTintPicker } from \"../../styles\";\r\nimport BlmMediaDashboard from \"../dashboard\";\r\nimport { BlmPosition } from \"shared\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  label: string;\r\n  data: MediaComponent;\r\n}\r\n\r\nfunction BlmMediaImage(props: CompProps) {\r\n  const { data } = props;\r\n  const state = getMediaImage(data);\r\n  const { element, dispatch } = useContentEditorCtx();\r\n  const { value: image, hasApplyStyle } = state;\r\n  const { media, title, description, caption, option, isZoom, style, position } = image;\r\n  const { t } = useTranslation(\"content-editor\");\r\n\r\n  const updateChange = (newImage: MediaImage) => {\r\n    const newData = { ...state, value: newImage };\r\n\r\n    if (dispatch) {\r\n      dispatch(updateMediaComponent(newData));\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event:\r\n      | ChangeEvent<any>\r\n      | CustomChangeEvent<\r\n          | MediaFile\r\n          | MediaPosition\r\n          | Positions\r\n          | MediaBackgroundPosition\r\n          | ComponentStyle\r\n          | undefined\r\n        >\r\n  ) => {\r\n    const {\r\n      name,\r\n      value,\r\n      checked,\r\n    }: {\r\n      name: string;\r\n      value: any;\r\n      checked: boolean;\r\n    } = event.target;\r\n    const newImage = { ...image };\r\n\r\n    if (\r\n      name === \"media\" ||\r\n      name === \"title\" ||\r\n      name === \"description\" ||\r\n      name === \"caption\" ||\r\n      name === \"option\" ||\r\n      name === \"style\"\r\n    ) {\r\n      newImage[name] = value;\r\n    } else if (name === \"zoom\") {\r\n      newImage.isZoom = checked;\r\n    } else if (name === \"position\") {\r\n      newImage[name] = value;\r\n    }\r\n\r\n    if (newImage.media === undefined) {\r\n      newImage.style.bgTint = undefined;\r\n      newImage.style.tint = undefined;\r\n    }\r\n\r\n    updateChange(newImage);\r\n  };\r\n\r\n  return (\r\n    <BlmMediaDashboard data={state}>\r\n      <div className=\"content-media-image-wrapper\">\r\n        <div className=\"image-params-wrapper\">\r\n          <div className=\"image-params-title\">{t(\"title.parameters\")}</div>\r\n          <div className=\"image-params-left-box\">\r\n            <BlmMediaPicker\r\n              name=\"media\"\r\n              elementId={element!.id}\r\n              acceptedFiles={[AcceptedFileTypes.Image]}\r\n              data={media}\r\n              placeholder=\"Select media\"\r\n              className=\"media-picker-3\"\r\n              onChange={handleChange}\r\n            />\r\n            {media && (\r\n              <Fragment>\r\n                <Select\r\n                  name=\"option\"\r\n                  value={option}\r\n                  MenuProps={{\r\n                    className: \"image-params-dropdown-menu\",\r\n                    disableRestoreFocus: true, //If It is false, BlmBackgroundEditor is not positioned to anchor element after choosing the item\r\n                  }}\r\n                  className=\"image-params-dropdown\"\r\n                  onChange={handleChange}\r\n                >\r\n                  <MenuItem value={ImageDisplayTypes.Cover}>\r\n                    <ListItemIcon>\r\n                      <CoverOptionIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText>{t(\"list.cover\")}</ListItemText>\r\n                  </MenuItem>\r\n                  <MenuItem value={ImageDisplayTypes.Parallax}>\r\n                    <ListItemIcon>\r\n                      <ParallaxOptionIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText>{t(\"list.parallax\")}</ListItemText>\r\n                  </MenuItem>\r\n                  <MenuItem value={ImageDisplayTypes.Contain}>\r\n                    <ListItemIcon>\r\n                      <ContainOptionIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText>{t(\"list.contain\")}</ListItemText>\r\n                  </MenuItem>\r\n                  <MenuItem value={ImageDisplayTypes.NoResize}>\r\n                    <ListItemIcon>\r\n                      <NoResizeOptionIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText>{t(\"list.no_resize\")}</ListItemText>\r\n                  </MenuItem>\r\n                </Select>\r\n                <BlmPosition\r\n                  name=\"position\"\r\n                  media=\"media-item\"\r\n                  value={position}\r\n                  onChange={handleChange}\r\n                />\r\n                <FormControlLabel\r\n                  name=\"zoom\"\r\n                  control={<Checkbox className=\"switch-2\" />}\r\n                  checked={isZoom}\r\n                  label={t(\"image.zoom_on_click\")}\r\n                  className=\"image-params-zoom-ctrl\"\r\n                  onChange={handleChange}\r\n                />\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n          <div className=\"image-params-right-box\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              placeholder={t(\"label.title\")}\r\n              value={title}\r\n              className=\"image-params-title-txt\"\r\n              onChange={handleChange}\r\n            />\r\n            <textarea\r\n              name=\"description\"\r\n              placeholder={t(\"label.description\")}\r\n              value={description.replace(/(<([^>]+)>)/gi, \"\")}\r\n              className=\"image-params-desc-txt\"\r\n              onChange={handleChange}\r\n            />\r\n            <textarea\r\n              name=\"caption\"\r\n              placeholder={t(\"label.caption\")}\r\n              value={caption}\r\n              className=\"image-params-caption-txt\"\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        {media && (\r\n          <div className=\"image-styles-wrapper\">\r\n            <div className=\"image-styles-title\">{t(\"title.style\")}</div>\r\n            <BlmStyleTintPicker\r\n              type={StyleListTypes.MediaImage}\r\n              name=\"style\"\r\n              data={style}\r\n              showBgTint={true}\r\n              label={t(\"image.apply_image\")}\r\n              showApplyStyle={hasApplyStyle}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </BlmMediaDashboard>\r\n  );\r\n}\r\n\r\nexport default BlmMediaImage;\r\n"]},"metadata":{},"sourceType":"module"}