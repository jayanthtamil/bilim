{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\template-editors\\\\controls\\\\actions\\\\background-sound\\\\BlmBackgroundSoundAction.tsx\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { BlmMediaPickerEditor } from \"components/shared\";\nimport { AcceptedFileTypes } from \"editor-constants\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction BlmBackgroundSoundAction(props) {\n  const {\n    name,\n    element,\n    data,\n    onChange\n  } = props;\n  const {\n    checked = false,\n    backgroundsounds,\n    unChecked = false\n  } = data || {};\n  const {\n    t\n  } = useTranslation(\"template-editors\");\n\n  const updateChange = newData => {\n    if (onChange) {\n      onChange({\n        target: {\n          name,\n          value: newData\n        }\n      });\n    }\n  };\n\n  const handleChange = event => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const newData = { ...data,\n      checked,\n      unChecked\n    };\n\n    if (name === \"backgroundsounds\") {\n      if (value && !value.subtitle) {\n        var _newData$backgroundso;\n\n        value.subtitle = (_newData$backgroundso = newData.backgroundsounds) === null || _newData$backgroundso === void 0 ? void 0 : _newData$backgroundso.subtitle;\n      }\n\n      if (value && !value.marker) {\n        var _newData$backgroundso2;\n\n        value.marker = (_newData$backgroundso2 = newData.backgroundsounds) === null || _newData$backgroundso2 === void 0 ? void 0 : _newData$backgroundso2.marker;\n      }\n\n      newData[name] = value;\n    } else if (name === \"checked\") {\n      newData[name] = value;\n    } else if (name === \"unChecked\") {\n      newData[\"unChecked\"] = value;\n    }\n\n    updateChange(newData);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"template-sound-action-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"checked\",\n    label: t(\"sound_action.play\"),\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 18\n      }\n    }),\n    checked: checked,\n    className: unChecked === true ? \"template-sound-frm-lbl-disable\" : \"template-sound-frm-lbl\",\n    onChange: handleChange,\n    disabled: unChecked === true ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"unChecked\",\n    label: t(\"sound_action.stop\"),\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 18\n      }\n    }),\n    checked: unChecked,\n    className: checked === true ? \"template-sound-frm-lbls-disable\" : \"template-sound-frm-lbls\",\n    onChange: handleChange,\n    disabled: checked === true ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), checked && /*#__PURE__*/React.createElement(BlmMediaPickerEditor, {\n    name: \"backgroundsounds\",\n    elementId: element.id,\n    acceptedFiles: [AcceptedFileTypes.Audio],\n    data: backgroundsounds,\n    placeholder: t(\"sound_action.select_media\"),\n    className: \"template-sound-picker\",\n    onChange: handleChange,\n    showDesign: \"showDesign\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default BlmBackgroundSoundAction;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/template-editors/controls/actions/background-sound/BlmBackgroundSoundAction.tsx"],"names":["Checkbox","FormControlLabel","BlmMediaPickerEditor","AcceptedFileTypes","React","useTranslation","BlmBackgroundSoundAction","props","name","element","data","onChange","checked","backgroundsounds","unChecked","t","updateChange","newData","target","value","handleChange","event","type","subtitle","marker","id","Audio"],"mappings":"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","sourcesContent":["import { Checkbox, FormControlLabel } from \"@material-ui/core\";\r\nimport { BlmMediaPickerEditor, MediaPickerChangeEvent } from \"components/shared\";\r\nimport { AcceptedFileTypes } from \"editor-constants\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  CourseElement,\r\n  CustomChangeEvent,\r\n  TemplateBackgroundSoundAction,\r\n  TemplateSoundAction,\r\n} from \"types\";\r\n\r\nexport interface CompProps {\r\n  name: string;\r\n  element: CourseElement;\r\n  data?: TemplateBackgroundSoundAction;\r\n  onChange?: (event: CustomChangeEvent<TemplateSoundAction>) => void;\r\n}\r\n\r\nfunction BlmBackgroundSoundAction(props: CompProps) {\r\n  const { name, element, data, onChange } = props;\r\n  const { checked = false, backgroundsounds, unChecked = false } = data || {};\r\n  const { t } = useTranslation(\"template-editors\");\r\n  const updateChange = (newData: TemplateBackgroundSoundAction) => {\r\n    if (onChange) {\r\n      onChange({ target: { name, value: newData } });\r\n    }\r\n  };\r\n  const handleChange = (event: ChangeEvent<any> | MediaPickerChangeEvent) => {\r\n    const target = event.target;\r\n    const name: string = target.name;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const newData: TemplateBackgroundSoundAction = { ...data, checked, unChecked };\r\n\r\n    if (name === \"backgroundsounds\") {\r\n      if (value && !value.subtitle) {\r\n        value.subtitle = newData.backgroundsounds?.subtitle;\r\n      }\r\n      if (value && !value.marker) {\r\n        value.marker = newData.backgroundsounds?.marker;\r\n      }\r\n      newData[name] = value;\r\n    } else if (name === \"checked\") {\r\n      newData[name] = value;\r\n    } else if (name === \"unChecked\") {\r\n      newData[\"unChecked\"] = value;\r\n    }\r\n    updateChange(newData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"template-sound-action-wrapper\">\r\n      <FormControlLabel\r\n        name=\"checked\"\r\n        label={t(\"sound_action.play\")}\r\n        control={<Checkbox />}\r\n        checked={checked}\r\n        className={unChecked === true ? \"template-sound-frm-lbl-disable\" : \"template-sound-frm-lbl\"}\r\n        onChange={handleChange}\r\n        disabled={unChecked === true ? true : false}\r\n      />\r\n      <FormControlLabel\r\n        name=\"unChecked\"\r\n        label={t(\"sound_action.stop\")}\r\n        control={<Checkbox />}\r\n        checked={unChecked}\r\n        className={checked === true ? \"template-sound-frm-lbls-disable\" : \"template-sound-frm-lbls\"}\r\n        onChange={handleChange}\r\n        disabled={checked === true ? true : false}\r\n      />\r\n      {checked && (\r\n        <BlmMediaPickerEditor\r\n          name=\"backgroundsounds\"\r\n          elementId={element.id}\r\n          acceptedFiles={[AcceptedFileTypes.Audio]}\r\n          data={backgroundsounds}\r\n          placeholder={t(\"sound_action.select_media\")}\r\n          className=\"template-sound-picker\"\r\n          onChange={handleChange}\r\n          showDesign=\"showDesign\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmBackgroundSoundAction;\r\n"]},"metadata":{},"sourceType":"module"}