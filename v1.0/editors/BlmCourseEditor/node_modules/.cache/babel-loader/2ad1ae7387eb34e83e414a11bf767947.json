{"ast":null,"code":"import { INLINE_STYLE_SIZE_PREFIX, INLINE_STYLE_COLOR_PREFIX, INLINE_STYLE_BG_COLOR_PREFIX, INLINE_STYLE_BOLD, INLINE_STYLE_ITALIC, INLINE_STYLE_UNDERLINE, BLOCK_STYLE_UNORDERED_LIST, BLOCK_STYLE_ORDERED_LIST, INLINE_STYLE_FONT_PREFIX } from \"editor-constants\";\nimport { toNumber } from \"utils\";\nexport const getCurrentStyle = (editorState, defaultStyles) => {\n  const style = {\n    bold: false,\n    italic: false,\n    underline: false,\n    fontFamily: defaultStyles === null || defaultStyles === void 0 ? void 0 : defaultStyles.fontFamily,\n    fontSize: toNumber(defaultStyles === null || defaultStyles === void 0 ? void 0 : defaultStyles.fontSize) || 12,\n    list: BLOCK_STYLE_ORDERED_LIST,\n    align: \"left\",\n    color: defaultStyles === null || defaultStyles === void 0 ? void 0 : defaultStyles.color,\n    bgColor: defaultStyles === null || defaultStyles === void 0 ? void 0 : defaultStyles.backgroudColor\n  };\n\n  if (editorState) {\n    const currentBlock = getCurrentBlock(editorState);\n    const inlineStyle = editorState.getCurrentInlineStyle();\n    const blockAlign = currentBlock.getData().get(\"textAlign\");\n    const blockType = currentBlock.getType();\n    inlineStyle.forEach(styleName => {\n      if (styleName) {\n        if (styleName === INLINE_STYLE_BOLD) {\n          style.bold = true;\n        } else if (styleName === INLINE_STYLE_ITALIC) {\n          style.italic = true;\n        } else if (styleName === INLINE_STYLE_UNDERLINE) {\n          style.underline = true;\n        } else if (styleName.startsWith(INLINE_STYLE_FONT_PREFIX)) {\n          style.fontFamily = styleName.replace(INLINE_STYLE_FONT_PREFIX, \"\");\n        } else if (styleName.startsWith(INLINE_STYLE_SIZE_PREFIX)) {\n          style.fontSize = toNumber(styleName.replace(INLINE_STYLE_SIZE_PREFIX, \"\"));\n        } else if (styleName.startsWith(INLINE_STYLE_COLOR_PREFIX)) {\n          style.color = styleName.replace(INLINE_STYLE_COLOR_PREFIX, \"\");\n        } else if (styleName.startsWith(INLINE_STYLE_BG_COLOR_PREFIX)) {\n          style.bgColor = styleName.replace(INLINE_STYLE_BG_COLOR_PREFIX, \"\");\n        }\n      }\n    });\n\n    if (blockAlign) {\n      style.align = blockAlign;\n    }\n\n    if (blockType === BLOCK_STYLE_ORDERED_LIST || blockType === BLOCK_STYLE_UNORDERED_LIST) {\n      style.list = blockType;\n    }\n  }\n\n  return style;\n};\n\nconst getCurrentBlock = editorState => {\n  const selection = editorState.getSelection();\n  const blockKey = selection.getStartKey();\n  return editorState.getCurrentContent().getBlockForKey(blockKey);\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/component-editor/text-toolbox/utils.ts"],"names":["INLINE_STYLE_SIZE_PREFIX","INLINE_STYLE_COLOR_PREFIX","INLINE_STYLE_BG_COLOR_PREFIX","INLINE_STYLE_BOLD","INLINE_STYLE_ITALIC","INLINE_STYLE_UNDERLINE","BLOCK_STYLE_UNORDERED_LIST","BLOCK_STYLE_ORDERED_LIST","INLINE_STYLE_FONT_PREFIX","toNumber","getCurrentStyle","editorState","defaultStyles","style","bold","italic","underline","fontFamily","fontSize","list","align","color","bgColor","backgroudColor","currentBlock","getCurrentBlock","inlineStyle","getCurrentInlineStyle","blockAlign","getData","get","blockType","getType","forEach","styleName","startsWith","replace","selection","getSelection","blockKey","getStartKey","getCurrentContent","getBlockForKey"],"mappings":"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","sourcesContent":["import { EditorState } from \"draft-js\";\r\n\r\nimport { SimpleObject } from \"types\";\r\nimport {\r\n  INLINE_STYLE_SIZE_PREFIX,\r\n  INLINE_STYLE_COLOR_PREFIX,\r\n  INLINE_STYLE_BG_COLOR_PREFIX,\r\n  INLINE_STYLE_BOLD,\r\n  INLINE_STYLE_ITALIC,\r\n  INLINE_STYLE_UNDERLINE,\r\n  BLOCK_STYLE_UNORDERED_LIST,\r\n  BLOCK_STYLE_ORDERED_LIST,\r\n  INLINE_STYLE_FONT_PREFIX,\r\n} from \"editor-constants\";\r\nimport { toNumber } from \"utils\";\r\n\r\nexport const getCurrentStyle = (editorState?: EditorState, defaultStyles?: SimpleObject) => {\r\n  const style = {\r\n    bold: false,\r\n    italic: false,\r\n    underline: false,\r\n    fontFamily: defaultStyles?.fontFamily,\r\n    fontSize: toNumber(defaultStyles?.fontSize) || 12,\r\n    list: BLOCK_STYLE_ORDERED_LIST,\r\n    align: \"left\",\r\n    color: defaultStyles?.color,\r\n    bgColor: defaultStyles?.backgroudColor,\r\n  };\r\n\r\n  if (editorState) {\r\n    const currentBlock = getCurrentBlock(editorState);\r\n    const inlineStyle = editorState.getCurrentInlineStyle();\r\n    const blockAlign = currentBlock.getData().get(\"textAlign\");\r\n    const blockType = currentBlock.getType();\r\n\r\n    inlineStyle.forEach((styleName) => {\r\n      if (styleName) {\r\n        if (styleName === INLINE_STYLE_BOLD) {\r\n          style.bold = true;\r\n        } else if (styleName === INLINE_STYLE_ITALIC) {\r\n          style.italic = true;\r\n        } else if (styleName === INLINE_STYLE_UNDERLINE) {\r\n          style.underline = true;\r\n        } else if (styleName.startsWith(INLINE_STYLE_FONT_PREFIX)) {\r\n          style.fontFamily = styleName.replace(INLINE_STYLE_FONT_PREFIX, \"\");\r\n        } else if (styleName.startsWith(INLINE_STYLE_SIZE_PREFIX)) {\r\n          style.fontSize = toNumber(styleName.replace(INLINE_STYLE_SIZE_PREFIX, \"\"));\r\n        } else if (styleName.startsWith(INLINE_STYLE_COLOR_PREFIX)) {\r\n          style.color = styleName.replace(INLINE_STYLE_COLOR_PREFIX, \"\");\r\n        } else if (styleName.startsWith(INLINE_STYLE_BG_COLOR_PREFIX)) {\r\n          style.bgColor = styleName.replace(INLINE_STYLE_BG_COLOR_PREFIX, \"\");\r\n        }\r\n      }\r\n    });\r\n\r\n    if (blockAlign) {\r\n      style.align = blockAlign;\r\n    }\r\n\r\n    if (blockType === BLOCK_STYLE_ORDERED_LIST || blockType === BLOCK_STYLE_UNORDERED_LIST) {\r\n      style.list = blockType;\r\n    }\r\n  }\r\n\r\n  return style;\r\n};\r\n\r\nconst getCurrentBlock = (editorState: EditorState) => {\r\n  const selection = editorState.getSelection();\r\n  const blockKey = selection.getStartKey();\r\n\r\n  return editorState.getCurrentContent().getBlockForKey(blockKey);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}