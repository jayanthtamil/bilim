{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\shared\\\\auto-textarea\\\\BlmAutoTextArea.tsx\";\nimport React, { useLayoutEffect, useRef } from \"react\";\n\nfunction BlmAutoTextArea(props) {\n  const {\n    value,\n    ...others\n  } = props;\n  const txtRef = useRef(null);\n  useLayoutEffect(() => {\n    const txt = txtRef.current;\n\n    if (txt) {\n      txt.style.height = \"0px\";\n      txt.style.height = txt.scrollHeight + 2 + \"px\";\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(\"textarea\", Object.assign({\n    ref: txtRef,\n    value: value\n  }, others, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }));\n}\n\nexport default BlmAutoTextArea;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/auto-textarea/BlmAutoTextArea.tsx"],"names":["React","useLayoutEffect","useRef","BlmAutoTextArea","props","value","others","txtRef","txt","current","style","height","scrollHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAwCC,eAAxC,EAAyDC,MAAzD,QAAuE,OAAvE;;AAIA,SAASC,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,QAAM;AAAEC,IAAAA,KAAF;AAAS,OAAGC;AAAZ,MAAuBF,KAA7B;AACA,QAAMG,MAAM,GAAGL,MAAM,CAAsB,IAAtB,CAArB;AAEAD,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMO,GAAG,GAAGD,MAAM,CAACE,OAAnB;;AAEA,QAAID,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACE,KAAJ,CAAUC,MAAV,GAAmB,KAAnB;AACAH,MAAAA,GAAG,CAACE,KAAJ,CAAUC,MAAV,GAAmBH,GAAG,CAACI,YAAJ,GAAmB,CAAnB,GAAuB,IAA1C;AACD;AACF,GAPc,EAOZ,CAACP,KAAD,CAPY,CAAf;AASA,sBAAO;AAAU,IAAA,GAAG,EAAEE,MAAf;AAAuB,IAAA,KAAK,EAAEF;AAA9B,KAAyCC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAED,eAAeH,eAAf","sourcesContent":["import React, { TextareaHTMLAttributes, useLayoutEffect, useRef } from \"react\";\r\n\r\nexport interface CompProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {}\r\n\r\nfunction BlmAutoTextArea(props: CompProps) {\r\n  const { value, ...others } = props;\r\n  const txtRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    const txt = txtRef.current;\r\n\r\n    if (txt) {\r\n      txt.style.height = \"0px\";\r\n      txt.style.height = txt.scrollHeight + 2 + \"px\";\r\n    }\r\n  }, [value]);\r\n\r\n  return <textarea ref={txtRef} value={value} {...others} />;\r\n}\r\n\r\nexport default BlmAutoTextArea;\r\n"]},"metadata":{},"sourceType":"module"}