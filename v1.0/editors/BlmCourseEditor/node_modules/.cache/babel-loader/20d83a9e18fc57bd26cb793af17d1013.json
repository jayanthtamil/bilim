{"ast":null,"code":"import { Theme, Language, Languages } from \"types\";\nimport { TemplateType } from \"editor-constants\";\nimport { cloneTemplates, findObject, getTemplateAndVariant, isCategory, isTemplate, toBoolean, traverseTemplates } from \"utils\";\nexport function createThemes(themes) {\n  if (themes) {\n    return themes.map(theme => new Theme(theme.nid, theme.name, theme.url, toBoolean(theme.allowIntroduction)));\n  }\n\n  return [];\n}\nexport function createLanguages(languages) {\n  if (languages) {\n    const result = new Languages();\n    result.primary = languages.primary.map(createLanguage);\n    result.others = languages.others.map(createLanguage);\n    return result;\n  }\n}\n\nfunction createLanguage(language) {\n  const {\n    code,\n    name,\n    url\n  } = language;\n  return new Language(code, name, url);\n}\n\nexport function createTemplateCategories(categories, parent) {\n  if (categories) {\n    const result = categories.map(item => {\n      const {\n        nid: id,\n        children,\n        ...other\n      } = item;\n      const category = {\n        id,\n        parent,\n        children: [],\n        ...other\n      };\n\n      if (hasCategoryTemplate(children)) {\n        category.children = createTemplateCategories(children, category) || [];\n      } else {\n        category.children = createTemplates(children, category);\n      }\n\n      return category;\n    });\n    updateTemplatesSubstitue(result);\n    return result;\n  }\n\n  return [];\n}\n\nfunction createTemplates(templates, parent) {\n  if (templates) {\n    return templates.map(item => {\n      const {\n        nid: id,\n        framework_min,\n        framework_max,\n        display,\n        scope,\n        theme,\n        context,\n        interaction,\n        switchable,\n        substitute_template,\n        variants,\n        course_context,\n        ...other\n      } = item;\n      const template = {\n        id,\n        parent,\n        framework: {\n          min: framework_min !== null && framework_min !== void 0 ? framework_min : undefined,\n          max: framework_max !== null && framework_max !== void 0 ? framework_max : undefined\n        },\n        displays: splitValue(display),\n        scopes: splitValue(scope),\n        contexts: splitValue(context),\n        structureContexts: splitValue(course_context),\n        themes: splitValue(theme),\n        interaction: toBoolean(interaction),\n        switchable: toBoolean(switchable),\n        substitue: substitute_template ? {\n          id: substitute_template\n        } : undefined,\n        variants: [],\n        ...other\n      };\n      template.variants = createVaraints(variants, template);\n      return template;\n    });\n  }\n\n  return [];\n}\n\nfunction createVaraints(variants, parent) {\n  if (variants) {\n    return variants.map(item => {\n      const {\n        nid: id,\n        ...other\n      } = item;\n      const variant = {\n        id,\n        parent,\n        ...other\n      };\n      return variant;\n    });\n  }\n\n  return [];\n}\n\nfunction hasCategoryTemplate(arr) {\n  if (arr && arr.length > 0) {\n    const item = arr[0];\n\n    if (item.type === TemplateType.CategoryRoot || item.type === TemplateType.Category) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction splitValue(str) {\n  if (str) {\n    return str.split(\"|\").map(i => i.trim());\n  }\n\n  return [];\n}\n\nexport function updateTemplateProperties(templates, response) {\n  if (response.length) {\n    const {\n      nid,\n      html,\n      htmlNode,\n      variants\n    } = response[0];\n    const newTemplates = cloneTemplates(templates);\n    traverseTemplates(newTemplates, nid, template => {\n      if (!isCategory(template)) {\n        template.html = html;\n        template.htmlNode = htmlNode;\n\n        if (isTemplate(template) && variants) {\n          template.variants.forEach(variant => {\n            const variantRes = findObject(variants, variant.id, \"nid\");\n\n            if (variantRes) {\n              variant.html = variantRes.html;\n              variant.htmlNode = variantRes.htmlNode;\n            }\n          });\n        }\n      }\n    });\n    updateTemplatesSubstitue(newTemplates);\n    return newTemplates;\n  }\n}\n\nfunction updateTemplatesSubstitue(templates, root = templates) {\n  templates.forEach(template => {\n    if (isCategory(template)) {\n      updateTemplatesSubstitue(template.children, root);\n    } else if (isTemplate(template)) {\n      if (template.substitue) {\n        var _getTemplateAndVarian;\n\n        template.substitue.template = (_getTemplateAndVarian = getTemplateAndVariant(root !== null && root !== void 0 ? root : templates, template.substitue.id)) === null || _getTemplateAndVarian === void 0 ? void 0 : _getTemplateAndVarian.template;\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/domain/utils/index.ts"],"names":["Theme","Language","Languages","TemplateType","cloneTemplates","findObject","getTemplateAndVariant","isCategory","isTemplate","toBoolean","traverseTemplates","createThemes","themes","map","theme","nid","name","url","allowIntroduction","createLanguages","languages","result","primary","createLanguage","others","language","code","createTemplateCategories","categories","parent","item","id","children","other","category","hasCategoryTemplate","createTemplates","updateTemplatesSubstitue","templates","framework_min","framework_max","display","scope","context","interaction","switchable","substitute_template","variants","course_context","template","framework","min","undefined","max","displays","splitValue","scopes","contexts","structureContexts","substitue","createVaraints","variant","arr","length","type","CategoryRoot","Category","str","split","i","trim","updateTemplateProperties","response","html","htmlNode","newTemplates","forEach","variantRes","root"],"mappings":"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","sourcesContent":["import { TemplateCategory, Template, TemplateVariant, Theme, Language, Languages } from \"types\";\r\nimport { TemplateType } from \"editor-constants\";\r\nimport {\r\n  cloneTemplates,\r\n  findObject,\r\n  getTemplateAndVariant,\r\n  isCategory,\r\n  isTemplate,\r\n  toBoolean,\r\n  traverseTemplates,\r\n} from \"utils\";\r\nimport {\r\n  TemplateBaseResponse,\r\n  TemplateCategoryResponse,\r\n  TemplateResponse,\r\n  TemplateVariantResponse,\r\n  ThemeResponse,\r\n  LanguageResponse,\r\n  LanguagesResponse,\r\n} from \"../types\";\r\n\r\nexport function createThemes(themes: ThemeResponse[]) {\r\n  if (themes) {\r\n    return themes.map(\r\n      (theme) => new Theme(theme.nid, theme.name, theme.url, toBoolean(theme.allowIntroduction))\r\n    );\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nexport function createLanguages(languages: LanguagesResponse) {\r\n  if (languages) {\r\n    const result = new Languages();\r\n    result.primary = languages.primary.map(createLanguage);\r\n    result.others = languages.others.map(createLanguage);\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nfunction createLanguage(language: LanguageResponse) {\r\n  const { code, name, url } = language;\r\n\r\n  return new Language(code, name, url);\r\n}\r\n\r\nexport function createTemplateCategories(\r\n  categories: TemplateCategoryResponse[],\r\n  parent?: TemplateCategory\r\n) {\r\n  if (categories) {\r\n    const result = categories.map((item) => {\r\n      const { nid: id, children, ...other } = item;\r\n      const category: TemplateCategory = { id, parent, children: [], ...other };\r\n\r\n      if (hasCategoryTemplate(children)) {\r\n        category.children = createTemplateCategories(children, category) || [];\r\n      } else {\r\n        category.children = createTemplates(children, category);\r\n      }\r\n\r\n      return category;\r\n    });\r\n\r\n    updateTemplatesSubstitue(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nfunction createTemplates(templates: TemplateResponse[], parent: TemplateCategory) {\r\n  if (templates) {\r\n    return templates.map((item) => {\r\n      const {\r\n        nid: id,\r\n        framework_min,\r\n        framework_max,\r\n        display,\r\n        scope,\r\n        theme,\r\n        context,\r\n        interaction,\r\n        switchable,\r\n        substitute_template,\r\n        variants,\r\n        course_context,\r\n        ...other\r\n      } = item;\r\n      const template: Template = {\r\n        id,\r\n        parent,\r\n        framework: { min: framework_min ?? undefined, max: framework_max ?? undefined },\r\n        displays: splitValue(display),\r\n        scopes: splitValue(scope),\r\n        contexts: splitValue(context),\r\n        structureContexts: splitValue(course_context),\r\n        themes: splitValue(theme),\r\n        interaction: toBoolean(interaction),\r\n        switchable: toBoolean(switchable),\r\n        substitue: substitute_template ? { id: substitute_template } : undefined,\r\n        variants: [],\r\n        ...other,\r\n      };\r\n      template.variants = createVaraints(variants, template);\r\n\r\n      return template;\r\n    });\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nfunction createVaraints(variants: TemplateVariantResponse[], parent: Template) {\r\n  if (variants) {\r\n    return variants.map((item) => {\r\n      const { nid: id, ...other } = item;\r\n      const variant: TemplateVariant = { id, parent, ...other };\r\n\r\n      return variant;\r\n    });\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nfunction hasCategoryTemplate(\r\n  arr: TemplateCategoryResponse[] | TemplateResponse[]\r\n): arr is TemplateCategoryResponse[] {\r\n  if (arr && arr.length > 0) {\r\n    const item = arr[0];\r\n\r\n    if (item.type === TemplateType.CategoryRoot || item.type === TemplateType.Category) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction splitValue<T>(str?: string | null): T[] {\r\n  if (str) {\r\n    return str.split(\"|\").map((i) => i.trim() as any as T);\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nexport function updateTemplateProperties(\r\n  templates: TemplateCategory[],\r\n  response: (TemplateBaseResponse & { variants?: TemplateBaseResponse[] })[]\r\n) {\r\n  if (response.length) {\r\n    const { nid, html, htmlNode, variants } = response[0];\r\n    const newTemplates = cloneTemplates(templates);\r\n\r\n    traverseTemplates(newTemplates, nid, (template) => {\r\n      if (!isCategory(template)) {\r\n        template.html = html;\r\n        template.htmlNode = htmlNode;\r\n\r\n        if (isTemplate(template) && variants) {\r\n          template.variants.forEach((variant) => {\r\n            const variantRes = findObject(variants, variant.id, \"nid\");\r\n\r\n            if (variantRes) {\r\n              variant.html = variantRes.html;\r\n              variant.htmlNode = variantRes.htmlNode;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    updateTemplatesSubstitue(newTemplates);\r\n\r\n    return newTemplates;\r\n  }\r\n}\r\n\r\nfunction updateTemplatesSubstitue(templates: TemplateCategory[] | Template[], root = templates) {\r\n  templates.forEach((template: TemplateCategory | Template) => {\r\n    if (isCategory(template)) {\r\n      updateTemplatesSubstitue(template.children, root);\r\n    } else if (isTemplate(template)) {\r\n      if (template.substitue) {\r\n        template.substitue.template = getTemplateAndVariant(\r\n          root ?? templates,\r\n          template.substitue.id\r\n        )?.template;\r\n      }\r\n    }\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}