{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\actions\\\\tooltip\\\\BlmTooltipAction.tsx\";\nimport React, { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ComponentActionTypes, StyleListTypes } from \"editor-constants\";\nimport { getHotspotActions, hasSameActionStyles, isMediaComponent, isMediaHotspot, isMediaHotspot360 } from \"utils\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport { useHotspot360Context } from \"../../media/hotspot/360\";\nimport { BlmStylePicker } from \"../../styles\";\nimport \"./styles.scss\";\n\nfunction BlmTooltipAction(props) {\n  const {\n    data,\n    onChange,\n    onApplyStyle\n  } = props;\n  const {\n    component\n  } = useContentEditorCtx();\n  const {\n    selectedId\n  } = useHotspot360Context();\n  const {\n    label = \"\",\n    style\n  } = data || {};\n  const {\n    t\n  } = useTranslation(\"content-editor\");\n  const hotspot = useMemo(() => {\n    if (component && isMediaComponent(component)) {\n      if (isMediaHotspot(component)) {\n        return component.value;\n      } else if (selectedId && isMediaHotspot360(component)) {\n        return component.value.items.find(item => item.id === selectedId);\n      }\n    }\n  }, [component, selectedId]);\n  const actions = useMemo(() => {\n    var _ref;\n\n    return (_ref = hotspot && getHotspotActions(hotspot, ComponentActionTypes.Tooltip)) !== null && _ref !== void 0 ? _ref : [];\n  }, [hotspot]);\n  const showApplyIcon = useMemo(() => {\n    return Boolean(style && hasSameActionStyles(actions, style));\n  }, [actions, style]);\n\n  const updateChange = newData => {\n    if (onChange) {\n      onChange({\n        target: {\n          name: \"tooltip\",\n          value: newData\n        }\n      });\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    const newData = { ...data,\n      [name]: value\n    };\n    updateChange(newData);\n  };\n\n  const handleApplyClick = style => {\n    if (onApplyStyle) {\n      onApplyStyle({\n        target: {\n          name: \"tooltip\",\n          value: style\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip-action-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"label\",\n    type: \"text\",\n    value: label,\n    placeholder: t(\"hotspot.tooltip_label\"),\n    className: \"tooltip-action-label-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BlmStylePicker, {\n    type: StyleListTypes.MediaHotspotTooltip,\n    name: \"style\",\n    label: t(\"hotspot.apply_tooltip\"),\n    value: style,\n    showApplyIcon: showApplyIcon,\n    onChange: handleChange,\n    onApplyClick: handleApplyClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default BlmTooltipAction;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/actions/tooltip/BlmTooltipAction.tsx"],"names":["React","useMemo","useTranslation","ComponentActionTypes","StyleListTypes","getHotspotActions","hasSameActionStyles","isMediaComponent","isMediaHotspot","isMediaHotspot360","useContentEditorCtx","useHotspot360Context","BlmStylePicker","BlmTooltipAction","props","data","onChange","onApplyStyle","component","selectedId","label","style","t","hotspot","value","items","find","item","id","actions","Tooltip","showApplyIcon","Boolean","updateChange","newData","target","name","handleChange","event","handleApplyClick","MediaHotspotTooltip"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,cAAT,QAA+B,eAA/B;AAGA,SAASC,oBAAT,EAA+BC,cAA/B,QAAqD,kBAArD;AACA,SACEC,iBADF,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,cAJF,EAKEC,iBALF,QAMO,OANP;AAOA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAO,eAAP;;AAQA,SAASC,gBAAT,CAA0BC,KAA1B,EAA4C;AAC1C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAAmCH,KAAzC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAgBR,mBAAmB,EAAzC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAiBR,oBAAoB,EAA3C;AACA,QAAM;AAAES,IAAAA,KAAK,GAAG,EAAV;AAAcC,IAAAA;AAAd,MAAwBN,IAAI,IAAI,EAAtC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAQpB,cAAc,CAAC,gBAAD,CAA5B;AAEA,QAAMqB,OAAO,GAAGtB,OAAO,CAAC,MAAM;AAC5B,QAAIiB,SAAS,IAAIX,gBAAgB,CAACW,SAAD,CAAjC,EAA8C;AAC5C,UAAIV,cAAc,CAACU,SAAD,CAAlB,EAA+B;AAC7B,eAAOA,SAAS,CAACM,KAAjB;AACD,OAFD,MAEO,IAAIL,UAAU,IAAIV,iBAAiB,CAACS,SAAD,CAAnC,EAAgD;AACrD,eAAOA,SAAS,CAACM,KAAV,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA4BC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYT,UAAjD,CAAP;AACD;AACF;AACF,GARsB,EAQpB,CAACD,SAAD,EAAYC,UAAZ,CARoB,CAAvB;AAUA,QAAMU,OAAO,GAAG5B,OAAO,CAAC,MAAM;AAAA;;AAC5B,mBACGsB,OAAO,IAAIlB,iBAAiB,CAAgBkB,OAAhB,EAAyBpB,oBAAoB,CAAC2B,OAA9C,CAD/B,uCAC0F,EAD1F;AAGD,GAJsB,EAIpB,CAACP,OAAD,CAJoB,CAAvB;AAMA,QAAMQ,aAAa,GAAG9B,OAAO,CAAC,MAAM;AAClC,WAAO+B,OAAO,CAACX,KAAK,IAAIf,mBAAmB,CAACuB,OAAD,EAAUR,KAAV,CAA7B,CAAd;AACD,GAF4B,EAE1B,CAACQ,OAAD,EAAUR,KAAV,CAF0B,CAA7B;;AAIA,QAAMY,YAAY,GAAIC,OAAD,IAA4B;AAC/C,QAAIlB,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC;AAAEmB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBZ,UAAAA,KAAK,EAAEU;AAA1B;AAAV,OAAD,CAAR;AACD;AACF,GAJD;;AAMA,QAAMG,YAAY,GAAIC,KAAD,IAAsC;AACzD,UAAM;AAAEF,MAAAA,IAAF;AAAQZ,MAAAA;AAAR,QAAkBc,KAAK,CAACH,MAA9B;AACA,UAAMD,OAAO,GAAG,EAAE,GAAGnB,IAAL;AAAW,OAACqB,IAAD,GAAQZ;AAAnB,KAAhB;AAEAS,IAAAA,YAAY,CAACC,OAAD,CAAZ;AACD,GALD;;AAOA,QAAMK,gBAAgB,GAAIlB,KAAD,IAAmB;AAC1C,QAAIJ,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAAC;AAAEkB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBZ,UAAAA,KAAK,EAAEH;AAA1B;AAAV,OAAD,CAAZ;AACD;AACF,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAED,KAHT;AAIE,IAAA,WAAW,EAAEE,CAAC,CAAC,uBAAD,CAJhB;AAKE,IAAA,SAAS,EAAC,0BALZ;AAME,IAAA,QAAQ,EAAEe,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eASE,oBAAC,cAAD;AACE,IAAA,IAAI,EAAEjC,cAAc,CAACoC,mBADvB;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAElB,CAAC,CAAC,uBAAD,CAHV;AAIE,IAAA,KAAK,EAAED,KAJT;AAKE,IAAA,aAAa,EAAEU,aALjB;AAME,IAAA,QAAQ,EAAEM,YANZ;AAOE,IAAA,YAAY,EAAEE,gBAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAqBD;;AACD,eAAe1B,gBAAf","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CustomChangeEvent, TooltipAction } from \"types\";\r\nimport { ComponentActionTypes, StyleListTypes } from \"editor-constants\";\r\nimport {\r\n  getHotspotActions,\r\n  hasSameActionStyles,\r\n  isMediaComponent,\r\n  isMediaHotspot,\r\n  isMediaHotspot360,\r\n} from \"utils\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport { useHotspot360Context } from \"../../media/hotspot/360\";\r\nimport { BlmStylePicker } from \"../../styles\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  data?: TooltipAction;\r\n  onChange?: (event: CustomChangeEvent<TooltipAction>) => void;\r\n  onApplyStyle?: (event: CustomChangeEvent<string>) => void;\r\n}\r\n\r\nfunction BlmTooltipAction(props: CompProps) {\r\n  const { data, onChange, onApplyStyle } = props;\r\n  const { component } = useContentEditorCtx();\r\n  const { selectedId } = useHotspot360Context();\r\n  const { label = \"\", style } = data || {};\r\n  const { t } = useTranslation(\"content-editor\");\r\n\r\n  const hotspot = useMemo(() => {\r\n    if (component && isMediaComponent(component)) {\r\n      if (isMediaHotspot(component)) {\r\n        return component.value;\r\n      } else if (selectedId && isMediaHotspot360(component)) {\r\n        return component.value.items.find((item) => item.id === selectedId);\r\n      }\r\n    }\r\n  }, [component, selectedId]);\r\n\r\n  const actions = useMemo(() => {\r\n    return (\r\n      (hotspot && getHotspotActions<TooltipAction>(hotspot, ComponentActionTypes.Tooltip)) ?? []\r\n    );\r\n  }, [hotspot]);\r\n\r\n  const showApplyIcon = useMemo(() => {\r\n    return Boolean(style && hasSameActionStyles(actions, style));\r\n  }, [actions, style]);\r\n\r\n  const updateChange = (newData: TooltipAction) => {\r\n    if (onChange) {\r\n      onChange({ target: { name: \"tooltip\", value: newData } });\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: CustomChangeEvent<string>) => {\r\n    const { name, value } = event.target;\r\n    const newData = { ...data, [name]: value };\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const handleApplyClick = (style: string) => {\r\n    if (onApplyStyle) {\r\n      onApplyStyle({ target: { name: \"tooltip\", value: style } });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tooltip-action-wrapper\">\r\n      <input\r\n        name=\"label\"\r\n        type=\"text\"\r\n        value={label}\r\n        placeholder={t(\"hotspot.tooltip_label\")}\r\n        className=\"tooltip-action-label-txt\"\r\n        onChange={handleChange}\r\n      />\r\n      <BlmStylePicker\r\n        type={StyleListTypes.MediaHotspotTooltip}\r\n        name=\"style\"\r\n        label={t(\"hotspot.apply_tooltip\")}\r\n        value={style}\r\n        showApplyIcon={showApplyIcon}\r\n        onChange={handleChange}\r\n        onApplyClick={handleApplyClick}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default BlmTooltipAction;\r\n"]},"metadata":{},"sourceType":"module"}