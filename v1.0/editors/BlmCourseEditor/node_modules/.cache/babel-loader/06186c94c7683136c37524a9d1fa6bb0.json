{"ast":null,"code":"import { QuestionIntroduction, QuestionIntroMediaDisplay } from \"types\";\nimport { QuestionIntroductionTypes, TemplateEditorOptionTypes } from \"editor-constants\";\nimport { getBLMElement, getHTMLElement } from \"../../core\";\nimport { getQuestionMediaComponent, getTextComponent } from \"../component\";\nexport function getQuestionIntroduction(root) {\n  const introduction = new QuestionIntroduction();\n  const element = getHTMLElement(root, \"[id='introduction']\");\n\n  if (element) {\n    const model = getBLMElement(element);\n    const {\n      options\n    } = model;\n    const {\n      media\n    } = introduction;\n    introduction.introduction = options ? options.intro : QuestionIntroductionTypes.None;\n\n    if (options && options.simplecontentid) {\n      introduction.simpleContentId = options.simplecontentid;\n    } else {\n      introduction.simpleContentId = TemplateEditorOptionTypes.None;\n    }\n\n    media.title = getTextComponent(element, \"[blm-value='introductiontitle']\");\n    media.text = getTextComponent(element, \"[blm-value='introductiontext']\");\n    media.media = getQuestionMediaComponent(element, \"[blm-value='mediaintro']\");\n    media.sound = getQuestionMediaComponent(element, \"[blm-value='soundintro']\");\n    media.display = getIntroMediaDsiplay(model, element);\n  }\n\n  return introduction;\n}\n\nfunction getIntroMediaDsiplay(model, html) {\n  const display = new QuestionIntroMediaDisplay();\n  const {\n    options\n  } = model;\n\n  if (options && options.mediaintronext) {\n    const obj = options.mediaintronext;\n    display.timer = {\n      status: obj.timer,\n      value: obj.timervalue\n    };\n    display.autoEnd = obj.autoend;\n    display.button = !(display.timer.status || display.autoEnd); //BILIM-175: [react] question introduction with media - default values\n  }\n\n  return display;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/model/question/introduction.ts"],"names":["QuestionIntroduction","QuestionIntroMediaDisplay","QuestionIntroductionTypes","TemplateEditorOptionTypes","getBLMElement","getHTMLElement","getQuestionMediaComponent","getTextComponent","getQuestionIntroduction","root","introduction","element","model","options","media","intro","None","simplecontentid","simpleContentId","title","text","sound","display","getIntroMediaDsiplay","html","mediaintronext","obj","timer","status","value","timervalue","autoEnd","autoend","button"],"mappings":"AAAA,SAEEA,oBAFF,EAGEC,yBAHF,QAKO,OALP;AAMA,SAASC,yBAAT,EAAoCC,yBAApC,QAAqE,kBAArE;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,YAA9C;AACA,SAASC,yBAAT,EAAoCC,gBAApC,QAA4D,cAA5D;AAEA,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAoD;AACzD,QAAMC,YAAY,GAAG,IAAIV,oBAAJ,EAArB;AACA,QAAMW,OAAO,GAAGN,cAAc,CAACI,IAAD,EAAO,qBAAP,CAA9B;;AAEA,MAAIE,OAAJ,EAAa;AACX,UAAMC,KAAK,GAAGR,aAAa,CAA8BO,OAA9B,CAA3B;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAcD,KAApB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAYJ,YAAlB;AAEAA,IAAAA,YAAY,CAACA,YAAb,GAA4BG,OAAO,GAAGA,OAAO,CAACE,KAAX,GAAmBb,yBAAyB,CAACc,IAAhF;;AAEA,QAAIH,OAAO,IAAIA,OAAO,CAACI,eAAvB,EAAwC;AACtCP,MAAAA,YAAY,CAACQ,eAAb,GAA+BL,OAAO,CAACI,eAAvC;AACD,KAFD,MAEO;AACLP,MAAAA,YAAY,CAACQ,eAAb,GAA+Bf,yBAAyB,CAACa,IAAzD;AACD;;AAEDF,IAAAA,KAAK,CAACK,KAAN,GAAcZ,gBAAgB,CAACI,OAAD,EAAU,iCAAV,CAA9B;AACAG,IAAAA,KAAK,CAACM,IAAN,GAAab,gBAAgB,CAACI,OAAD,EAAU,gCAAV,CAA7B;AACAG,IAAAA,KAAK,CAACA,KAAN,GAAcR,yBAAyB,CAACK,OAAD,EAAU,0BAAV,CAAvC;AACAG,IAAAA,KAAK,CAACO,KAAN,GAAcf,yBAAyB,CAACK,OAAD,EAAU,0BAAV,CAAvC;AACAG,IAAAA,KAAK,CAACQ,OAAN,GAAgBC,oBAAoB,CAACX,KAAD,EAAQD,OAAR,CAApC;AACD;;AAED,SAAOD,YAAP;AACD;;AAED,SAASa,oBAAT,CAA8BX,KAA9B,EAA8EY,IAA9E,EAAiG;AAC/F,QAAMF,OAAO,GAAG,IAAIrB,yBAAJ,EAAhB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcD,KAApB;;AAEA,MAAIC,OAAO,IAAIA,OAAO,CAACY,cAAvB,EAAuC;AACrC,UAAMC,GAAG,GAAGb,OAAO,CAACY,cAApB;AAEAH,IAAAA,OAAO,CAACK,KAAR,GAAgB;AAAEC,MAAAA,MAAM,EAAEF,GAAG,CAACC,KAAd;AAAqBE,MAAAA,KAAK,EAAEH,GAAG,CAACI;AAAhC,KAAhB;AACAR,IAAAA,OAAO,CAACS,OAAR,GAAkBL,GAAG,CAACM,OAAtB;AACAV,IAAAA,OAAO,CAACW,MAAR,GAAiB,EAAEX,OAAO,CAACK,KAAR,CAAcC,MAAd,IAAwBN,OAAO,CAACS,OAAlC,CAAjB,CALqC,CAKwB;AAC9D;;AAED,SAAOT,OAAP;AACD","sourcesContent":["import {\r\n  BLMElement,\r\n  QuestionIntroduction,\r\n  QuestionIntroMediaDisplay,\r\n  QuizIntroductionOptionsJSON,\r\n} from \"types\";\r\nimport { QuestionIntroductionTypes, TemplateEditorOptionTypes } from \"editor-constants\";\r\nimport { getBLMElement, getHTMLElement } from \"../../core\";\r\nimport { getQuestionMediaComponent, getTextComponent } from \"../component\";\r\n\r\nexport function getQuestionIntroduction(root: HTMLElement) {\r\n  const introduction = new QuestionIntroduction();\r\n  const element = getHTMLElement(root, \"[id='introduction']\");\r\n\r\n  if (element) {\r\n    const model = getBLMElement<QuizIntroductionOptionsJSON>(element);\r\n    const { options } = model;\r\n    const { media } = introduction;\r\n\r\n    introduction.introduction = options ? options.intro : QuestionIntroductionTypes.None;\r\n\r\n    if (options && options.simplecontentid) {\r\n      introduction.simpleContentId = options.simplecontentid;\r\n    } else {\r\n      introduction.simpleContentId = TemplateEditorOptionTypes.None;\r\n    }\r\n\r\n    media.title = getTextComponent(element, \"[blm-value='introductiontitle']\");\r\n    media.text = getTextComponent(element, \"[blm-value='introductiontext']\");\r\n    media.media = getQuestionMediaComponent(element, \"[blm-value='mediaintro']\");\r\n    media.sound = getQuestionMediaComponent(element, \"[blm-value='soundintro']\");\r\n    media.display = getIntroMediaDsiplay(model, element);\r\n  }\r\n\r\n  return introduction;\r\n}\r\n\r\nfunction getIntroMediaDsiplay(model: BLMElement<QuizIntroductionOptionsJSON>, html: HTMLElement) {\r\n  const display = new QuestionIntroMediaDisplay();\r\n  const { options } = model;\r\n\r\n  if (options && options.mediaintronext) {\r\n    const obj = options.mediaintronext;\r\n\r\n    display.timer = { status: obj.timer, value: obj.timervalue };\r\n    display.autoEnd = obj.autoend;\r\n    display.button = !(display.timer.status || display.autoEnd); //BILIM-175: [react] question introduction with media - default values\r\n  }\r\n\r\n  return display;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}