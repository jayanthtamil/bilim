{"ast":null,"code":"import padStart from \"lodash/padStart\";\nconst options = {\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  hour12: false\n};\nconst TIMESTAMP_REGEXP = /([0-9]{1,2})?:?([0-9]{2}):([0-9]{2}\\.[0-9]{2,3})/;\nexport function formatDate(str) {\n  return new Date(str).toLocaleDateString([], options) + \" GMT\";\n}\n\nfunction createTime(time) {\n  const hr = Math.floor(time / 3600);\n  const min = Math.floor(time / 60 % 60);\n  const sec = Math.floor(time % 60);\n  const ms = Math.floor(time * 1000 % 1000);\n\n  const pad = (i, len = 2) => padStart(i.toString(), len, \"0\");\n\n  return {\n    hr: pad(hr),\n    min: pad(min),\n    sec: pad(sec),\n    ms: pad(ms, 3)\n  };\n}\n\nexport function formatTime(time) {\n  const {\n    hr,\n    min,\n    sec\n  } = createTime(time);\n  return `${hr}:${min}:${sec}`;\n}\nexport function formatFullTime(time) {\n  const {\n    hr,\n    min,\n    sec,\n    ms\n  } = createTime(time);\n  return `${hr}:${min}:${sec}.${ms}`;\n}\nexport function formatShortTime(time) {\n  const {\n    min,\n    sec,\n    ms\n  } = createTime(time);\n  return `${min}:${sec}.${ms}`;\n}\nexport function validTimestamp(timestamp) {\n  return TIMESTAMP_REGEXP.test(timestamp);\n}\nexport function parseTimestamp(timestamp) {\n  const matches = timestamp.match(TIMESTAMP_REGEXP);\n  let secs = parseFloat(matches[1] || \"0\") * 60 * 60; // hours\n\n  secs += parseFloat(matches[2] || \"0\") * 60; // mins\n\n  secs += parseFloat(matches[3] || \"0\");\n  return secs;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/utils/core/date.ts"],"names":["padStart","options","year","month","day","hour","minute","second","hour12","TIMESTAMP_REGEXP","formatDate","str","Date","toLocaleDateString","createTime","time","hr","Math","floor","min","sec","ms","pad","i","len","toString","formatTime","formatFullTime","formatShortTime","validTimestamp","timestamp","test","parseTimestamp","matches","match","secs","parseFloat"],"mappings":"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","sourcesContent":["import padStart from \"lodash/padStart\";\r\n\r\nconst options: Intl.DateTimeFormatOptions = {\r\n  year: \"numeric\",\r\n  month: \"numeric\",\r\n  day: \"numeric\",\r\n  hour: \"numeric\",\r\n  minute: \"numeric\",\r\n  second: \"numeric\",\r\n  hour12: false,\r\n};\r\nconst TIMESTAMP_REGEXP = /([0-9]{1,2})?:?([0-9]{2}):([0-9]{2}\\.[0-9]{2,3})/;\r\n\r\nexport function formatDate(str: string) {\r\n  return new Date(str).toLocaleDateString([], options) + \" GMT\";\r\n}\r\n\r\nfunction createTime(time: number) {\r\n  const hr = Math.floor(time / 3600);\r\n  const min = Math.floor((time / 60) % 60);\r\n  const sec = Math.floor(time % 60);\r\n  const ms = Math.floor((time * 1000) % 1000);\r\n  const pad = (i: number, len = 2) => padStart(i.toString(), len, \"0\");\r\n\r\n  return { hr: pad(hr), min: pad(min), sec: pad(sec), ms: pad(ms, 3) };\r\n}\r\n\r\nexport function formatTime(time: number) {\r\n  const { hr, min, sec } = createTime(time);\r\n\r\n  return `${hr}:${min}:${sec}`;\r\n}\r\n\r\nexport function formatFullTime(time: number) {\r\n  const { hr, min, sec, ms } = createTime(time);\r\n\r\n  return `${hr}:${min}:${sec}.${ms}`;\r\n}\r\n\r\nexport function formatShortTime(time: number) {\r\n  const { min, sec, ms } = createTime(time);\r\n\r\n  return `${min}:${sec}.${ms}`;\r\n}\r\n\r\nexport function validTimestamp(timestamp: string) {\r\n  return TIMESTAMP_REGEXP.test(timestamp);\r\n}\r\n\r\nexport function parseTimestamp(timestamp: string) {\r\n  const matches = timestamp.match(TIMESTAMP_REGEXP);\r\n  let secs = parseFloat(matches![1] || \"0\") * 60 * 60; // hours\r\n  secs += parseFloat(matches![2] || \"0\") * 60; // mins\r\n  secs += parseFloat(matches![3] || \"0\");\r\n\r\n  return secs;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}