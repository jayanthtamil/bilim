{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\media-editor\\\\components\\\\scroller\\\\BlmWaveScroller.tsx\";\nimport React, { useState, useRef, useCallback } from \"react\";\nimport clsx from \"clsx\";\nimport clamp from \"lodash/clamp\";\nimport { convertXPosToTime } from \"../../utils\";\nimport \"./styles.scss\";\n\nfunction BlmWaveScroller(props) {\n  const {\n    wavesurfer,\n    onChange\n  } = props;\n  const containerRef = useRef(null);\n  const [scrolling, setScrolling] = useState({\n    status: false,\n    startX: 0,\n    startTime: 0\n  });\n  const {\n    currentTime,\n    duration\n  } = wavesurfer;\n\n  const updateChange = time => {\n    if (onChange) {\n      onChange(time);\n    }\n  };\n\n  const handleMouseDown = event => {\n    setScrolling({\n      status: true,\n      startX: event.pageX,\n      startTime: currentTime\n    });\n    document.addEventListener(\"mouseup\", handleMouseUp);\n  };\n\n  const handleMouseMove = event => {\n    const {\n      status,\n      startX,\n      startTime\n    } = scrolling;\n    const container = containerRef.current;\n\n    if (status && container) {\n      const newTime = clamp(startTime - convertXPosToTime(event.pageX - startX, wavesurfer.pxPerSec), 0, duration);\n      updateChange(newTime);\n    }\n  };\n\n  const handleMouseUp = useCallback(event => {\n    setScrolling({\n      status: false,\n      startX: 0,\n      startTime: 0\n    });\n    document.removeEventListener(\"mouseup\", handleMouseUp);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    className: clsx(\"wave-scroller\", {\n      scrolling: scrolling.status\n    }),\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default BlmWaveScroller;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/media-editor/components/scroller/BlmWaveScroller.tsx"],"names":["React","useState","useRef","useCallback","clsx","clamp","convertXPosToTime","BlmWaveScroller","props","wavesurfer","onChange","containerRef","scrolling","setScrolling","status","startX","startTime","currentTime","duration","updateChange","time","handleMouseDown","event","pageX","document","addEventListener","handleMouseUp","handleMouseMove","container","current","newTime","pxPerSec","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAA+CC,QAA/C,EAAyDC,MAAzD,EAAiEC,WAAjE,QAAoF,OAApF;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAGA,SAASC,iBAAT,QAAkC,aAAlC;AACA,OAAO,eAAP;;AAOA,SAASC,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA2BF,KAAjC;AACA,QAAMG,YAAY,GAAGT,MAAM,CAAiB,IAAjB,CAA3B;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC;AAAEa,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,MAAM,EAAE,CAAzB;AAA4BC,IAAAA,SAAS,EAAE;AAAvC,GAAD,CAA1C;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4BT,UAAlC;;AAEA,QAAMU,YAAY,GAAIC,IAAD,IAAkB;AACrC,QAAIV,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACU,IAAD,CAAR;AACD;AACF,GAJD;;AAMA,QAAMC,eAAe,GAAIC,KAAD,IAA4B;AAClDT,IAAAA,YAAY,CAAC;AAAEC,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,MAAM,EAAEO,KAAK,CAACC,KAA9B;AAAqCP,MAAAA,SAAS,EAAEC;AAAhD,KAAD,CAAZ;AAEAO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCC,aAArC;AACD,GAJD;;AAMA,QAAMC,eAAe,GAAIL,KAAD,IAA4B;AAClD,UAAM;AAAER,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA;AAAlB,QAAgCJ,SAAtC;AACA,UAAMgB,SAAS,GAAGjB,YAAY,CAACkB,OAA/B;;AAEA,QAAIf,MAAM,IAAIc,SAAd,EAAyB;AACvB,YAAME,OAAO,GAAGzB,KAAK,CACnBW,SAAS,GAAGV,iBAAiB,CAACgB,KAAK,CAACC,KAAN,GAAcR,MAAf,EAAuBN,UAAU,CAACsB,QAAlC,CADV,EAEnB,CAFmB,EAGnBb,QAHmB,CAArB;AAMAC,MAAAA,YAAY,CAACW,OAAD,CAAZ;AACD;AACF,GAbD;;AAeA,QAAMJ,aAAa,GAAGvB,WAAW,CAAEmB,KAAD,IAAuB;AACvDT,IAAAA,YAAY,CAAC;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,MAAM,EAAE,CAAzB;AAA4BC,MAAAA,SAAS,EAAE;AAAvC,KAAD,CAAZ;AAEAQ,IAAAA,QAAQ,CAACQ,mBAAT,CAA6B,SAA7B,EAAwCN,aAAxC;AACD,GAJgC,EAI9B,EAJ8B,CAAjC;AAMA,sBACE;AACE,IAAA,GAAG,EAAEf,YADP;AAEE,IAAA,SAAS,EAAEP,IAAI,CAAC,eAAD,EAAkB;AAAEQ,MAAAA,SAAS,EAAEA,SAAS,CAACE;AAAvB,KAAlB,CAFjB;AAGE,IAAA,WAAW,EAAEO,eAHf;AAIE,IAAA,WAAW,EAAEM,eAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD;;AAED,eAAepB,eAAf","sourcesContent":["import React, { MouseEvent as ReactMouseEvent, useState, useRef, useCallback } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport clamp from \"lodash/clamp\";\r\n\r\nimport { MediaWavesurfer } from \"types\";\r\nimport { convertXPosToTime } from \"../../utils\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  wavesurfer: MediaWavesurfer;\r\n  onChange?: (time: number) => void;\r\n}\r\n\r\nfunction BlmWaveScroller(props: CompProps) {\r\n  const { wavesurfer, onChange } = props;\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [scrolling, setScrolling] = useState({ status: false, startX: 0, startTime: 0 });\r\n  const { currentTime, duration } = wavesurfer;\r\n\r\n  const updateChange = (time: number) => {\r\n    if (onChange) {\r\n      onChange(time);\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = (event: ReactMouseEvent) => {\r\n    setScrolling({ status: true, startX: event.pageX, startTime: currentTime });\r\n\r\n    document.addEventListener(\"mouseup\", handleMouseUp);\r\n  };\r\n\r\n  const handleMouseMove = (event: ReactMouseEvent) => {\r\n    const { status, startX, startTime } = scrolling;\r\n    const container = containerRef.current;\r\n\r\n    if (status && container) {\r\n      const newTime = clamp(\r\n        startTime - convertXPosToTime(event.pageX - startX, wavesurfer.pxPerSec),\r\n        0,\r\n        duration\r\n      );\r\n\r\n      updateChange(newTime);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = useCallback((event: MouseEvent) => {\r\n    setScrolling({ status: false, startX: 0, startTime: 0 });\r\n\r\n    document.removeEventListener(\"mouseup\", handleMouseUp);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={clsx(\"wave-scroller\", { scrolling: scrolling.status })}\r\n      onMouseDown={handleMouseDown}\r\n      onMouseMove={handleMouseMove}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BlmWaveScroller;\r\n"]},"metadata":{},"sourceType":"module"}