{"ast":null,"code":"import { ClassAttribute, LinkMedia, Attributes, StyleAttribute, BLMElement } from \"types\";\nimport { MediaFormats, MediaOptionTypes, QuestionPropositionInfoTypes, QuestionPropositionTypes, QuestionPropositionValidTypes, QuestionTemplateTypes, TemplateEditorOptionTypes } from \"editor-constants\";\nimport { createHTMLElement, isQuestionCustom, isQuestionPropositions, removeAllChildren, valueToUnit } from \"utils\";\nimport { getHTMLElement, getIntroductionMedia, setBLMElement, setBLMElementBy } from \"../../core\";\nimport { setLinkMediaComponent, setQuestionMediaComponent, setSimpleContentComponent, setQuestionSoundComponent, setTextComponent } from \"../component\";\nexport function setQuestionMainHTML(root, main, introduction, type) {\n  const {\n    title,\n    text,\n    media,\n    sound,\n    simpleContent,\n    instruction,\n    validate,\n    content\n  } = main;\n\n  if (type !== QuestionTemplateTypes.NoHeader) {\n    const element = getHTMLElement(root, \"[id='mainquestion\");\n    const classAttr = new ClassAttribute();\n    const introMedia = getIntroductionMedia(introduction);\n\n    if (sound.value) {\n      classAttr.items.push(\"hassound\");\n    } else {\n      classAttr.removables.push(\"hassound\");\n    }\n\n    if (simpleContent.value !== TemplateEditorOptionTypes.None) {\n      classAttr.items.push(\"hassimplecontent\");\n    } else {\n      classAttr.removables.push(\"hassimplecontent\");\n    }\n\n    if (!media.value && introMedia) {\n      const linkMedia = new LinkMedia();\n      linkMedia.option = MediaOptionTypes.Linked;\n      media.value = linkMedia;\n    }\n\n    if (element) {\n      setTextComponent(element, \"[blm-value='entiled']\", title);\n      setTextComponent(element, \"[blm-value='description']\", text);\n      setLinkMediaComponent(element, \"[blm-value='mainmedia']\", media, introMedia, classAttr);\n      setQuestionSoundComponent(element, \"[blm-value='mainsound']\", sound);\n      setSimpleContentComponent(element, \"[blm-value='knowmore']\", simpleContent);\n      setTextComponent(element, \"[blm-value='instruction']\", instruction);\n      setQuestionValidateHTML(element, validate);\n    }\n  }\n\n  if (isQuestionPropositions(content)) {\n    if (content.isEditable && content.value) {\n      setQuestionPropositionsHTML(root, content.value);\n    }\n  } else if (isQuestionCustom(content)) {\n    setQuestionCustomHTML(root, content);\n  }\n}\n\nfunction setQuestionValidateHTML(parent, validate) {\n  const {\n    checked\n  } = validate;\n  const element = getHTMLElement(parent, \"[blm-value='validate']\");\n\n  if (element) {\n    const classAttr = new ClassAttribute();\n\n    if (checked) {\n      classAttr.removables.push(\"deactivated\");\n    } else {\n      classAttr.items.push(\"deactivated\");\n    }\n\n    setBLMElement(element, {\n      classAttr\n    });\n  }\n}\n\nfunction setQuestionPropositionsHTML(root, propositions) {\n  const {\n    isMCQ,\n    restrictTypeToSingle,\n    randomize,\n    minimum,\n    maximum,\n    items\n  } = propositions;\n  const element = getHTMLElement(root, \"[blm-value='propositions']\");\n  const options = {\n    type: isMCQ ? QuestionPropositionTypes.Multiple : QuestionPropositionTypes.Single,\n    restrict_type_to_single: restrictTypeToSingle,\n    randomize,\n    minprop: minimum,\n    maxprop: maximum\n  };\n  const classAttr = new ClassAttribute();\n  classAttr.items = [\"nbpropositions\" + items.length];\n  classAttr.removables = [/^nbpropositions(\\d+)$/g];\n\n  if (element) {\n    setBLMElement(element, {\n      options,\n      classAttr\n    }); //Proposition items html\n\n    const parent = getQuestionPropositionHTML(element);\n\n    if (parent) {\n      removeAllChildren(element);\n\n      if (items) {\n        items.forEach((item, ind) => {\n          const itemHtml = parent.cloneNode(true);\n          const lineBreak = document.createTextNode(\"\\n\"); //Remove this tag, if it runs slower\n\n          setQuestionPropositionHTML(itemHtml, item, ind);\n          element.appendChild(lineBreak);\n          element.appendChild(itemHtml);\n        });\n      }\n    }\n  }\n}\n\nfunction getQuestionPropositionHTML(parent) {\n  const element = getHTMLElement(parent, \"[blm-value='proposition']\");\n\n  if (element) {\n    return element;\n  } else {\n    const str = `<li blm-editable blm-value=\"proposition\" blm-option=\"right\" class=\"\">\n    <div class=\"proposition\">\n      <div class=\"mainprop\">\n        <div class=\"mediaprop\" blm-value=\"mediaprop\" blm-option=\"none\">\n          <img src=\"\"></img>\n        </div>\n        <div class=\"knowmoreprop\" blm-value=\"knowmoreprop\" blm-option=\"none\">\n          <div class=\"knowmoreproppopupoff\">\n            <div class=\"knowmoreproppopuptitle\" blm-value=\"knowmoreproppopuptitle\"></div>\n            <div class=\"knowmoreproppopuptext\" blm-value=\"knowmoreproppopuptext\"></div>\n          </div>\n        </div>\n        <div class=\"soundprop\" blm-value=\"soundprop\" blm-option=\"none\">\n          <audio>\n          </audio>\n        </div>\n        <div class=\"singlepropositionwrapper\">\n          <div class=\"propositiontitle\" blm-editable blm-value=\"propositiontitle\" blm-id=\"propitem-1-1\" blm-component=\"text\"></div>\n          <div class=\"propositiontext\" blm-editable blm-value=\"propositiontext\" blm-id=\"propitem-1-2\" blm-component=\"text\"></div>\n        </div>\n      </div>\n      <div id=\"feedbackprop\" class=\"d-none\">\n        <div class=\"mediafeedbackprop\" blm-editable blm-value=\"mediafeedbackprop\" blm-option=\"none\">\n          <img src=\"\"></img>\n        </div>\n        <div class=\"soundfeedbackprop\" blm-editable blm-value=\"soundfeedbackprop\" blm-option=\"none\">\n          <audio>\n          </audio>\n        </div>\n        <div class=\"propositionfeedbacktextwrapper\">\n          <div class=\"propositionfeedbacktitle\" blm-editable blm-value=\"propositionfeedbacktitle\"></div>\n          <div class=\"propositionfeedbacktext\" blm-editable blm-value=\"propositionfeedbacktext\"></div>\n        </div>\n      </div>\n    </div>\n  </li>`;\n    return createHTMLElement(str);\n  }\n}\n\nfunction setQuestionPropositionHTML(parent, proposition, index) {\n  const {\n    validity,\n    title,\n    text,\n    media,\n    sound,\n    info,\n    feedback\n  } = proposition;\n  const classAttr = new ClassAttribute();\n  const option = validity.value ? QuestionPropositionValidTypes.Right : QuestionPropositionValidTypes.Wrong;\n\n  if (media.value) {\n    classAttr.items.push(\"hasmedia\");\n  } else {\n    classAttr.removables.push(\"hasmedia\");\n  }\n\n  if (sound.value) {\n    classAttr.items.push(\"hassound\");\n  } else {\n    classAttr.removables.push(\"hassound\");\n  }\n\n  if (info.value && info.value.type !== QuestionPropositionInfoTypes.None) {\n    classAttr.items.push(\"hasknowmore\");\n  } else {\n    classAttr.removables.push(\"hasknowmore\");\n  }\n\n  setBLMElement(parent, {\n    option,\n    classAttr\n  });\n  setTextComponent(parent, \"[blm-value='propositiontitle']\", title, {\n    id: `propitem-${index + 1}-1`\n  });\n  setTextComponent(parent, \"[blm-value='propositiontext']\", text, {\n    id: `propitem-${index + 1}-2`\n  });\n  setQuestionMediaComponent(parent, \"[blm-value='mediaprop']\", media);\n  setQuestionSoundComponent(parent, \"[blm-value='soundprop']\", sound);\n\n  if (info.isEditable && info.value) {\n    setQuestionPropositionInfoHTML(parent, info.value);\n  }\n\n  setQuestionPropositionFeedbackHTML(parent, feedback);\n}\n\nfunction setQuestionPropositionInfoHTML(parent, info) {\n  const {\n    type,\n    simple: {\n      text,\n      title\n    },\n    simpleContentId\n  } = info;\n  let option;\n\n  if (type === QuestionPropositionInfoTypes.Detailed) {\n    option = simpleContentId !== TemplateEditorOptionTypes.None ? `simplecontent(${simpleContentId})` : QuestionPropositionInfoTypes.None;\n  } else {\n    option = type;\n  }\n\n  setBLMElementBy(parent, \"[blm-value='knowmoreprop']\", {\n    option\n  });\n  setTextComponent(parent, \"[blm-value='knowmoreproppopuptitle']\", title);\n  setTextComponent(parent, \"[blm-value='knowmoreproppopuptext']\", text);\n}\n\nfunction setQuestionPropositionFeedbackHTML(parent, feedback) {\n  const {\n    title,\n    text,\n    media,\n    sound\n  } = feedback;\n  const element = getHTMLElement(parent, \"[id='feedbackprop']\");\n\n  if (element) {\n    setTextComponent(element, \"[blm-value='propositionfeedbacktitle']\", title);\n    setTextComponent(element, \"[blm-value='propositionfeedbacktext']\", text);\n    setQuestionMediaComponent(element, \"[blm-value='mediafeedbackprop']\", media);\n    setQuestionSoundComponent(element, \"[blm-value='soundfeedbackprop']\", sound);\n  }\n}\n\nfunction setQuestionCustomHTML(parent, custom) {\n  const element = getHTMLElement(parent, \"[blm-value='maincustommedia']\");\n\n  if (element) {\n    const {\n      format,\n      value\n    } = custom;\n    const model = new BLMElement();\n    const attrs = new Attributes();\n    const classAttr = new ClassAttribute();\n    const styleAttr = new StyleAttribute();\n    classAttr.items = format.value ? [format.value] : [];\n    classAttr.removables = [...Object.values(MediaFormats)];\n\n    if (format.value === MediaFormats.FixedWidth || format.value === MediaFormats.FixedSize) {\n      styleAttr.width = valueToUnit(format.width || format.defaultWidth);\n    }\n\n    if (format.value === MediaFormats.FixedHeight || format.value === MediaFormats.FixedSize) {\n      styleAttr.height = valueToUnit(format.height || format.defaultHeight);\n    }\n\n    if (value) {\n      attrs[\"blm-custom\"] = value.url + \"/\" + value.rootFile;\n      model.editorOptions = value;\n    } else {\n      attrs.removables = [\"blm-custom\"];\n      model.editorOptions = null;\n    }\n\n    model.attributes = attrs;\n    model.classAttr = classAttr;\n    model.styleAttr = styleAttr;\n    setBLMElement(element, model);\n  }\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/html/question/main.ts"],"names":["ClassAttribute","LinkMedia","Attributes","StyleAttribute","BLMElement","MediaFormats","MediaOptionTypes","QuestionPropositionInfoTypes","QuestionPropositionTypes","QuestionPropositionValidTypes","QuestionTemplateTypes","TemplateEditorOptionTypes","createHTMLElement","isQuestionCustom","isQuestionPropositions","removeAllChildren","valueToUnit","getHTMLElement","getIntroductionMedia","setBLMElement","setBLMElementBy","setLinkMediaComponent","setQuestionMediaComponent","setSimpleContentComponent","setQuestionSoundComponent","setTextComponent","setQuestionMainHTML","root","main","introduction","type","title","text","media","sound","simpleContent","instruction","validate","content","NoHeader","element","classAttr","introMedia","value","items","push","removables","None","linkMedia","option","Linked","setQuestionValidateHTML","isEditable","setQuestionPropositionsHTML","setQuestionCustomHTML","parent","checked","propositions","isMCQ","restrictTypeToSingle","randomize","minimum","maximum","options","Multiple","Single","restrict_type_to_single","minprop","maxprop","length","getQuestionPropositionHTML","forEach","item","ind","itemHtml","cloneNode","lineBreak","document","createTextNode","setQuestionPropositionHTML","appendChild","str","proposition","index","validity","info","feedback","Right","Wrong","id","setQuestionPropositionInfoHTML","setQuestionPropositionFeedbackHTML","simple","simpleContentId","Detailed","custom","format","model","attrs","styleAttr","Object","values","FixedWidth","FixedSize","width","defaultWidth","FixedHeight","height","defaultHeight","url","rootFile","editorOptions","attributes"],"mappings":"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","sourcesContent":["import {\r\n  QuestionMain,\r\n  QuestionPropositions,\r\n  QuestionProposition,\r\n  QuestionPropositionInfo,\r\n  QuestionPropositionFeedback,\r\n  ClassAttribute,\r\n  QuestionIntroduction,\r\n  LinkMedia,\r\n  QuizPropositionsOptionsJSON,\r\n  QuestionValidate,\r\n  QuestionCustomComponent,\r\n  Attributes,\r\n  StyleAttribute,\r\n  BLMElement,\r\n  MediaConfigJSON,\r\n} from \"types\";\r\nimport {\r\n  MediaFormats,\r\n  MediaOptionTypes,\r\n  QuestionPropositionInfoTypes,\r\n  QuestionPropositionTypes,\r\n  QuestionPropositionValidTypes,\r\n  QuestionTemplateTypes,\r\n  TemplateEditorOptionTypes,\r\n} from \"editor-constants\";\r\nimport {\r\n  createHTMLElement,\r\n  isQuestionCustom,\r\n  isQuestionPropositions,\r\n  removeAllChildren,\r\n  valueToUnit,\r\n} from \"utils\";\r\nimport { getHTMLElement, getIntroductionMedia, setBLMElement, setBLMElementBy } from \"../../core\";\r\nimport {\r\n  setLinkMediaComponent,\r\n  setQuestionMediaComponent,\r\n  setSimpleContentComponent,\r\n  setQuestionSoundComponent,\r\n  setTextComponent,\r\n} from \"../component\";\r\n\r\nexport function setQuestionMainHTML(\r\n  root: HTMLElement,\r\n  main: QuestionMain,\r\n  introduction: QuestionIntroduction,\r\n  type: QuestionTemplateTypes\r\n) {\r\n  const { title, text, media, sound, simpleContent, instruction, validate, content } = main;\r\n\r\n  if (type !== QuestionTemplateTypes.NoHeader) {\r\n    const element = getHTMLElement(root, \"[id='mainquestion\");\r\n    const classAttr = new ClassAttribute();\r\n    const introMedia = getIntroductionMedia(introduction);\r\n\r\n    if (sound.value) {\r\n      classAttr.items.push(\"hassound\");\r\n    } else {\r\n      classAttr.removables.push(\"hassound\");\r\n    }\r\n\r\n    if (simpleContent.value !== TemplateEditorOptionTypes.None) {\r\n      classAttr.items.push(\"hassimplecontent\");\r\n    } else {\r\n      classAttr.removables.push(\"hassimplecontent\");\r\n    }\r\n\r\n    if (!media.value && introMedia) {\r\n      const linkMedia = new LinkMedia();\r\n      linkMedia.option = MediaOptionTypes.Linked;\r\n\r\n      media.value = linkMedia;\r\n    }\r\n\r\n    if (element) {\r\n      setTextComponent(element, \"[blm-value='entiled']\", title);\r\n      setTextComponent(element, \"[blm-value='description']\", text);\r\n      setLinkMediaComponent(element, \"[blm-value='mainmedia']\", media, introMedia, classAttr);\r\n      setQuestionSoundComponent(element, \"[blm-value='mainsound']\", sound);\r\n      setSimpleContentComponent(element, \"[blm-value='knowmore']\", simpleContent);\r\n      setTextComponent(element, \"[blm-value='instruction']\", instruction);\r\n      setQuestionValidateHTML(element, validate);\r\n    }\r\n  }\r\n\r\n  if (isQuestionPropositions(content)) {\r\n    if (content.isEditable && content.value) {\r\n      setQuestionPropositionsHTML(root, content.value);\r\n    }\r\n  } else if (isQuestionCustom(content)) {\r\n    setQuestionCustomHTML(root, content);\r\n  }\r\n}\r\n\r\nfunction setQuestionValidateHTML(parent: HTMLElement, validate: QuestionValidate) {\r\n  const { checked } = validate;\r\n  const element = getHTMLElement(parent, \"[blm-value='validate']\");\r\n\r\n  if (element) {\r\n    const classAttr = new ClassAttribute();\r\n\r\n    if (checked) {\r\n      classAttr.removables.push(\"deactivated\");\r\n    } else {\r\n      classAttr.items.push(\"deactivated\");\r\n    }\r\n\r\n    setBLMElement(element, { classAttr });\r\n  }\r\n}\r\n\r\nfunction setQuestionPropositionsHTML(root: HTMLElement, propositions: QuestionPropositions) {\r\n  const { isMCQ, restrictTypeToSingle, randomize, minimum, maximum, items } = propositions;\r\n  const element = getHTMLElement(root, \"[blm-value='propositions']\");\r\n  const options: QuizPropositionsOptionsJSON = {\r\n    type: isMCQ ? QuestionPropositionTypes.Multiple : QuestionPropositionTypes.Single,\r\n    restrict_type_to_single: restrictTypeToSingle,\r\n    randomize,\r\n    minprop: minimum,\r\n    maxprop: maximum,\r\n  };\r\n  const classAttr = new ClassAttribute();\r\n  classAttr.items = [\"nbpropositions\" + items.length];\r\n  classAttr.removables = [/^nbpropositions(\\d+)$/g];\r\n\r\n  if (element) {\r\n    setBLMElement(element, { options, classAttr });\r\n\r\n    //Proposition items html\r\n    const parent = getQuestionPropositionHTML(element);\r\n\r\n    if (parent) {\r\n      removeAllChildren(element);\r\n\r\n      if (items) {\r\n        items.forEach((item, ind) => {\r\n          const itemHtml = parent.cloneNode(true) as HTMLElement;\r\n          const lineBreak = document.createTextNode(\"\\n\"); //Remove this tag, if it runs slower\r\n\r\n          setQuestionPropositionHTML(itemHtml, item, ind);\r\n\r\n          element.appendChild(lineBreak);\r\n          element.appendChild(itemHtml);\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getQuestionPropositionHTML(parent: HTMLElement) {\r\n  const element = getHTMLElement(parent, \"[blm-value='proposition']\");\r\n\r\n  if (element) {\r\n    return element;\r\n  } else {\r\n    const str = `<li blm-editable blm-value=\"proposition\" blm-option=\"right\" class=\"\">\r\n    <div class=\"proposition\">\r\n      <div class=\"mainprop\">\r\n        <div class=\"mediaprop\" blm-value=\"mediaprop\" blm-option=\"none\">\r\n          <img src=\"\"></img>\r\n        </div>\r\n        <div class=\"knowmoreprop\" blm-value=\"knowmoreprop\" blm-option=\"none\">\r\n          <div class=\"knowmoreproppopupoff\">\r\n            <div class=\"knowmoreproppopuptitle\" blm-value=\"knowmoreproppopuptitle\"></div>\r\n            <div class=\"knowmoreproppopuptext\" blm-value=\"knowmoreproppopuptext\"></div>\r\n          </div>\r\n        </div>\r\n        <div class=\"soundprop\" blm-value=\"soundprop\" blm-option=\"none\">\r\n          <audio>\r\n          </audio>\r\n        </div>\r\n        <div class=\"singlepropositionwrapper\">\r\n          <div class=\"propositiontitle\" blm-editable blm-value=\"propositiontitle\" blm-id=\"propitem-1-1\" blm-component=\"text\"></div>\r\n          <div class=\"propositiontext\" blm-editable blm-value=\"propositiontext\" blm-id=\"propitem-1-2\" blm-component=\"text\"></div>\r\n        </div>\r\n      </div>\r\n      <div id=\"feedbackprop\" class=\"d-none\">\r\n        <div class=\"mediafeedbackprop\" blm-editable blm-value=\"mediafeedbackprop\" blm-option=\"none\">\r\n          <img src=\"\"></img>\r\n        </div>\r\n        <div class=\"soundfeedbackprop\" blm-editable blm-value=\"soundfeedbackprop\" blm-option=\"none\">\r\n          <audio>\r\n          </audio>\r\n        </div>\r\n        <div class=\"propositionfeedbacktextwrapper\">\r\n          <div class=\"propositionfeedbacktitle\" blm-editable blm-value=\"propositionfeedbacktitle\"></div>\r\n          <div class=\"propositionfeedbacktext\" blm-editable blm-value=\"propositionfeedbacktext\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </li>`;\r\n\r\n    return createHTMLElement(str);\r\n  }\r\n}\r\n\r\nfunction setQuestionPropositionHTML(\r\n  parent: HTMLElement,\r\n  proposition: QuestionProposition,\r\n  index: number\r\n) {\r\n  const { validity, title, text, media, sound, info, feedback } = proposition;\r\n  const classAttr = new ClassAttribute();\r\n  const option = validity.value\r\n    ? QuestionPropositionValidTypes.Right\r\n    : QuestionPropositionValidTypes.Wrong;\r\n\r\n  if (media.value) {\r\n    classAttr.items.push(\"hasmedia\");\r\n  } else {\r\n    classAttr.removables.push(\"hasmedia\");\r\n  }\r\n\r\n  if (sound.value) {\r\n    classAttr.items.push(\"hassound\");\r\n  } else {\r\n    classAttr.removables.push(\"hassound\");\r\n  }\r\n\r\n  if (info.value && info.value.type !== QuestionPropositionInfoTypes.None) {\r\n    classAttr.items.push(\"hasknowmore\");\r\n  } else {\r\n    classAttr.removables.push(\"hasknowmore\");\r\n  }\r\n\r\n  setBLMElement(parent, { option, classAttr });\r\n  setTextComponent(parent, \"[blm-value='propositiontitle']\", title, {\r\n    id: `propitem-${index + 1}-1`,\r\n  });\r\n  setTextComponent(parent, \"[blm-value='propositiontext']\", text, {\r\n    id: `propitem-${index + 1}-2`,\r\n  });\r\n  setQuestionMediaComponent(parent, \"[blm-value='mediaprop']\", media);\r\n  setQuestionSoundComponent(parent, \"[blm-value='soundprop']\", sound);\r\n\r\n  if (info.isEditable && info.value) {\r\n    setQuestionPropositionInfoHTML(parent, info.value);\r\n  }\r\n  setQuestionPropositionFeedbackHTML(parent, feedback);\r\n}\r\n\r\nfunction setQuestionPropositionInfoHTML(parent: HTMLElement, info: QuestionPropositionInfo) {\r\n  const {\r\n    type,\r\n    simple: { text, title },\r\n    simpleContentId,\r\n  } = info;\r\n  let option: string;\r\n\r\n  if (type === QuestionPropositionInfoTypes.Detailed) {\r\n    option =\r\n      simpleContentId !== TemplateEditorOptionTypes.None\r\n        ? `simplecontent(${simpleContentId})`\r\n        : QuestionPropositionInfoTypes.None;\r\n  } else {\r\n    option = type;\r\n  }\r\n\r\n  setBLMElementBy(parent, \"[blm-value='knowmoreprop']\", { option });\r\n  setTextComponent(parent, \"[blm-value='knowmoreproppopuptitle']\", title);\r\n  setTextComponent(parent, \"[blm-value='knowmoreproppopuptext']\", text);\r\n}\r\n\r\nfunction setQuestionPropositionFeedbackHTML(\r\n  parent: HTMLElement,\r\n  feedback: QuestionPropositionFeedback\r\n) {\r\n  const { title, text, media, sound } = feedback;\r\n  const element = getHTMLElement(parent, \"[id='feedbackprop']\");\r\n\r\n  if (element) {\r\n    setTextComponent(element, \"[blm-value='propositionfeedbacktitle']\", title);\r\n    setTextComponent(element, \"[blm-value='propositionfeedbacktext']\", text);\r\n    setQuestionMediaComponent(element, \"[blm-value='mediafeedbackprop']\", media);\r\n    setQuestionSoundComponent(element, \"[blm-value='soundfeedbackprop']\", sound);\r\n  }\r\n}\r\n\r\nfunction setQuestionCustomHTML(parent: HTMLElement, custom: QuestionCustomComponent) {\r\n  const element = getHTMLElement(parent, \"[blm-value='maincustommedia']\");\r\n\r\n  if (element) {\r\n    const { format, value } = custom;\r\n    const model = new BLMElement<MediaConfigJSON>();\r\n    const attrs = new Attributes();\r\n    const classAttr = new ClassAttribute();\r\n    const styleAttr = new StyleAttribute();\r\n\r\n    classAttr.items = format.value ? [format.value] : [];\r\n    classAttr.removables = [...Object.values(MediaFormats)];\r\n\r\n    if (format.value === MediaFormats.FixedWidth || format.value === MediaFormats.FixedSize) {\r\n      styleAttr.width = valueToUnit(format.width || format.defaultWidth);\r\n    }\r\n\r\n    if (format.value === MediaFormats.FixedHeight || format.value === MediaFormats.FixedSize) {\r\n      styleAttr.height = valueToUnit(format.height || format.defaultHeight);\r\n    }\r\n\r\n    if (value) {\r\n      attrs[\"blm-custom\"] = value.url + \"/\" + value.rootFile;\r\n      model.editorOptions = value;\r\n    } else {\r\n      attrs.removables = [\"blm-custom\"];\r\n      model.editorOptions = null;\r\n    }\r\n\r\n    model.attributes = attrs;\r\n    model.classAttr = classAttr;\r\n    model.styleAttr = styleAttr;\r\n\r\n    setBLMElement(element, model);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}