{"ast":null,"code":"import { createContext, useContext } from \"react\";\nimport { DragGeometry, HandleRoles, Point, Matrix } from \"./types\";\nexport class TransformService {\n  constructor() {\n    this.data = new DragGeometry();\n    this.constraints = void 0;\n    this.setData = void 0;\n    this.onChange = void 0;\n    this.temp = new Point();\n    this.tempMatrix = new Matrix();\n    this.dragging = false;\n    this.translation = new DragGeometry();\n    this.currentDragRole = HandleRoles.NO_ROLE;\n    this.mouseDownPoint = void 0;\n    this.originalData = new DragGeometry();\n    this.handleDocumentMouseMove = this.handleDocumentMouseMove.bind(this);\n    this.handleDocumentMouseUp = this.handleDocumentMouseUp.bind(this);\n  }\n\n  startDrag(event, role, data, setData, constraints, onChange) {\n    event.stopPropagation();\n    event.preventDefault();\n    this.data = data;\n    this.constraints = constraints;\n    this.setData = setData;\n    this.onChange = onChange;\n    this.dragging = true;\n    this.currentDragRole = role;\n    this.mouseDownPoint = new Point(event.pageX, event.pageY);\n    this.originalData = { ...this.data\n    };\n    this.addDocumentListeners();\n  }\n\n  addDocumentListeners() {\n    document.addEventListener(\"mousemove\", this.handleDocumentMouseMove);\n    document.addEventListener(\"mouseup\", this.handleDocumentMouseUp);\n    document.addEventListener(\"mouseleave\", this.handleDocumentMouseUp);\n  }\n\n  removeDocumentListeners() {\n    document.removeEventListener(\"mousemove\", this.handleDocumentMouseMove);\n    document.removeEventListener(\"mouseup\", this.handleDocumentMouseUp);\n    document.removeEventListener(\"mouseleave\", this.handleDocumentMouseUp);\n  }\n\n  handleDocumentMouseMove(event) {\n    if (!this.dragging) {\n      return;\n    }\n\n    this.translation.x = 0;\n    this.translation.y = 0;\n    this.translation.height = 0;\n    this.translation.width = 0;\n\n    if (HandleRoles.isMove(this.currentDragRole)) {\n      this.applyMovement(event, this.translation);\n      this.applyConstraints(this.translation, this.currentDragRole);\n    }\n\n    if (HandleRoles.isResizeLeft(this.currentDragRole)) {\n      this.applyResizeLeft(event, this.translation);\n    }\n\n    if (HandleRoles.isResizeUp(this.currentDragRole)) {\n      this.applyResizeUp(event, this.translation);\n    }\n\n    if (HandleRoles.isResizeRight(this.currentDragRole)) {\n      this.applyResizeRight(event, this.translation);\n    }\n\n    if (HandleRoles.isResizeDown(this.currentDragRole)) {\n      this.applyResizeDown(event, this.translation);\n    }\n\n    this.applyConstraints(this.translation, this.currentDragRole);\n    this.applyAnchorPoint(this.originalData, this.translation, this.currentDragRole);\n    this.applyTranslation(this.translation);\n    this.updateModel({ ...this.data\n    });\n  }\n\n  handleDocumentMouseUp() {\n    this.removeDocumentListeners();\n    this.dragging = false;\n    this.updateModel(undefined);\n\n    if (this.onChange) {\n      this.onChange(this.data);\n    }\n  }\n\n  updateModel(data) {\n    if (this.setData) {\n      this.setData(data);\n    }\n  } // For Move, Resize and Rotate actions\n\n\n  applyConstraints(translation, currentDragRole) {\n    if (this.constraints) {\n      this.constraints.forEach(constraint => constraint.applyConstraint(this.originalData, translation, currentDragRole));\n    }\n  }\n\n  applyAnchorPoint(original, translation, currentDragRole) {\n    if (HandleRoles.isRotate(currentDragRole)) {\n      let mid = new Point(original.width / 2, original.height / 2);\n      this.tempMatrix.identity();\n      this.tempMatrix.rotate(original.rotation);\n      this.temp = this.tempMatrix.transformPoint(mid);\n      this.tempMatrix.identity();\n      this.tempMatrix.rotate(original.rotation + translation.rotation);\n      mid = this.tempMatrix.transformPoint(mid);\n      translation.x = this.temp.x - mid.x;\n      translation.y = this.temp.y - mid.y;\n    }\n\n    if (HandleRoles.isResize(currentDragRole)) {\n      const proportion = this.getAnchorProportion(currentDragRole);\n      this.tempMatrix.identity();\n      this.tempMatrix.rotate(original.rotation);\n      this.temp.x = proportion.x * (translation.width + this.originalData.width) - proportion.x * this.originalData.width;\n      this.temp.y = proportion.y * (translation.height + this.originalData.height) - proportion.y * this.originalData.height;\n      this.temp = this.tempMatrix.transformPoint(this.temp);\n      translation.x += this.temp.x;\n      translation.y += this.temp.y;\n    }\n  }\n\n  getAnchorProportion(resizeHandleRole) {\n    const anchorPoint = new Point();\n\n    if (HandleRoles.isResizeUp(resizeHandleRole)) {\n      if (HandleRoles.isResizeLeft(resizeHandleRole)) {\n        // Upper left handle being used, so the lower right corner should not move.\n        anchorPoint.x = -1;\n        anchorPoint.y = -1;\n      } else if (HandleRoles.isResizeRight(resizeHandleRole)) {\n        // Upper right handle\n        anchorPoint.x = 0;\n        anchorPoint.y = -1;\n      } else {\n        anchorPoint.x = -0.5;\n        anchorPoint.y = -1;\n      }\n    } else if (HandleRoles.isResizeDown(resizeHandleRole)) {\n      if (HandleRoles.isResizeLeft(resizeHandleRole)) {\n        // lower left handle\n        anchorPoint.x = -1;\n        anchorPoint.y = 0;\n      } else if (HandleRoles.isResizeRight(resizeHandleRole)) {\n        // lower right handle\n        anchorPoint.x = 0;\n        anchorPoint.y = 0;\n      } else {\n        // middle bottom handle\n        anchorPoint.x = -0.5;\n        anchorPoint.y = 0;\n      }\n    } else if (HandleRoles.isResizeLeft(resizeHandleRole)) {\n      // left middle handle\n      anchorPoint.x = -1;\n      anchorPoint.y = -0.5;\n    } else {\n      // right middle\n      anchorPoint.x = 0;\n      anchorPoint.y = -0.5;\n    }\n\n    return anchorPoint;\n  }\n\n  applyTranslation(translation) {\n    if (this.data.hasOwnProperty(\"x\")) {\n      this.data.x = translation.x + this.originalData.x;\n    }\n\n    if (this.data.hasOwnProperty(\"y\")) {\n      this.data.y = translation.y + this.originalData.y;\n    }\n\n    if (this.data.hasOwnProperty(\"width\")) {\n      this.data.width = translation.width + this.originalData.width;\n    }\n\n    if (this.data.hasOwnProperty(\"height\")) {\n      this.data.height = translation.height + this.originalData.height;\n    }\n\n    if (this.data.hasOwnProperty(\"rotation\")) {\n      this.data.rotation = translation.rotation + this.originalData.rotation;\n    }\n  }\n\n  applyMovement(event, translation) {\n    if (!this.mouseDownPoint) {\n      return;\n    }\n\n    this.temp.x = event.pageX;\n    this.temp.y = event.pageY;\n    const deltaX = this.temp.x - this.mouseDownPoint.x;\n    const deltaY = this.temp.y - this.mouseDownPoint.y;\n    translation.x = deltaX;\n    translation.y = deltaY;\n  }\n\n  applyResizeRight(event, translation) {\n    if (!this.mouseDownPoint) {\n      return;\n    }\n\n    this.temp.x = event.pageX;\n    this.temp.y = event.pageY;\n    this.tempMatrix.identity();\n    this.tempMatrix.rotate(this.originalData.rotation);\n    const invMatrix = this.tempMatrix.clone();\n    invMatrix.invert();\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\n    const localMousePoint = invMatrix.transformPoint(this.temp);\n    const resizeDistance = localMousePoint.x - localOriginalMousePoint.x;\n    translation.width += resizeDistance;\n  }\n\n  applyResizeDown(event, translation) {\n    if (!this.mouseDownPoint) {\n      return;\n    }\n\n    this.temp.x = event.pageX;\n    this.temp.y = event.pageY;\n    this.tempMatrix.identity();\n    this.tempMatrix.rotate(this.originalData.rotation);\n    const invMatrix = this.tempMatrix.clone();\n    invMatrix.invert();\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\n    const localMousePoint = invMatrix.transformPoint(this.temp);\n    const resizeDistance = localMousePoint.y - localOriginalMousePoint.y;\n    translation.height += resizeDistance;\n  }\n\n  applyResizeLeft(event, translation) {\n    if (!this.mouseDownPoint) {\n      return;\n    }\n\n    this.temp.x = event.pageX;\n    this.temp.y = event.pageY;\n    this.tempMatrix.identity();\n    this.tempMatrix.rotate(this.originalData.rotation);\n    const invMatrix = this.tempMatrix.clone();\n    invMatrix.invert();\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\n    const localMousePoint = invMatrix.transformPoint(this.temp);\n    const resizeDistance = localOriginalMousePoint.x - localMousePoint.x;\n    translation.width += resizeDistance;\n  }\n\n  applyResizeUp(event, translation) {\n    if (!this.mouseDownPoint) {\n      return;\n    }\n\n    this.temp.x = event.pageX;\n    this.temp.y = event.pageY;\n    this.tempMatrix.identity();\n    this.tempMatrix.rotate(this.originalData.rotation);\n    const invMatrix = this.tempMatrix.clone();\n    invMatrix.invert();\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\n    const localMousePoint = invMatrix.transformPoint(this.temp);\n    const resizeDistance = localOriginalMousePoint.y - localMousePoint.y;\n    translation.height += resizeDistance;\n  }\n\n}\nexport class MovementConstraint {\n  constructor(minX = NaN, minY = NaN, maxX = NaN, maxY = NaN) {\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n\n  applyConstraint(original, translation, resizeHandleRole) {\n    if (!isNaN(this.maxX)) {\n      if (original.x + translation.x + original.width + translation.width > this.maxX) {\n        if (HandleRoles.isMove(resizeHandleRole)) {\n          translation.x = this.maxX - (original.x + original.width);\n        } else if (HandleRoles.isResizeRight(resizeHandleRole)) {\n          translation.width = this.maxX - (original.x + translation.x + original.width);\n        }\n      }\n    }\n\n    if (!isNaN(this.maxY)) {\n      if (original.y + translation.y + original.height + translation.height > this.maxY) {\n        if (HandleRoles.isMove(resizeHandleRole)) {\n          translation.y = this.maxY - (original.y + original.height);\n        } else if (HandleRoles.isResizeDown(resizeHandleRole)) {\n          translation.height = this.maxY - (original.y + translation.y + original.height);\n        }\n      }\n    }\n\n    if (!isNaN(this.minX)) {\n      if (original.x + translation.x < this.minX) {\n        translation.x = this.minX - original.x;\n      }\n\n      if (HandleRoles.isResizeLeft(resizeHandleRole) && original.x - translation.width < this.minX) {\n        translation.width = -this.minX + original.x;\n      }\n    }\n\n    if (!isNaN(this.minY)) {\n      if (original.y + translation.y < this.minY) {\n        translation.y = this.minY - original.y;\n      }\n\n      if (HandleRoles.isResizeUp(resizeHandleRole) && original.y - translation.height < this.minY) {\n        translation.height = -this.minY + original.y;\n      }\n    }\n  }\n\n}\nexport class SizeConstraint {\n  constructor(minWidth = NaN, minHeight = NaN, maxWidth = NaN, maxHeight = NaN) {\n    this.minWidth = minWidth;\n    this.minHeight = minHeight;\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n  }\n\n  applyConstraint(original, translation, resizeHandleRole) {\n    if (!isNaN(this.maxWidth)) {\n      if (original.width + translation.width > this.maxWidth) {\n        translation.width = this.maxWidth - original.width;\n      }\n    }\n\n    if (!isNaN(this.maxHeight)) {\n      if (original.height + translation.height > this.maxHeight) {\n        translation.height = this.maxHeight - original.height;\n      }\n    }\n\n    if (!isNaN(this.minWidth)) {\n      if (original.width + translation.width < this.minWidth) {\n        translation.width = this.minWidth - original.width;\n      }\n    }\n\n    if (!isNaN(this.minHeight)) {\n      if (original.height + translation.height < this.minHeight) {\n        translation.height = this.minHeight - original.height;\n      }\n    }\n  }\n\n}\nexport const TransformContext = createContext(new TransformService());\nexport const useTransformContext = () => {\n  return useContext(TransformContext);\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/transform/utils.ts"],"names":["createContext","useContext","DragGeometry","HandleRoles","Point","Matrix","TransformService","constructor","data","constraints","setData","onChange","temp","tempMatrix","dragging","translation","currentDragRole","NO_ROLE","mouseDownPoint","originalData","handleDocumentMouseMove","bind","handleDocumentMouseUp","startDrag","event","role","stopPropagation","preventDefault","pageX","pageY","addDocumentListeners","document","addEventListener","removeDocumentListeners","removeEventListener","x","y","height","width","isMove","applyMovement","applyConstraints","isResizeLeft","applyResizeLeft","isResizeUp","applyResizeUp","isResizeRight","applyResizeRight","isResizeDown","applyResizeDown","applyAnchorPoint","applyTranslation","updateModel","undefined","forEach","constraint","applyConstraint","original","isRotate","mid","identity","rotate","rotation","transformPoint","isResize","proportion","getAnchorProportion","resizeHandleRole","anchorPoint","hasOwnProperty","deltaX","deltaY","invMatrix","clone","invert","localOriginalMousePoint","localMousePoint","resizeDistance","MovementConstraint","minX","NaN","minY","maxX","maxY","isNaN","SizeConstraint","minWidth","minHeight","maxWidth","maxHeight","TransformContext","useTransformContext"],"mappings":"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","sourcesContent":["import {\r\n  createContext,\r\n  useContext,\r\n  MouseEvent as ReactMouseEvent,\r\n  Dispatch,\r\n  SetStateAction,\r\n} from \"react\";\r\n\r\nimport { DragGeometry, HandleRoles, IConstraint, Point, Matrix } from \"./types\";\r\n\r\ntype SetDataState = Dispatch<SetStateAction<DragGeometry | undefined>>;\r\ntype OnChange = (data: DragGeometry) => void;\r\n\r\nexport class TransformService {\r\n  private data = new DragGeometry();\r\n  private constraints?: Array<IConstraint>;\r\n  private setData?: SetDataState;\r\n  private onChange?: OnChange;\r\n  private temp = new Point();\r\n  private tempMatrix = new Matrix();\r\n\r\n  private dragging = false;\r\n  private translation = new DragGeometry();\r\n  private currentDragRole = HandleRoles.NO_ROLE;\r\n  private mouseDownPoint?: Point;\r\n  private originalData = new DragGeometry();\r\n\r\n  constructor() {\r\n    this.handleDocumentMouseMove = this.handleDocumentMouseMove.bind(this);\r\n    this.handleDocumentMouseUp = this.handleDocumentMouseUp.bind(this);\r\n  }\r\n\r\n  startDrag(\r\n    event: ReactMouseEvent,\r\n    role: number,\r\n    data: DragGeometry,\r\n    setData: SetDataState,\r\n    constraints?: IConstraint[],\r\n    onChange?: OnChange\r\n  ) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n\r\n    this.data = data;\r\n    this.constraints = constraints;\r\n    this.setData = setData;\r\n    this.onChange = onChange;\r\n\r\n    this.dragging = true;\r\n    this.currentDragRole = role;\r\n    this.mouseDownPoint = new Point(event.pageX, event.pageY);\r\n    this.originalData = { ...this.data };\r\n\r\n    this.addDocumentListeners();\r\n  }\r\n\r\n  private addDocumentListeners() {\r\n    document.addEventListener(\"mousemove\", this.handleDocumentMouseMove);\r\n    document.addEventListener(\"mouseup\", this.handleDocumentMouseUp);\r\n    document.addEventListener(\"mouseleave\", this.handleDocumentMouseUp);\r\n  }\r\n\r\n  private removeDocumentListeners() {\r\n    document.removeEventListener(\"mousemove\", this.handleDocumentMouseMove);\r\n    document.removeEventListener(\"mouseup\", this.handleDocumentMouseUp);\r\n    document.removeEventListener(\"mouseleave\", this.handleDocumentMouseUp);\r\n  }\r\n\r\n  private handleDocumentMouseMove(event: MouseEvent) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    this.translation.x = 0;\r\n    this.translation.y = 0;\r\n    this.translation.height = 0;\r\n    this.translation.width = 0;\r\n\r\n    if (HandleRoles.isMove(this.currentDragRole)) {\r\n      this.applyMovement(event, this.translation);\r\n      this.applyConstraints(this.translation, this.currentDragRole);\r\n    }\r\n\r\n    if (HandleRoles.isResizeLeft(this.currentDragRole)) {\r\n      this.applyResizeLeft(event, this.translation);\r\n    }\r\n    if (HandleRoles.isResizeUp(this.currentDragRole)) {\r\n      this.applyResizeUp(event, this.translation);\r\n    }\r\n    if (HandleRoles.isResizeRight(this.currentDragRole)) {\r\n      this.applyResizeRight(event, this.translation);\r\n    }\r\n    if (HandleRoles.isResizeDown(this.currentDragRole)) {\r\n      this.applyResizeDown(event, this.translation);\r\n    }\r\n\r\n    this.applyConstraints(this.translation, this.currentDragRole);\r\n    this.applyAnchorPoint(this.originalData, this.translation, this.currentDragRole);\r\n    this.applyTranslation(this.translation);\r\n\r\n    this.updateModel({ ...this.data });\r\n  }\r\n\r\n  private handleDocumentMouseUp() {\r\n    this.removeDocumentListeners();\r\n    this.dragging = false;\r\n\r\n    this.updateModel(undefined);\r\n\r\n    if (this.onChange) {\r\n      this.onChange(this.data);\r\n    }\r\n  }\r\n\r\n  private updateModel(data?: DragGeometry) {\r\n    if (this.setData) {\r\n      this.setData(data);\r\n    }\r\n  }\r\n\r\n  // For Move, Resize and Rotate actions\r\n  private applyConstraints(translation: DragGeometry, currentDragRole: number) {\r\n    if (this.constraints) {\r\n      this.constraints.forEach((constraint) =>\r\n        constraint.applyConstraint(this.originalData, translation, currentDragRole)\r\n      );\r\n    }\r\n  }\r\n\r\n  private applyAnchorPoint(\r\n    original: DragGeometry,\r\n    translation: DragGeometry,\r\n    currentDragRole: number\r\n  ) {\r\n    if (HandleRoles.isRotate(currentDragRole)) {\r\n      let mid = new Point(original.width / 2, original.height / 2);\r\n\r\n      this.tempMatrix.identity();\r\n      this.tempMatrix.rotate(original.rotation);\r\n      this.temp = this.tempMatrix.transformPoint(mid);\r\n\r\n      this.tempMatrix.identity();\r\n      this.tempMatrix.rotate(original.rotation + translation.rotation);\r\n\r\n      mid = this.tempMatrix.transformPoint(mid);\r\n\r\n      translation.x = this.temp.x - mid.x;\r\n      translation.y = this.temp.y - mid.y;\r\n    }\r\n\r\n    if (HandleRoles.isResize(currentDragRole)) {\r\n      const proportion = this.getAnchorProportion(currentDragRole);\r\n\r\n      this.tempMatrix.identity();\r\n      this.tempMatrix.rotate(original.rotation);\r\n\r\n      this.temp.x =\r\n        proportion.x * (translation.width + this.originalData.width) -\r\n        proportion.x * this.originalData.width;\r\n      this.temp.y =\r\n        proportion.y * (translation.height + this.originalData.height) -\r\n        proportion.y * this.originalData.height;\r\n\r\n      this.temp = this.tempMatrix.transformPoint(this.temp);\r\n\r\n      translation.x += this.temp.x;\r\n      translation.y += this.temp.y;\r\n    }\r\n  }\r\n\r\n  private getAnchorProportion(resizeHandleRole: number) {\r\n    const anchorPoint = new Point();\r\n\r\n    if (HandleRoles.isResizeUp(resizeHandleRole)) {\r\n      if (HandleRoles.isResizeLeft(resizeHandleRole)) {\r\n        // Upper left handle being used, so the lower right corner should not move.\r\n        anchorPoint.x = -1;\r\n        anchorPoint.y = -1;\r\n      } else if (HandleRoles.isResizeRight(resizeHandleRole)) {\r\n        // Upper right handle\r\n        anchorPoint.x = 0;\r\n        anchorPoint.y = -1;\r\n      } else {\r\n        anchorPoint.x = -0.5;\r\n        anchorPoint.y = -1;\r\n      }\r\n    } else if (HandleRoles.isResizeDown(resizeHandleRole)) {\r\n      if (HandleRoles.isResizeLeft(resizeHandleRole)) {\r\n        // lower left handle\r\n        anchorPoint.x = -1;\r\n        anchorPoint.y = 0;\r\n      } else if (HandleRoles.isResizeRight(resizeHandleRole)) {\r\n        // lower right handle\r\n        anchorPoint.x = 0;\r\n        anchorPoint.y = 0;\r\n      } else {\r\n        // middle bottom handle\r\n        anchorPoint.x = -0.5;\r\n        anchorPoint.y = 0;\r\n      }\r\n    } else if (HandleRoles.isResizeLeft(resizeHandleRole)) {\r\n      // left middle handle\r\n      anchorPoint.x = -1;\r\n      anchorPoint.y = -0.5;\r\n    } else {\r\n      // right middle\r\n      anchorPoint.x = 0;\r\n      anchorPoint.y = -0.5;\r\n    }\r\n    return anchorPoint;\r\n  }\r\n\r\n  private applyTranslation(translation: DragGeometry) {\r\n    if (this.data.hasOwnProperty(\"x\")) {\r\n      this.data.x = translation.x + this.originalData.x;\r\n    }\r\n    if (this.data.hasOwnProperty(\"y\")) {\r\n      this.data.y = translation.y + this.originalData.y;\r\n    }\r\n    if (this.data.hasOwnProperty(\"width\")) {\r\n      this.data.width = translation.width + this.originalData.width;\r\n    }\r\n    if (this.data.hasOwnProperty(\"height\")) {\r\n      this.data.height = translation.height + this.originalData.height;\r\n    }\r\n    if (this.data.hasOwnProperty(\"rotation\")) {\r\n      this.data.rotation = translation.rotation + this.originalData.rotation;\r\n    }\r\n  }\r\n\r\n  private applyMovement(event: MouseEvent, translation: DragGeometry) {\r\n    if (!this.mouseDownPoint) {\r\n      return;\r\n    }\r\n\r\n    this.temp.x = event.pageX;\r\n    this.temp.y = event.pageY;\r\n\r\n    const deltaX = this.temp.x - this.mouseDownPoint.x;\r\n    const deltaY = this.temp.y - this.mouseDownPoint.y;\r\n\r\n    translation.x = deltaX;\r\n    translation.y = deltaY;\r\n  }\r\n\r\n  private applyResizeRight(event: MouseEvent, translation: DragGeometry) {\r\n    if (!this.mouseDownPoint) {\r\n      return;\r\n    }\r\n\r\n    this.temp.x = event.pageX;\r\n    this.temp.y = event.pageY;\r\n\r\n    this.tempMatrix.identity();\r\n    this.tempMatrix.rotate(this.originalData.rotation);\r\n\r\n    const invMatrix = this.tempMatrix.clone();\r\n    invMatrix.invert();\r\n\r\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\r\n    const localMousePoint = invMatrix.transformPoint(this.temp);\r\n\r\n    const resizeDistance = localMousePoint.x - localOriginalMousePoint.x;\r\n\r\n    translation.width += resizeDistance;\r\n  }\r\n\r\n  private applyResizeDown(event: MouseEvent, translation: DragGeometry) {\r\n    if (!this.mouseDownPoint) {\r\n      return;\r\n    }\r\n\r\n    this.temp.x = event.pageX;\r\n    this.temp.y = event.pageY;\r\n\r\n    this.tempMatrix.identity();\r\n    this.tempMatrix.rotate(this.originalData.rotation);\r\n\r\n    const invMatrix = this.tempMatrix.clone();\r\n    invMatrix.invert();\r\n\r\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\r\n    const localMousePoint = invMatrix.transformPoint(this.temp);\r\n\r\n    const resizeDistance = localMousePoint.y - localOriginalMousePoint.y;\r\n\r\n    translation.height += resizeDistance;\r\n  }\r\n\r\n  private applyResizeLeft(event: MouseEvent, translation: DragGeometry) {\r\n    if (!this.mouseDownPoint) {\r\n      return;\r\n    }\r\n\r\n    this.temp.x = event.pageX;\r\n    this.temp.y = event.pageY;\r\n\r\n    this.tempMatrix.identity();\r\n    this.tempMatrix.rotate(this.originalData.rotation);\r\n\r\n    const invMatrix = this.tempMatrix.clone();\r\n    invMatrix.invert();\r\n\r\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\r\n    const localMousePoint = invMatrix.transformPoint(this.temp);\r\n\r\n    const resizeDistance = localOriginalMousePoint.x - localMousePoint.x;\r\n\r\n    translation.width += resizeDistance;\r\n  }\r\n\r\n  private applyResizeUp(event: MouseEvent, translation: DragGeometry) {\r\n    if (!this.mouseDownPoint) {\r\n      return;\r\n    }\r\n\r\n    this.temp.x = event.pageX;\r\n    this.temp.y = event.pageY;\r\n\r\n    this.tempMatrix.identity();\r\n    this.tempMatrix.rotate(this.originalData.rotation);\r\n\r\n    const invMatrix = this.tempMatrix.clone();\r\n    invMatrix.invert();\r\n\r\n    const localOriginalMousePoint = invMatrix.transformPoint(this.mouseDownPoint);\r\n    const localMousePoint = invMatrix.transformPoint(this.temp);\r\n\r\n    const resizeDistance = localOriginalMousePoint.y - localMousePoint.y;\r\n\r\n    translation.height += resizeDistance;\r\n  }\r\n}\r\n\r\nexport class MovementConstraint implements IConstraint {\r\n  constructor(\r\n    public minX: number = NaN,\r\n    public minY: number = NaN,\r\n    public maxX: number = NaN,\r\n    public maxY: number = NaN\r\n  ) {}\r\n\r\n  applyConstraint(original: DragGeometry, translation: DragGeometry, resizeHandleRole: number) {\r\n    if (!isNaN(this.maxX)) {\r\n      if (original.x + translation.x + original.width + translation.width > this.maxX) {\r\n        if (HandleRoles.isMove(resizeHandleRole)) {\r\n          translation.x = this.maxX - (original.x + original.width);\r\n        } else if (HandleRoles.isResizeRight(resizeHandleRole)) {\r\n          translation.width = this.maxX - (original.x + translation.x + original.width);\r\n        }\r\n      }\r\n    }\r\n    if (!isNaN(this.maxY)) {\r\n      if (original.y + translation.y + original.height + translation.height > this.maxY) {\r\n        if (HandleRoles.isMove(resizeHandleRole)) {\r\n          translation.y = this.maxY - (original.y + original.height);\r\n        } else if (HandleRoles.isResizeDown(resizeHandleRole)) {\r\n          translation.height = this.maxY - (original.y + translation.y + original.height);\r\n        }\r\n      }\r\n    }\r\n    if (!isNaN(this.minX)) {\r\n      if (original.x + translation.x < this.minX) {\r\n        translation.x = this.minX - original.x;\r\n      }\r\n      if (\r\n        HandleRoles.isResizeLeft(resizeHandleRole) &&\r\n        original.x - translation.width < this.minX\r\n      ) {\r\n        translation.width = -this.minX + original.x;\r\n      }\r\n    }\r\n    if (!isNaN(this.minY)) {\r\n      if (original.y + translation.y < this.minY) {\r\n        translation.y = this.minY - original.y;\r\n      }\r\n      if (HandleRoles.isResizeUp(resizeHandleRole) && original.y - translation.height < this.minY) {\r\n        translation.height = -this.minY + original.y;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class SizeConstraint implements IConstraint {\r\n  constructor(\r\n    public minWidth: number = NaN,\r\n    public minHeight: number = NaN,\r\n    public maxWidth: number = NaN,\r\n    public maxHeight: number = NaN\r\n  ) {}\r\n\r\n  public applyConstraint(\r\n    original: DragGeometry,\r\n    translation: DragGeometry,\r\n    resizeHandleRole: number\r\n  ) {\r\n    if (!isNaN(this.maxWidth)) {\r\n      if (original.width + translation.width > this.maxWidth) {\r\n        translation.width = this.maxWidth - original.width;\r\n      }\r\n    }\r\n    if (!isNaN(this.maxHeight)) {\r\n      if (original.height + translation.height > this.maxHeight) {\r\n        translation.height = this.maxHeight - original.height;\r\n      }\r\n    }\r\n    if (!isNaN(this.minWidth)) {\r\n      if (original.width + translation.width < this.minWidth) {\r\n        translation.width = this.minWidth - original.width;\r\n      }\r\n    }\r\n    if (!isNaN(this.minHeight)) {\r\n      if (original.height + translation.height < this.minHeight) {\r\n        translation.height = this.minHeight - original.height;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const TransformContext = createContext(new TransformService());\r\n\r\nexport const useTransformContext = () => {\r\n  return useContext(TransformContext);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}