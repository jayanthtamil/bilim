{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\actions\\\\simple-content\\\\BlmSimpleContentAction.tsx\";\nimport React, { Fragment, useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { FormControlLabel, Radio, RadioGroup, Select, MenuItem, ListItemIcon, Divider } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { ElementType, SCActionDisplayTypes } from \"editor-constants\";\nimport { getMediaTargets, getSimpleContentLabel, SIMPLE_CONTENT_FLAP_ITEMS, SIMPLE_CONTENT_POPUP_ITEMS } from \"utils\";\nimport BlmStructureSelect from \"components/structures/select\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport \"./styles.scss\";\nimport { getElement } from \"utils\";\n\nfunction getDefaultValue(option, display, targets) {\n  if (display) {\n    if (option === \"popup\" && SIMPLE_CONTENT_POPUP_ITEMS.includes(display)) {\n      return display;\n    } else if (option === \"flap\" && SIMPLE_CONTENT_FLAP_ITEMS.includes(display)) {\n      return display;\n    } else if (option === \"target\" && !SIMPLE_CONTENT_POPUP_ITEMS.includes(display) && !SIMPLE_CONTENT_FLAP_ITEMS.includes(display)) {\n      return display;\n    }\n  }\n\n  switch (option) {\n    case \"popup\":\n      return SCActionDisplayTypes.Large;\n\n    case \"flap\":\n      return SCActionDisplayTypes.LeftMedium;\n\n    case \"target\":\n      return (targets === null || targets === void 0 ? void 0 : targets.length) === 1 ? targets[0].id : undefined;\n  }\n}\n\nfunction BlmSimpleContentAction(props) {\n  const {\n    data,\n    type,\n    onChange,\n    structure\n  } = props;\n  const {\n    element,\n    template\n  } = useContentEditorCtx();\n  const {\n    simpleContentId,\n    option = \"popup\",\n    display\n  } = data || {};\n  const {\n    t\n  } = useTranslation(\"content-editor\");\n  const targets = useMemo(() => getMediaTargets(template), [template]);\n  const curDisplay = useMemo(() => getDefaultValue(option, display, targets), [display, option, targets]);\n\n  const updateChange = newData => {\n    if (onChange) {\n      onChange({\n        target: {\n          name: \"simpleContent\",\n          value: newData\n        }\n      });\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    const newData = {\n      simpleContentId,\n      option,\n      display: name !== \"option\" ? curDisplay : getDefaultValue(value, display, targets)\n    };\n\n    if (name === \"simpleContent\") {\n      newData.simpleContentId = value;\n    } else if (name === \"option\" || name === \"display\") {\n      newData[name] = value;\n    }\n\n    updateChange(newData);\n  };\n\n  const renderDropDown = () => {\n    if (option === \"popup\" || option === \"flap\") {\n      const templateType = structure && simpleContentId ? getElement(structure, simpleContentId) : undefined;\n      const arr = option === \"popup\" ? SIMPLE_CONTENT_POPUP_ITEMS : SIMPLE_CONTENT_FLAP_ITEMS;\n      return /*#__PURE__*/React.createElement(Select, {\n        name: \"display\",\n        value: curDisplay,\n        MenuProps: {\n          className: \"simple-action-dropdown-popover\"\n        },\n        className: \"simple-action-dropdown\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, arr.map((item, ind) => {\n        if ((templateType === null || templateType === void 0 ? void 0 : templateType.type) === \"simple_page\" && (item === \"popover_small\" || item === \"popover_medium\" || item === \"divider\")) {\n          return true;\n        }\n\n        if (item === \"divider\") {\n          return /*#__PURE__*/React.createElement(Divider, {\n            key: \"divider\" + ind,\n            className: \"simple-action-dropdown-divider\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 22\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(MenuItem, {\n            key: item,\n            value: item,\n            className: \"simple-action-dropdown-item\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }\n          }, getSimpleContentLabel(item), /*#__PURE__*/React.createElement(ListItemIcon, {\n            className: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }\n          }));\n        }\n      }));\n    } else if (option === \"target\") {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        name: \"display\",\n        value: curDisplay !== null && curDisplay !== void 0 ? curDisplay : \"none\",\n        MenuProps: {\n          PopoverClasses: {\n            root: \"simple-action-dropdown-popover\"\n          }\n        },\n        className: \"simple-action-dropdown\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      }, targets.length !== 1 && /*#__PURE__*/React.createElement(MenuItem, {\n        value: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }\n      }, targets.length ? t(\"target_option.select_a_target\") : t(\"target_option.no_target\")), targets.map(item => /*#__PURE__*/React.createElement(MenuItem, {\n        key: item.id,\n        value: item.id,\n        className: \"simple-action-dropdown-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ListItemIcon, {\n        className: \"target\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }\n      }), item.value.name))), targets.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"simple-action-warning-lbl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }, t(\"target_option.no_target\"), \".\"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }\n      }, t(\"target_option.transform_media\"))));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"simple-action-wrapper\", type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlmStructureSelect, {\n    name: \"simpleContent\",\n    element: element,\n    structures: {\n      show: false\n    },\n    annexes: {\n      show: true\n    },\n    selectables: [ElementType.SimplePage, ElementType.SimpleContent, ElementType.Page, ElementType.Screen],\n    value: simpleContentId,\n    className: \"structure-select-with-icons\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), simpleContentId && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    name: \"option\",\n    value: option,\n    className: \"simple-action-option-group\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    label: t(\"open_simplecontent_opt.popup\"),\n    control: /*#__PURE__*/React.createElement(Radio, {\n      className: \"radio-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 24\n      }\n    }),\n    value: \"popup\",\n    className: \"simple-action-frm-ctrl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    label: t(\"open_simplecontent_opt.flap\"),\n    control: /*#__PURE__*/React.createElement(Radio, {\n      className: \"radio-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 24\n      }\n    }),\n    value: \"flap\",\n    className: \"simple-action-frm-ctrl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    label: t(\"open_simplecontent_opt.target\"),\n    control: /*#__PURE__*/React.createElement(Radio, {\n      className: \"radio-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 24\n      }\n    }),\n    value: \"target\",\n    className: \"simple-action-frm-ctrl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  })), renderDropDown()));\n}\n\nexport default BlmSimpleContentAction;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/actions/simple-content/BlmSimpleContentAction.tsx"],"names":["React","Fragment","useMemo","clsx","FormControlLabel","Radio","RadioGroup","Select","MenuItem","ListItemIcon","Divider","useTranslation","ElementType","SCActionDisplayTypes","getMediaTargets","getSimpleContentLabel","SIMPLE_CONTENT_FLAP_ITEMS","SIMPLE_CONTENT_POPUP_ITEMS","BlmStructureSelect","useContentEditorCtx","getElement","getDefaultValue","option","display","targets","includes","Large","LeftMedium","length","id","undefined","BlmSimpleContentAction","props","data","type","onChange","structure","element","template","simpleContentId","t","curDisplay","updateChange","newData","target","name","value","handleChange","event","renderDropDown","templateType","arr","className","map","item","ind","PopoverClasses","root","show","SimplePage","SimpleContent","Page","Screen"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Fragment, useMemo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  FormControlLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Select,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CourseElement, CustomChangeEvent, SimpleContentAction } from \"types\";\r\nimport { ElementType, SCActionDisplayTypes } from \"editor-constants\";\r\nimport {\r\n  getMediaTargets,\r\n  getSimpleContentLabel,\r\n  SIMPLE_CONTENT_FLAP_ITEMS,\r\n  SIMPLE_CONTENT_POPUP_ITEMS,\r\n} from \"utils\";\r\nimport BlmStructureSelect from \"components/structures/select\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport \"./styles.scss\";\r\nimport { ContainerProps } from \"./simple-content-action-container\";\r\nimport { getElement } from \"utils\";\r\n\r\nexport interface CompProps {\r\n  data?: SimpleContentAction;\r\n  type?: \"standard\" | \"limited\";\r\n  onChange?: (event: CustomChangeEvent<SimpleContentAction>) => void;\r\n}\r\n\r\nfunction getDefaultValue(option?: string, display?: string, targets?: { id?: string }[]) {\r\n  if (display) {\r\n    if (option === \"popup\" && SIMPLE_CONTENT_POPUP_ITEMS.includes(display)) {\r\n      return display;\r\n    } else if (option === \"flap\" && SIMPLE_CONTENT_FLAP_ITEMS.includes(display)) {\r\n      return display;\r\n    } else if (\r\n      option === \"target\" &&\r\n      !SIMPLE_CONTENT_POPUP_ITEMS.includes(display) &&\r\n      !SIMPLE_CONTENT_FLAP_ITEMS.includes(display)\r\n    ) {\r\n      return display;\r\n    }\r\n  }\r\n\r\n  switch (option) {\r\n    case \"popup\":\r\n      return SCActionDisplayTypes.Large;\r\n    case \"flap\":\r\n      return SCActionDisplayTypes.LeftMedium;\r\n    case \"target\":\r\n      return targets?.length === 1 ? targets[0].id : undefined;\r\n  }\r\n}\r\n\r\nfunction BlmSimpleContentAction(props: CompProps & ContainerProps) {\r\n  const { data, type, onChange, structure } = props;\r\n  const { element, template } = useContentEditorCtx();\r\n  const { simpleContentId, option = \"popup\", display } = data || {};\r\n  const { t } = useTranslation(\"content-editor\");\r\n  \r\n  const targets = useMemo(() => getMediaTargets(template!), [template]);\r\n  const curDisplay = useMemo(\r\n    () => getDefaultValue(option, display, targets),\r\n    [display, option, targets]\r\n  );\r\n\r\n  const updateChange = (newData: SimpleContentAction) => {\r\n    if (onChange) {\r\n      onChange({ target: { name: \"simpleContent\", value: newData } });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: CustomChangeEvent<string> | ChangeEvent<{ name?: string; value: unknown }>\r\n  ) => {\r\n    const { name, value } = event.target as { name: string; value: string };\r\n    const newData = {\r\n      simpleContentId,\r\n      option,\r\n      display: name !== \"option\" ? curDisplay : getDefaultValue(value, display, targets),\r\n    };\r\n\r\n    if (name === \"simpleContent\") {\r\n      newData.simpleContentId = value;\r\n    } else if (name === \"option\" || name === \"display\") {\r\n      newData[name] = value;\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const renderDropDown = () => {\r\n    if (option === \"popup\" || option === \"flap\") {\r\n      const templateType: CourseElement | undefined =\r\n        structure && simpleContentId ? getElement(structure, simpleContentId) : undefined;\r\n\r\n      const arr = option === \"popup\" ? SIMPLE_CONTENT_POPUP_ITEMS : SIMPLE_CONTENT_FLAP_ITEMS;\r\n\r\n      return (\r\n        <Select\r\n          name=\"display\"\r\n          value={curDisplay}\r\n          MenuProps={{ className: \"simple-action-dropdown-popover\" }}\r\n          className=\"simple-action-dropdown\"\r\n          onChange={handleChange}\r\n        >\r\n          {arr.map((item, ind) => {\r\n            if (\r\n              templateType?.type === \"simple_page\" &&\r\n              (item === \"popover_small\" || item === \"popover_medium\" || item === \"divider\")\r\n            ) {\r\n              return true;\r\n            }\r\n\r\n            if (item === \"divider\") {\r\n              return <Divider key={\"divider\" + ind} className=\"simple-action-dropdown-divider\" />;\r\n            } else {\r\n              return (\r\n                <MenuItem key={item} value={item} className=\"simple-action-dropdown-item\">\r\n                  {getSimpleContentLabel(item)}\r\n                  <ListItemIcon className={item} />\r\n                </MenuItem>\r\n              );\r\n            }\r\n          })}\r\n        </Select>\r\n      );\r\n    } else if (option === \"target\") {\r\n      return (\r\n        <Fragment>\r\n          <Select\r\n            name=\"display\"\r\n            value={curDisplay ?? \"none\"}\r\n            MenuProps={{ PopoverClasses: { root: \"simple-action-dropdown-popover\" } }}\r\n            className=\"simple-action-dropdown\"\r\n            onChange={handleChange}\r\n          >\r\n            {targets.length !== 1 && (\r\n              <MenuItem value=\"none\">\r\n                {targets.length ? t(\"target_option.select_a_target\") : t(\"target_option.no_target\")}\r\n              </MenuItem>\r\n            )}\r\n            {targets.map((item) => (\r\n              <MenuItem key={item.id} value={item.id} className=\"simple-action-dropdown-item\">\r\n                <ListItemIcon className=\"target\" />\r\n                {item.value.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n          {targets.length === 0 && (\r\n            <div className=\"simple-action-warning-lbl\">\r\n              <span>{t(\"target_option.no_target\")}.</span>\r\n              <span>{t(\"target_option.transform_media\")}</span>\r\n            </div>\r\n          )}\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(\"simple-action-wrapper\", type)}>\r\n      <BlmStructureSelect\r\n        name=\"simpleContent\"\r\n        element={element}\r\n        structures={{ show: false }}\r\n        annexes={{ show: true }}\r\n        selectables={[\r\n          ElementType.SimplePage,\r\n          ElementType.SimpleContent,\r\n          ElementType.Page,\r\n          ElementType.Screen,\r\n        ]}\r\n        value={simpleContentId}\r\n        className=\"structure-select-with-icons\"\r\n        onChange={handleChange}\r\n      />\r\n      {simpleContentId && (\r\n        <Fragment>\r\n          <RadioGroup\r\n            name=\"option\"\r\n            value={option}\r\n            className=\"simple-action-option-group\"\r\n            onChange={handleChange}\r\n          >\r\n            <FormControlLabel\r\n              label={t(\"open_simplecontent_opt.popup\")}\r\n              control={<Radio className=\"radio-3\" />}\r\n              value=\"popup\"\r\n              className=\"simple-action-frm-ctrl\"\r\n            />\r\n            <FormControlLabel\r\n              label={t(\"open_simplecontent_opt.flap\")}\r\n              control={<Radio className=\"radio-3\" />}\r\n              value=\"flap\"\r\n              className=\"simple-action-frm-ctrl\"\r\n            />\r\n            {/* {type !== \"limited\" && (\r\n              <FormControlLabel\r\n                label={t(\"open_simplecontent_opt.below\")}\r\n                control={<Radio className=\"radio-3\" />}\r\n                value=\"below\"\r\n                className=\"simple-action-frm-ctrl\"\r\n              />\r\n            )} */}\r\n            <FormControlLabel\r\n              label={t(\"open_simplecontent_opt.target\")}\r\n              control={<Radio className=\"radio-3\" />}\r\n              value=\"target\"\r\n              className=\"simple-action-frm-ctrl\"\r\n            />\r\n          </RadioGroup>\r\n          {renderDropDown()}\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmSimpleContentAction;\r\n"]},"metadata":{},"sourceType":"module"}