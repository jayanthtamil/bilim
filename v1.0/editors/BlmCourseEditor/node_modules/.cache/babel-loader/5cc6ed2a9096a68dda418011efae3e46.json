{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\repository\\\\component-list\\\\BlmComponentList.tsx\";\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { ComponentTypes } from \"editor-constants\";\nimport { isButtonComponent, isMediaComponent, isSoundComponent } from \"utils\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport BlmTextCard from \"../text-card\";\nimport BlmMediaCard from \"../media-card\";\nimport BlmButtonCard from \"../button-card\";\nimport BlmSoundCard from \"../sound-card\";\nimport { StyleListTypes } from \"editor-constants\";\nimport { useComponentListStyle } from \"./styles\";\n\nfunction BlmComponentList(props) {\n  const {\n    type,\n    data,\n    onClick\n  } = props;\n  const {\n    component,\n    selectComponent\n  } = useContentEditorCtx();\n  const classes = useComponentListStyle();\n\n  const handleClick = data => {\n    if (selectComponent) {\n      selectComponent(data);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.root, type),\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, data.map((item, ind) => {\n    const isSelected = component === item;\n\n    if (item.type === ComponentTypes.Text) {\n      return /*#__PURE__*/React.createElement(BlmTextCard, {\n        key: item.id,\n        data: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 18\n        }\n      });\n    } else if (isMediaComponent(item)) {\n      return /*#__PURE__*/React.createElement(BlmMediaCard, {\n        key: item.id,\n        data: item,\n        order: ind + 1,\n        isSelected: isSelected,\n        onClick: handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      });\n    } else if (isButtonComponent(item)) {\n      return /*#__PURE__*/React.createElement(BlmButtonCard, {\n        key: item.id,\n        data: item,\n        isSelected: isSelected,\n        onClick: handleClick,\n        type: StyleListTypes.Button,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      });\n    } else if (isSoundComponent(item)) {\n      return /*#__PURE__*/React.createElement(BlmSoundCard, {\n        key: item.id,\n        data: item,\n        isSelected: isSelected,\n        onClick: handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      });\n    } else {\n      return null;\n    }\n  }));\n}\n\nexport default BlmComponentList;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/repository/component-list/BlmComponentList.tsx"],"names":["React","clsx","ComponentTypes","isButtonComponent","isMediaComponent","isSoundComponent","useContentEditorCtx","BlmTextCard","BlmMediaCard","BlmButtonCard","BlmSoundCard","StyleListTypes","useComponentListStyle","BlmComponentList","props","type","data","onClick","component","selectComponent","classes","handleClick","root","map","item","ind","isSelected","Text","id","Button"],"mappings":";AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,gBAA9C,QAAsE,OAAtE;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,qBAAT,QAAsC,UAAtC;;AAQA,SAASC,gBAAT,CAA0BC,KAA1B,EAA4C;AAC1C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,MAA0BH,KAAhC;AACA,QAAM;AAAEI,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAiCb,mBAAmB,EAA1D;AACA,QAAMc,OAAO,GAAGR,qBAAqB,EAArC;;AAEA,QAAMS,WAAW,GAAIL,IAAD,IAA6D;AAC/E,QAAIG,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACH,IAAD,CAAf;AACD;AACF,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAEf,IAAI,CAACmB,OAAO,CAACE,IAAT,EAAeP,IAAf,CAApB;AAA0C,IAAA,OAAO,EAAEE,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACO,GAAL,CAAS,CAACC,IAAD,EAAOC,GAAP,KAAe;AACvB,UAAMC,UAAU,GAAGR,SAAS,KAAKM,IAAjC;;AAEA,QAAIA,IAAI,CAACT,IAAL,KAAcb,cAAc,CAACyB,IAAjC,EAAuC;AACrC,0BAAO,oBAAC,WAAD;AAAa,QAAA,GAAG,EAAEH,IAAI,CAACI,EAAvB;AAA2B,QAAA,IAAI,EAAEJ,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAEO,IAAIpB,gBAAgB,CAACoB,IAAD,CAApB,EAA4B;AACjC,0BACE,oBAAC,YAAD;AACE,QAAA,GAAG,EAAEA,IAAI,CAACI,EADZ;AAEE,QAAA,IAAI,EAAEJ,IAFR;AAGE,QAAA,KAAK,EAAEC,GAAG,GAAG,CAHf;AAIE,QAAA,UAAU,EAAEC,UAJd;AAKE,QAAA,OAAO,EAAEL,WALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD,KAVM,MAUA,IAAIlB,iBAAiB,CAACqB,IAAD,CAArB,EAA6B;AAClC,0BACE,oBAAC,aAAD;AACE,QAAA,GAAG,EAAEA,IAAI,CAACI,EADZ;AAEE,QAAA,IAAI,EAAEJ,IAFR;AAGE,QAAA,UAAU,EAAEE,UAHd;AAIE,QAAA,OAAO,EAAEL,WAJX;AAKE,QAAA,IAAI,EAAEV,cAAc,CAACkB,MALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD,KAVM,MAUA,IAAIxB,gBAAgB,CAACmB,IAAD,CAApB,EAA4B;AACjC,0BACE,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAEA,IAAI,CAACI,EAAxB;AAA4B,QAAA,IAAI,EAAEJ,IAAlC;AAAwC,QAAA,UAAU,EAAEE,UAApD;AAAgE,QAAA,OAAO,EAAEL,WAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJM,MAIA;AACL,aAAO,IAAP;AACD;AACF,GAhCA,CADH,CADF;AAqCD;;AAED,eAAeR,gBAAf","sourcesContent":["import React, { MouseEvent } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { BaseComponent, ButtonComponent, MediaComponent, SoundComponent } from \"types\";\r\nimport { ComponentTypes } from \"editor-constants\";\r\nimport { isButtonComponent, isMediaComponent, isSoundComponent } from \"utils\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport BlmTextCard from \"../text-card\";\r\nimport BlmMediaCard from \"../media-card\";\r\nimport BlmButtonCard from \"../button-card\";\r\nimport BlmSoundCard from \"../sound-card\";\r\nimport { StyleListTypes } from \"editor-constants\";\r\nimport { useComponentListStyle } from \"./styles\";\r\n\r\nexport interface CompProps {\r\n  type: ComponentTypes;\r\n  data: BaseComponent<any>[];\r\n  onClick?: (event: MouseEvent) => void;\r\n}\r\n\r\nfunction BlmComponentList(props: CompProps) {\r\n  const { type, data, onClick } = props;\r\n  const { component, selectComponent } = useContentEditorCtx();\r\n  const classes = useComponentListStyle();\r\n\r\n  const handleClick = (data: MediaComponent | ButtonComponent | SoundComponent) => {\r\n    if (selectComponent) {\r\n      selectComponent(data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(classes.root, type)} onClick={onClick}>\r\n      {data.map((item, ind) => {\r\n        const isSelected = component === item;\r\n\r\n        if (item.type === ComponentTypes.Text) {\r\n          return <BlmTextCard key={item.id} data={item} />;\r\n        } else if (isMediaComponent(item)) {\r\n          return (\r\n            <BlmMediaCard\r\n              key={item.id}\r\n              data={item}\r\n              order={ind + 1}\r\n              isSelected={isSelected}\r\n              onClick={handleClick}\r\n            />\r\n          );\r\n        } else if (isButtonComponent(item)) {\r\n          return (\r\n            <BlmButtonCard\r\n              key={item.id}\r\n              data={item}\r\n              isSelected={isSelected}\r\n              onClick={handleClick}\r\n              type={StyleListTypes.Button}\r\n            />\r\n          );\r\n        } else if (isSoundComponent(item)) {\r\n          return (\r\n            <BlmSoundCard key={item.id} data={item} isSelected={isSelected} onClick={handleClick} />\r\n          );\r\n        } else {\r\n          return null;\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmComponentList;\r\n"]},"metadata":{},"sourceType":"module"}