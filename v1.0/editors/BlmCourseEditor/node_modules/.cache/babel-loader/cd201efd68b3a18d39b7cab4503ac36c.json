{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\domain\\\\templates-panel\\\\BlmTemplatesPanel.tsx\";\nimport React, { useCallback, useMemo, useEffect, useState } from \"react\";\nimport { Drawer } from \"@material-ui/core\";\nimport { TemplateScopeFilter } from \"types\";\nimport { TemplateContext, ElementType, TemplatePanelTypes } from \"editor-constants\";\nimport { getTemplateAndVariant, isVariant } from \"utils\";\nimport { createCategories, getFirstCategory } from \"./utils\";\nimport BlmCategoryList from \"./category-list\";\nimport TemplatesPanelContext from \"./TemplatesPanelContext\";\nimport \"./templates-panel.scss\";\n\nfunction BlmTemplatesPanel(props) {\n  var _options$template;\n\n  const {\n    open,\n    element,\n    options,\n    course,\n    style,\n    templates,\n    getTemplates,\n    getTemplateProperties,\n    onAddTemplateClick,\n    onClose\n  } = props;\n  const [state, setState] = useState();\n  const filter = useMemo(() => {\n    if (templates && element) {\n      var _parent$template, _style$config, _element$root, _parent$theme;\n\n      const {\n        parent\n      } = element;\n      const {\n        type,\n        templateType,\n        isSummary\n      } = options;\n      const scope = new TemplateScopeFilter();\n      let context;\n      let virtualCategory;\n      scope.included = [templateType];\n\n      if (templateType !== ElementType.Question && (element.type === ElementType.Page || element.type === ElementType.SimplePage)) {\n        scope.excluded = [ElementType.Question];\n      }\n\n      if (isSummary) {\n        context = TemplateContext.Summary;\n      } else if ((parent === null || parent === void 0 ? void 0 : parent.type) === ElementType.Feedback) {\n        context = TemplateContext.Feedback;\n      } else if ((parent === null || parent === void 0 ? void 0 : parent.type) === ElementType.AssociateContent) {\n        context = TemplateContext.AssociateContent;\n      } else if (templates && (parent === null || parent === void 0 ? void 0 : (_parent$template = parent.template) === null || _parent$template === void 0 ? void 0 : _parent$template.interaction)) {\n        var _getTemplateAndVarian;\n\n        context = TemplateContext.Interaction;\n        virtualCategory = (_getTemplateAndVarian = getTemplateAndVariant(templates, parent.template.id)) === null || _getTemplateAndVarian === void 0 ? void 0 : _getTemplateAndVarian.template.parent;\n      }\n\n      const filter = {\n        showAllCategory: !(isSummary || Boolean(virtualCategory)),\n        framework: style === null || style === void 0 ? void 0 : (_style$config = style.config) === null || _style$config === void 0 ? void 0 : _style$config.framework,\n        display: course === null || course === void 0 ? void 0 : course.display,\n        structureContext: (_element$root = element.root) === null || _element$root === void 0 ? void 0 : _element$root.type,\n        theme: parent === null || parent === void 0 ? void 0 : (_parent$theme = parent.theme) === null || _parent$theme === void 0 ? void 0 : _parent$theme.toLowerCase(),\n        scope,\n        context,\n        switchable: type === TemplatePanelTypes.Switchable,\n        virtualCategory\n      };\n      return filter;\n    }\n  }, [templates, element, options, course, style]);\n  const categories = useMemo(() => {\n    if (templates && filter) {\n      return createCategories(templates, filter);\n    }\n  }, [templates, filter]);\n  const selectedCategory = useMemo(() => {\n    if (categories && options.isSummary) {\n      return getFirstCategory(categories);\n    }\n  }, [categories, options]);\n  const addTemplate = useCallback((template, isDarkSelected) => {\n    if (element && template.html && onAddTemplateClick) {\n      onAddTemplateClick(template, options, isDarkSelected);\n    }\n  }, [element, options, onAddTemplateClick]);\n  useEffect(() => {\n    if (!templates && course) {\n      getTemplates(course);\n    }\n  }, [templates, course, getTemplates]);\n  useEffect(() => {\n    if (templates && state) {\n      const {\n        template,\n        isDarkSelected\n      } = state;\n      const result = getTemplateAndVariant(templates, template.id);\n      const newTemplate = (result === null || result === void 0 ? void 0 : result.variant) || (result === null || result === void 0 ? void 0 : result.template);\n\n      if (newTemplate === null || newTemplate === void 0 ? void 0 : newTemplate.html) {\n        addTemplate(newTemplate, isDarkSelected);\n        setState(undefined);\n      }\n    }\n  }, [templates, state, addTemplate]);\n\n  const handleAddTemplateClick = (template, isDarkSelected) => {\n    if (!template.html) {\n      const reqTemplate = isVariant(template) ? template.parent : template;\n\n      if (reqTemplate) {\n        setState({\n          template,\n          isDarkSelected\n        });\n        getTemplateProperties(reqTemplate);\n      }\n    } else {\n      addTemplate(template, isDarkSelected);\n    }\n  };\n\n  const onCloseDrawer = event => {\n    if (onClose) {\n      onClose(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Drawer, {\n    open: open,\n    className: \"templates-panel-drawer\",\n    onClose: onCloseDrawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, element && categories && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"templates-panel custom-scrollbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TemplatesPanelContext.Provider, {\n    value: {\n      type: options.type,\n      onAddTemplateClick: handleAddTemplateClick\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BlmCategoryList, {\n    categories: categories,\n    selectedCategory: selectedCategory,\n    isDark: (_options$template = options.template) === null || _options$template === void 0 ? void 0 : _options$template.isDarkTemplate,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default BlmTemplatesPanel;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/domain/templates-panel/BlmTemplatesPanel.tsx"],"names":["React","useCallback","useMemo","useEffect","useState","Drawer","TemplateScopeFilter","TemplateContext","ElementType","TemplatePanelTypes","getTemplateAndVariant","isVariant","createCategories","getFirstCategory","BlmCategoryList","TemplatesPanelContext","BlmTemplatesPanel","props","open","element","options","course","style","templates","getTemplates","getTemplateProperties","onAddTemplateClick","onClose","state","setState","filter","parent","type","templateType","isSummary","scope","context","virtualCategory","included","Question","Page","SimplePage","excluded","Summary","Feedback","AssociateContent","template","interaction","Interaction","id","showAllCategory","Boolean","framework","config","display","structureContext","root","theme","toLowerCase","switchable","Switchable","categories","selectedCategory","addTemplate","isDarkSelected","html","result","newTemplate","variant","undefined","handleAddTemplateClick","reqTemplate","onCloseDrawer","event","isDarkTemplate"],"mappings":"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","sourcesContent":["import React, { MouseEvent, useCallback, useMemo, useEffect, useState } from \"react\";\r\nimport { Drawer } from \"@material-ui/core\";\r\n\r\nimport {\r\n  CourseElement,\r\n  TemplateFilter,\r\n  TemplatePanelOptions,\r\n  TemplateBase,\r\n  TemplateScopeFilter,\r\n} from \"types\";\r\nimport { TemplateContext, ElementType, TemplatePanelTypes, StructureTypes } from \"editor-constants\";\r\nimport { getTemplateAndVariant, isVariant } from \"utils\";\r\nimport { createCategories, getFirstCategory } from \"./utils\";\r\nimport BlmCategoryList from \"./category-list\";\r\nimport TemplatesPanelContext from \"./TemplatesPanelContext\";\r\nimport { AddTemplateHandler } from \"./types\";\r\nimport { ContainerProps } from \"./templates-panel-container\";\r\nimport \"./templates-panel.scss\";\r\n\r\nexport interface CompProps extends ContainerProps {\r\n  open: boolean;\r\n  element: CourseElement;\r\n  options: TemplatePanelOptions;\r\n  onAddTemplateClick?: (\r\n    template: TemplateBase,\r\n    options: TemplatePanelOptions,\r\n    isDarkSelected: boolean\r\n  ) => void;\r\n  onClose: (event: MouseEvent) => void;\r\n}\r\n\r\ninterface PanelState {\r\n  template: TemplateBase;\r\n  isDarkSelected: boolean;\r\n}\r\n\r\nfunction BlmTemplatesPanel(props: CompProps) {\r\n  const {\r\n    open,\r\n    element,\r\n    options,\r\n    course,\r\n    style,\r\n    templates,\r\n    getTemplates,\r\n    getTemplateProperties,\r\n    onAddTemplateClick,\r\n    onClose,\r\n  } = props;\r\n  const [state, setState] = useState<PanelState>();\r\n\r\n  const filter = useMemo(() => {\r\n    if (templates && element) {\r\n      const { parent } = element;\r\n      const { type, templateType, isSummary } = options;\r\n      const scope = new TemplateScopeFilter();\r\n      let context;\r\n      let virtualCategory;\r\n\r\n      scope.included = [templateType];\r\n\r\n      if (\r\n        templateType !== ElementType.Question &&\r\n        (element.type === ElementType.Page || element.type === ElementType.SimplePage)\r\n      ) {\r\n        scope.excluded = [ElementType.Question];\r\n      }\r\n\r\n      if (isSummary) {\r\n        context = TemplateContext.Summary;\r\n      } else if (parent?.type === ElementType.Feedback) {\r\n        context = TemplateContext.Feedback;\r\n      } else if (parent?.type === ElementType.AssociateContent) {\r\n        context = TemplateContext.AssociateContent;\r\n      } else if (templates && parent?.template?.interaction) {\r\n        context = TemplateContext.Interaction;\r\n        virtualCategory = getTemplateAndVariant(templates, parent.template.id)?.template.parent;\r\n      }\r\n\r\n      const filter: TemplateFilter = {\r\n        showAllCategory: !(isSummary || Boolean(virtualCategory)),\r\n        framework: style?.config?.framework,\r\n        display: course?.display,\r\n        structureContext: element.root?.type as StructureTypes,\r\n        theme: parent?.theme?.toLowerCase(),\r\n        scope,\r\n        context,\r\n        switchable: type === TemplatePanelTypes.Switchable,\r\n        virtualCategory,\r\n      };\r\n\r\n      return filter;\r\n    }\r\n  }, [templates, element, options, course, style]);\r\n\r\n  const categories = useMemo(() => {\r\n    if (templates && filter) {\r\n      return createCategories(templates, filter);\r\n    }\r\n  }, [templates, filter]);\r\n\r\n  const selectedCategory = useMemo(() => {\r\n    if (categories && options.isSummary) {\r\n      return getFirstCategory(categories);\r\n    }\r\n  }, [categories, options]);\r\n\r\n  const addTemplate: AddTemplateHandler = useCallback(\r\n    (template, isDarkSelected) => {\r\n      if (element && template.html && onAddTemplateClick) {\r\n        onAddTemplateClick(template, options, isDarkSelected);\r\n      }\r\n    },\r\n    [element, options, onAddTemplateClick]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!templates && course) {\r\n      getTemplates(course);\r\n    }\r\n  }, [templates, course, getTemplates]);\r\n\r\n  useEffect(() => {\r\n    if (templates && state) {\r\n      const { template, isDarkSelected } = state;\r\n      const result = getTemplateAndVariant(templates, template.id);\r\n      const newTemplate = result?.variant || result?.template;\r\n\r\n      if (newTemplate?.html) {\r\n        addTemplate(newTemplate, isDarkSelected);\r\n        setState(undefined);\r\n      }\r\n    }\r\n  }, [templates, state, addTemplate]);\r\n\r\n  const handleAddTemplateClick: AddTemplateHandler = (template, isDarkSelected) => {\r\n    if (!template.html) {\r\n      const reqTemplate = isVariant(template) ? template.parent : template;\r\n\r\n      if (reqTemplate) {\r\n        setState({ template, isDarkSelected });\r\n        getTemplateProperties(reqTemplate);\r\n      }\r\n    } else {\r\n      addTemplate(template, isDarkSelected);\r\n    }\r\n  };\r\n\r\n  const onCloseDrawer = (event: any) => {\r\n    if (onClose) {\r\n      onClose(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Drawer open={open} className=\"templates-panel-drawer\" onClose={onCloseDrawer}>\r\n      {element && categories && (\r\n        <div className=\"templates-panel custom-scrollbar\">\r\n          <TemplatesPanelContext.Provider\r\n            value={{\r\n              type: options.type,\r\n              onAddTemplateClick: handleAddTemplateClick,\r\n            }}\r\n          >\r\n            <BlmCategoryList\r\n              categories={categories}\r\n              selectedCategory={selectedCategory}\r\n              isDark={options.template?.isDarkTemplate}\r\n              onClose={onClose}\r\n            />\r\n          </TemplatesPanelContext.Provider>\r\n        </div>\r\n      )}\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default BlmTemplatesPanel;\r\n"]},"metadata":{},"sourceType":"module"}