{"ast":null,"code":"import { BackgroundMedia } from \"types\";\nimport { BackgroundOptionTypes, ImageDisplayTypes, MediaBackgroundPosition } from \"editor-constants\";\nimport { getBLMElement } from \"../../core\";\nimport { getObjectKey } from \"utils\";\nexport function getBackgroundImage(element) {\n  const background = new BackgroundMedia();\n  const {\n    classList\n  } = element;\n  const model = getBLMElement(element);\n\n  if (model.editorOptions && model.editorOptions.media) {\n    const {\n      main,\n      tint\n    } = model.editorOptions.media;\n    background.main = main;\n\n    if (tint) {\n      background.tint = tint;\n    }\n\n    background.position = getObjectKey(MediaBackgroundPosition, element.classList, background.position);\n\n    if (classList.contains(\"backgroundstandard\")) {\n      background.option = BackgroundOptionTypes.Standard;\n    } else if (classList.contains(\"backgroundparallaxe\")) {\n      background.option = BackgroundOptionTypes.Parallax;\n\n      if (model.options) {\n        background.optionValue = model.options.parallax;\n      }\n    } else if (classList.contains(\"backgroundmask\")) {\n      background.option = BackgroundOptionTypes.Mask;\n    } else if (classList.contains(\"backgroundfullscreen\")) {\n      background.option = BackgroundOptionTypes.FullScreen;\n    }\n\n    if (classList.contains(\"backgroundcover\")) {\n      background.option3 = ImageDisplayTypes.Cover;\n    } else if (classList.contains(\"backgroundcontain\")) {\n      background.option3 = ImageDisplayTypes.Contain;\n    } else if (classList.contains(\"backgroundnoresize\")) {\n      background.option3 = ImageDisplayTypes.NoResize;\n    }\n  }\n\n  return background;\n}\nexport function getBackgroundVideo(element) {\n  const background = new BackgroundMedia();\n  const {\n    classList\n  } = element;\n  const model = getBLMElement(element);\n\n  if (model.editorOptions && model.editorOptions.media) {\n    const {\n      main,\n      webm,\n      image,\n      tint\n    } = model.editorOptions.media;\n    background.main = main;\n    background.webm = webm;\n    background.image = image;\n\n    if (tint) {\n      background.tint = tint;\n    }\n\n    if (classList.contains(\"autoplay\") || classList.contains(\"loop\")) {\n      background.option = BackgroundOptionTypes.Autoplay;\n\n      if (classList.contains(\"loop\")) {\n        background.optionValue = true;\n      }\n    } else if (classList.contains(\"scroll\")) {\n      background.option = BackgroundOptionTypes.Scroll;\n    }\n  }\n\n  return background;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/model/background/common.ts"],"names":["BackgroundMedia","BackgroundOptionTypes","ImageDisplayTypes","MediaBackgroundPosition","getBLMElement","getObjectKey","getBackgroundImage","element","background","classList","model","editorOptions","media","main","tint","position","contains","option","Standard","Parallax","options","optionValue","parallax","Mask","FullScreen","option3","Cover","Contain","NoResize","getBackgroundVideo","webm","image","Autoplay","Scroll"],"mappings":"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","sourcesContent":["import { BackgroundMedia, TemplateEditorOptionsJSON, TemplateOptionsJSON } from \"types\";\r\nimport {\r\n  BackgroundOptionTypes,\r\n  ImageDisplayTypes,\r\n  MediaBackgroundPosition,\r\n} from \"editor-constants\";\r\nimport { getBLMElement } from \"../../core\";\r\nimport { getObjectKey } from \"utils\";\r\n\r\nexport function getBackgroundImage(element: HTMLElement) {\r\n  const background = new BackgroundMedia();\r\n  const { classList } = element;\r\n  const model = getBLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>(element);\r\n\r\n  if (model.editorOptions && model.editorOptions.media) {\r\n    const { main, tint } = model.editorOptions.media;\r\n\r\n    background.main = main;\r\n\r\n    if (tint) {\r\n      background.tint = tint;\r\n    }\r\n\r\n    background.position = getObjectKey(\r\n      MediaBackgroundPosition,\r\n      element.classList,\r\n      background.position\r\n    );\r\n\r\n    if (classList.contains(\"backgroundstandard\")) {\r\n      background.option = BackgroundOptionTypes.Standard;\r\n    } else if (classList.contains(\"backgroundparallaxe\")) {\r\n      background.option = BackgroundOptionTypes.Parallax;\r\n      if (model.options) {\r\n        background.optionValue = model.options.parallax as number;\r\n      }\r\n    } else if (classList.contains(\"backgroundmask\")) {\r\n      background.option = BackgroundOptionTypes.Mask;\r\n    } else if (classList.contains(\"backgroundfullscreen\")) {\r\n      background.option = BackgroundOptionTypes.FullScreen;\r\n    }\r\n\r\n    if (classList.contains(\"backgroundcover\")) {\r\n      background.option3 = ImageDisplayTypes.Cover;\r\n    } else if (classList.contains(\"backgroundcontain\")) {\r\n      background.option3 = ImageDisplayTypes.Contain;\r\n    } else if (classList.contains(\"backgroundnoresize\")) {\r\n      background.option3 = ImageDisplayTypes.NoResize;\r\n    }\r\n  }\r\n\r\n  return background;\r\n}\r\n\r\nexport function getBackgroundVideo(element: HTMLElement) {\r\n  const background = new BackgroundMedia();\r\n  const { classList } = element;\r\n  const model = getBLMElement<object, { media: Omit<BackgroundMedia, \"option\" | \"optionValue\"> }>(\r\n    element\r\n  );\r\n\r\n  if (model.editorOptions && model.editorOptions.media) {\r\n    const { main, webm, image, tint } = model.editorOptions.media;\r\n\r\n    background.main = main;\r\n    background.webm = webm;\r\n    background.image = image;\r\n\r\n    if (tint) {\r\n      background.tint = tint;\r\n    }\r\n\r\n    if (classList.contains(\"autoplay\") || classList.contains(\"loop\")) {\r\n      background.option = BackgroundOptionTypes.Autoplay;\r\n      if (classList.contains(\"loop\")) {\r\n        background.optionValue = true;\r\n      }\r\n    } else if (classList.contains(\"scroll\")) {\r\n      background.option = BackgroundOptionTypes.Scroll;\r\n    }\r\n  }\r\n\r\n  return background;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}