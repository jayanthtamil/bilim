{"ast":null,"code":"import { BackgroundOptionTypes, ImageDisplayTypes } from \"editor-constants\";\nimport { createHTMLElement, createRGBA } from \"utils\";\nimport { getBLMElement } from \"../../core\";\nexport const BG_STYLES = [\"backgroundImage\", \"backgroundColor\"];\nexport const createVideoElement = media => {\n  const {\n    main,\n    webm,\n    image,\n    tint,\n    option,\n    optionValue\n  } = media;\n  const rgba = createRGBA(tint.color, tint.alpha);\n  const clsName = getMediaClass(option, optionValue);\n  const attrs = getVideoAttributes(clsName);\n  const imgAttr = image ? `poster=\"${image.url}\" ` : \"\";\n  const webmSrc = webm ? `\\n    <source src=\"${webm.url}\" type=\"video/webm\"/>` : \"\";\n  const overlay = rgba ? `\\n  <div class=\"videooverlay\" style=\"background: ${rgba}\"></div>` : \"\";\n  const editOption = JSON.stringify({\n    media: {\n      main,\n      webm,\n      image,\n      tint\n    }\n  });\n\n  if (main) {\n    const html = `<div class=\"videoouter ${clsName}\" blm-editor-options='${editOption}'>\n        <video muted ${attrs} class=\"backgroundvideo\" ${imgAttr}>\n          <source src=\"${main.url}\" type=\"video/mp4\"/>${webmSrc}\n        </video>\n        ${overlay}\n        </div>`;\n    return createHTMLElement(html);\n  }\n};\nexport function getMediaClass(option, value) {\n  switch (option) {\n    case BackgroundOptionTypes.Standard:\n      return \"backgroundstandard\";\n\n    case BackgroundOptionTypes.Parallax:\n      return \"backgroundparallaxe\";\n\n    case BackgroundOptionTypes.Mask:\n      return \"backgroundmask\";\n\n    case BackgroundOptionTypes.FullScreen:\n      return \"backgroundfullscreen\";\n\n    case BackgroundOptionTypes.Autoplay:\n      if (!value) {\n        return \"autoplay\";\n      } else {\n        return \"loop\";\n      }\n\n    case BackgroundOptionTypes.Scroll:\n      return \"scroll\";\n\n    case ImageDisplayTypes.Cover:\n      return \"backgroundcover\";\n\n    case ImageDisplayTypes.Contain:\n      return \"backgroundcontain\";\n\n    case ImageDisplayTypes.NoResize:\n      return \"backgroundnoresize\";\n\n    default:\n      return \"\";\n  }\n}\nexport function clearOptions(element) {\n  const model = getBLMElement(element);\n\n  if (model.options) {\n    const {\n      parallax,\n      sound,\n      ...others\n    } = model.options;\n    return Object.keys(others).length ? { ...others\n    } : null;\n  }\n\n  return null;\n}\nexport function clearEditorOptions(element) {\n  const model = getBLMElement(element);\n\n  if (model.editorOptions) {\n    const {\n      media,\n      ...others\n    } = model.editorOptions;\n    return Object.keys(others).length ? { ...others\n    } : null;\n  }\n\n  return null;\n}\n\nfunction getVideoAttributes(className) {\n  if (className === \"autoplay\") {\n    return \"autoplay\";\n  } else if (className === \"loop\") {\n    return \"autoplay loop\";\n  } else {\n    return \"\";\n  }\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/html/background/common.ts"],"names":["BackgroundOptionTypes","ImageDisplayTypes","createHTMLElement","createRGBA","getBLMElement","BG_STYLES","createVideoElement","media","main","webm","image","tint","option","optionValue","rgba","color","alpha","clsName","getMediaClass","attrs","getVideoAttributes","imgAttr","url","webmSrc","overlay","editOption","JSON","stringify","html","value","Standard","Parallax","Mask","FullScreen","Autoplay","Scroll","Cover","Contain","NoResize","clearOptions","element","model","options","parallax","sound","others","Object","keys","length","clearEditorOptions","editorOptions","className"],"mappings":"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","sourcesContent":["import { BackgroundMedia, TemplateEditorOptionsJSON, TemplateOptionsJSON } from \"types\";\r\nimport { BackgroundOptionTypes, ImageDisplayTypes } from \"editor-constants\";\r\nimport { createHTMLElement, createRGBA } from \"utils\";\r\nimport { getBLMElement } from \"../../core\";\r\n\r\nexport const BG_STYLES = [\"backgroundImage\", \"backgroundColor\"];\r\n\r\nexport const createVideoElement = (media: BackgroundMedia) => {\r\n  const { main, webm, image, tint, option, optionValue } = media;\r\n  const rgba = createRGBA(tint.color, tint.alpha);\r\n  const clsName = getMediaClass(option, optionValue);\r\n  const attrs = getVideoAttributes(clsName);\r\n  const imgAttr = image ? `poster=\"${image.url}\" ` : \"\";\r\n  const webmSrc = webm ? `\\n    <source src=\"${webm.url}\" type=\"video/webm\"/>` : \"\";\r\n  const overlay = rgba ? `\\n  <div class=\"videooverlay\" style=\"background: ${rgba}\"></div>` : \"\";\r\n  const editOption = JSON.stringify({ media: { main, webm, image, tint } });\r\n\r\n  if (main) {\r\n    const html = `<div class=\"videoouter ${clsName}\" blm-editor-options='${editOption}'>\r\n        <video muted ${attrs} class=\"backgroundvideo\" ${imgAttr}>\r\n          <source src=\"${main.url}\" type=\"video/mp4\"/>${webmSrc}\r\n        </video>\r\n        ${overlay}\r\n        </div>`;\r\n\r\n    return createHTMLElement(html);\r\n  }\r\n};\r\n\r\nexport function getMediaClass(\r\n  option: BackgroundOptionTypes | ImageDisplayTypes,\r\n  value?: number | boolean\r\n) {\r\n  switch (option) {\r\n    case BackgroundOptionTypes.Standard:\r\n      return \"backgroundstandard\";\r\n    case BackgroundOptionTypes.Parallax:\r\n      return \"backgroundparallaxe\";\r\n    case BackgroundOptionTypes.Mask:\r\n      return \"backgroundmask\";\r\n    case BackgroundOptionTypes.FullScreen:\r\n      return \"backgroundfullscreen\";\r\n    case BackgroundOptionTypes.Autoplay:\r\n      if (!value) {\r\n        return \"autoplay\";\r\n      } else {\r\n        return \"loop\";\r\n      }\r\n    case BackgroundOptionTypes.Scroll:\r\n      return \"scroll\";\r\n    case ImageDisplayTypes.Cover:\r\n      return \"backgroundcover\";\r\n    case ImageDisplayTypes.Contain:\r\n      return \"backgroundcontain\";\r\n    case ImageDisplayTypes.NoResize:\r\n      return \"backgroundnoresize\";\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n\r\nexport function clearOptions(element: HTMLElement) {\r\n  const model = getBLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>(element);\r\n\r\n  if (model.options) {\r\n    const { parallax, sound, ...others } = model.options;\r\n\r\n    return Object.keys(others).length ? { ...others } : null;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function clearEditorOptions(element: HTMLElement) {\r\n  const model = getBLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>(element);\r\n\r\n  if (model.editorOptions) {\r\n    const { media, ...others } = model.editorOptions;\r\n\r\n    return Object.keys(others).length ? { ...others } : null;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getVideoAttributes(className: string) {\r\n  if (className === \"autoplay\") {\r\n    return \"autoplay\";\r\n  } else if (className === \"loop\") {\r\n    return \"autoplay loop\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}