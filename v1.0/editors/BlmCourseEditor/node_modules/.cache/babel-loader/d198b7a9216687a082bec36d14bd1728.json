{"ast":null,"code":"import { AnimationAttachment, AnimationMedia, MediaFile } from \"types\";\nimport { createUUID, getFileExtension, getFileName, isAudio, isVideo, toNewLines } from \"utils\";\nexport const createMediaFiles = response => {\n  if (response.file && response.file.length) {\n    return response.file.map(file => {\n      return createMediaFile(file);\n    });\n  }\n\n  return [];\n};\nexport const createMediaFile = response => {\n  const {\n    id,\n    fileName,\n    path,\n    mimeType,\n    rootFile\n  } = response;\n  const file = new MediaFile(id, fileName, mimeType, path, rootFile);\n  return file;\n};\nexport const createAnimationMedia = response => {\n  const animation = new AnimationMedia();\n  const {\n    translations,\n    options,\n    attachments\n  } = response;\n\n  if (translations) {\n    animation.translations = translations.map(item => ({ ...item,\n      text: toNewLines(item.text)\n    }));\n  }\n\n  if (options && options.length) {\n    animation.options = options[0];\n  }\n\n  if (attachments) {\n    const files = [];\n\n    for (const item of attachments) {\n      const obj = new AnimationAttachment();\n      obj.id = createUUID();\n      obj.name = item.name;\n      obj.url = item.path;\n      obj.type = item.mimeType;\n      files.push(obj);\n    }\n\n    for (const file of files) {\n      const {\n        name,\n        type\n      } = file;\n      const ext1 = getFileExtension(name);\n\n      if (type && (isVideo(type) || isAudio(type))) {\n        const title1 = getFileName(name);\n\n        for (const subtitle of files) {\n          const title2 = getFileName(subtitle.name);\n          const ext2 = getFileExtension(subtitle.name);\n\n          if (title1 === title2 && ext2 === \"vtt\") {\n            file.subtitle = subtitle;\n          }\n        }\n      }\n\n      if (ext1 !== \"vtt\") {\n        animation.attachments.push(file);\n      }\n    }\n  }\n\n  return animation;\n};\nexport const updateAnimationMedia = (animation, response) => {\n  if (animation) {\n    const {\n      translations,\n      options\n    } = response;\n\n    if (translations) {\n      animation.translations = translations;\n    }\n\n    if (options) {\n      animation.options = options;\n    }\n  }\n\n  return animation;\n};\nexport const updateAnimationAttchement = (animation, attachment) => {\n  if (animation && attachment) {\n    const {\n      attachments\n    } = animation;\n    animation.attachments = attachments.map(item => item.id === attachment.id ? { ...attachment,\n      id: createUUID()\n    } : item);\n  }\n\n  return animation;\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/course/file/utils/index.ts"],"names":["AnimationAttachment","AnimationMedia","MediaFile","createUUID","getFileExtension","getFileName","isAudio","isVideo","toNewLines","createMediaFiles","response","file","length","map","createMediaFile","id","fileName","path","mimeType","rootFile","createAnimationMedia","animation","translations","options","attachments","item","text","files","obj","name","url","type","push","ext1","title1","subtitle","title2","ext2","updateAnimationMedia","updateAnimationAttchement","attachment"],"mappings":"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","sourcesContent":["import { AnimationAttachment, AnimationMedia, MediaFile } from \"types\";\r\nimport { MIMEType } from \"editor-constants\";\r\nimport { createUUID, getFileExtension, getFileName, isAudio, isVideo, toNewLines } from \"utils\";\r\nimport { AnimationResponse, FileResponse, FilesResponse } from \"../types\";\r\n\r\nexport const createMediaFiles = (response: FilesResponse) => {\r\n  if (response.file && response.file.length) {\r\n    return response.file.map((file) => {\r\n      return createMediaFile(file);\r\n    });\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const createMediaFile = (response: FileResponse) => {\r\n  const { id, fileName, path, mimeType, rootFile } = response;\r\n  const file = new MediaFile(id, fileName, mimeType as MIMEType, path, rootFile);\r\n\r\n  return file;\r\n};\r\n\r\nexport const createAnimationMedia = (response: AnimationResponse) => {\r\n  const animation = new AnimationMedia();\r\n  const { translations, options, attachments } = response;\r\n\r\n  if (translations) {\r\n    animation.translations = translations.map((item) => ({ ...item, text: toNewLines(item.text) }));\r\n  }\r\n\r\n  if (options && options.length) {\r\n    animation.options = options[0];\r\n  }\r\n\r\n  if (attachments) {\r\n    const files = [];\r\n\r\n    for (const item of attachments) {\r\n      const obj = new AnimationAttachment();\r\n      obj.id = createUUID();\r\n      obj.name = item.name;\r\n      obj.url = item.path;\r\n      obj.type = item.mimeType as MIMEType;\r\n\r\n      files.push(obj);\r\n    }\r\n\r\n    for (const file of files) {\r\n      const { name, type } = file;\r\n      const ext1 = getFileExtension(name);\r\n\r\n      if (type && (isVideo(type) || isAudio(type))) {\r\n        const title1 = getFileName(name);\r\n\r\n        for (const subtitle of files) {\r\n          const title2 = getFileName(subtitle.name);\r\n          const ext2 = getFileExtension(subtitle.name);\r\n\r\n          if (title1 === title2 && ext2 === \"vtt\") {\r\n            file.subtitle = subtitle;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (ext1 !== \"vtt\") {\r\n        animation.attachments.push(file);\r\n      }\r\n    }\r\n  }\r\n\r\n  return animation;\r\n};\r\n\r\nexport const updateAnimationMedia = (\r\n  animation: AnimationMedia,\r\n  response: Pick<AnimationMedia, \"translations\" | \"options\">\r\n) => {\r\n  if (animation) {\r\n    const { translations, options } = response;\r\n\r\n    if (translations) {\r\n      animation.translations = translations;\r\n    }\r\n\r\n    if (options) {\r\n      animation.options = options;\r\n    }\r\n  }\r\n\r\n  return animation;\r\n};\r\n\r\nexport const updateAnimationAttchement = (\r\n  animation: AnimationMedia,\r\n  attachment: AnimationAttachment\r\n) => {\r\n  if (animation && attachment) {\r\n    const { attachments } = animation;\r\n\r\n    animation.attachments = attachments.map((item) =>\r\n      item.id === attachment.id ? { ...attachment, id: createUUID() } : item\r\n    );\r\n  }\r\n\r\n  return animation;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}