{"ast":null,"code":"import { getQuestionMedias } from \"template-builders\";\nimport { isQuestionCustom, isQuestionPropositions } from \"utils\";\nimport * as Types from \"./types\";\n\nfunction copyData(data) {\n  return { ...data\n  };\n}\n\nfunction copyMain(data) {\n  const newData = copyData(data);\n  newData.main = { ...data.main\n  };\n  return newData;\n}\n\nfunction copyMainContent(data) {\n  const newData = copyMain(data);\n\n  if (data.main.content) {\n    newData.main.content = { ...data.main.content\n    };\n\n    if (newData.main.content.value) {\n      newData.main.content.value = { ...newData.main.content.value\n      };\n    }\n  }\n\n  return newData;\n}\n\nfunction deselectAllProposition(items, exceptFirst = false, except) {\n  return items.map(item => {\n    if (item.validity.value) {\n      if (exceptFirst) {\n        exceptFirst = false;\n        return item;\n      } else if (except && item.id === except.id) {\n        return item;\n      } else {\n        return { ...item,\n          validity: { ...item.validity,\n            value: false\n          }\n        };\n      }\n    } else {\n      return item;\n    }\n  });\n}\n\nfunction questionReducer(state, action) {\n  const {\n    data\n  } = state;\n\n  if (action.type === Types.INIT_QUESTION_EDITOR_DATA) {\n    const {\n      payload\n    } = action;\n    return { ...state,\n      isEdited: false,\n      data: payload,\n      oldMedias: getQuestionMedias(payload)\n    };\n  } else if (data) {\n    if (action.type === Types.UPDATE_QUESTION_EDITOR_DATA) {\n      return { ...state,\n        isEdited: true,\n        data: action.payload\n      };\n    } else {\n      let newData;\n\n      if (action.type === Types.UPDATE_QUESTION_INTRODUCTION_DATA) {\n        newData = copyData(data);\n        newData.introduction = action.payload;\n      } else if (action.type === Types.UPDATE_QUESTION_MAIN_DATA) {\n        newData = copyData(data);\n        newData.main = action.payload;\n      } else if (action.type === Types.UPDATE_QUESTION_PROPOSITIONS_DATA) {\n        const newPropositions = action.payload;\n        newData = copyMainContent(data);\n\n        if (isQuestionPropositions(newData.main.content)) {\n          const {\n            main: {\n              content: propositions\n            }\n          } = newData;\n\n          if (propositions === null || propositions === void 0 ? void 0 : propositions.value) {\n            const {\n              isMCQ\n            } = propositions.value;\n\n            if (!newPropositions.isMCQ && isMCQ !== newPropositions.isMCQ) {\n              newPropositions.items = deselectAllProposition(newPropositions.items, true);\n            }\n          }\n\n          propositions.value = newPropositions;\n        }\n      } else if (action.type === Types.ADD_QUESTION_PROPOSITION_DATA) {\n        newData = copyMainContent(data);\n\n        if (isQuestionPropositions(newData.main.content)) {\n          const proposition = action.payload;\n          const {\n            main: {\n              content: {\n                value: propositions\n              }\n            }\n          } = newData;\n\n          if (propositions) {\n            propositions.items = [...propositions.items, proposition];\n          }\n        }\n      } else if (action.type === Types.UPDATE_QUESTION_PROPOSITION_DATA) {\n        newData = copyMainContent(data);\n\n        if (isQuestionPropositions(newData.main.content)) {\n          const proposition = action.payload;\n          const {\n            validity: {\n              value: newValidty\n            }\n          } = proposition;\n          const {\n            main: {\n              content: {\n                value: propositions\n              }\n            }\n          } = newData;\n\n          if (propositions) {\n            const {\n              isMCQ,\n              items\n            } = propositions;\n            let deselectPrevSelected = false;\n            const newItems = items.map(item => {\n              if (item.id === proposition.id) {\n                if (!isMCQ && newValidty && item.validity.value !== newValidty) {\n                  deselectPrevSelected = true;\n                }\n\n                return proposition;\n              } else {\n                return item;\n              }\n            });\n\n            if (deselectPrevSelected) {\n              propositions.items = deselectAllProposition(newItems, false, proposition);\n            } else {\n              propositions.items = newItems;\n            }\n          }\n        }\n      } else if (action.type === Types.DELETE_QUESTION_PROPOSITION_DATA) {\n        newData = copyMainContent(data);\n\n        if (isQuestionPropositions(newData.main.content)) {\n          const proposition = action.payload;\n          const {\n            main: {\n              content: {\n                value: propositions\n              }\n            }\n          } = newData;\n\n          if (propositions) {\n            propositions.items = propositions.items.filter(item => item.id !== proposition.id);\n          }\n        }\n      } else if (action.type === Types.UPDATE_QUESTION_CUSTOM_DATA) {\n        newData = copyMainContent(data);\n\n        if (isQuestionCustom(data.main.content)) {\n          newData.main.content = action.payload;\n        }\n      } else if (action.type === Types.UPDATE_QUESTION_FEEDBACK_DATA) {\n        newData = copyData(data);\n        newData.feedback = action.payload;\n      } else if (action.type === Types.UPDATE_QUESTION_PARAMETERS_DATA) {\n        newData = copyData(data);\n        newData.parameters = action.payload;\n      }\n\n      if (newData) {\n        return { ...state,\n          isEdited: true,\n          data: newData\n        };\n      }\n    }\n  }\n\n  return state;\n}\n\nexport default questionReducer;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/question-editor/reducers/reducer.ts"],"names":["getQuestionMedias","isQuestionCustom","isQuestionPropositions","Types","copyData","data","copyMain","newData","main","copyMainContent","content","value","deselectAllProposition","items","exceptFirst","except","map","item","validity","id","questionReducer","state","action","type","INIT_QUESTION_EDITOR_DATA","payload","isEdited","oldMedias","UPDATE_QUESTION_EDITOR_DATA","UPDATE_QUESTION_INTRODUCTION_DATA","introduction","UPDATE_QUESTION_MAIN_DATA","UPDATE_QUESTION_PROPOSITIONS_DATA","newPropositions","propositions","isMCQ","ADD_QUESTION_PROPOSITION_DATA","proposition","UPDATE_QUESTION_PROPOSITION_DATA","newValidty","deselectPrevSelected","newItems","DELETE_QUESTION_PROPOSITION_DATA","filter","UPDATE_QUESTION_CUSTOM_DATA","UPDATE_QUESTION_FEEDBACK_DATA","feedback","UPDATE_QUESTION_PARAMETERS_DATA","parameters"],"mappings":"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","sourcesContent":["import { QuestionProposition, QuestionTemplate } from \"types\";\r\nimport { getQuestionMedias } from \"template-builders\";\r\nimport { isQuestionCustom, isQuestionPropositions } from \"utils\";\r\nimport * as Types from \"./types\";\r\n\r\nfunction copyData(data: QuestionTemplate) {\r\n  return { ...data };\r\n}\r\n\r\nfunction copyMain(data: QuestionTemplate) {\r\n  const newData = copyData(data);\r\n\r\n  newData.main = { ...data.main };\r\n\r\n  return newData;\r\n}\r\n\r\nfunction copyMainContent(data: QuestionTemplate) {\r\n  const newData = copyMain(data);\r\n\r\n  if (data.main.content) {\r\n    newData.main.content = {\r\n      ...data.main.content,\r\n    };\r\n\r\n    if (newData.main.content.value) {\r\n      newData.main.content.value = { ...newData.main.content.value };\r\n    }\r\n  }\r\n\r\n  return newData;\r\n}\r\n\r\nfunction deselectAllProposition(\r\n  items: QuestionProposition[],\r\n  exceptFirst: boolean = false,\r\n  except?: QuestionProposition\r\n) {\r\n  return items.map((item) => {\r\n    if (item.validity.value) {\r\n      if (exceptFirst) {\r\n        exceptFirst = false;\r\n        return item;\r\n      } else if (except && item.id === except.id) {\r\n        return item;\r\n      } else {\r\n        return { ...item, validity: { ...item.validity, value: false } };\r\n      }\r\n    } else {\r\n      return item;\r\n    }\r\n  });\r\n}\r\n\r\nfunction questionReducer(\r\n  state: Types.QuestionEditorState,\r\n  action: Types.QuestionEditorActions\r\n): Types.QuestionEditorState {\r\n  const { data } = state;\r\n\r\n  if (action.type === Types.INIT_QUESTION_EDITOR_DATA) {\r\n    const { payload } = action;\r\n\r\n    return {\r\n      ...state,\r\n      isEdited: false,\r\n      data: payload,\r\n      oldMedias: getQuestionMedias(payload),\r\n    };\r\n  } else if (data) {\r\n    if (action.type === Types.UPDATE_QUESTION_EDITOR_DATA) {\r\n      return { ...state, isEdited: true, data: action.payload };\r\n    } else {\r\n      let newData: QuestionTemplate | undefined;\r\n\r\n      if (action.type === Types.UPDATE_QUESTION_INTRODUCTION_DATA) {\r\n        newData = copyData(data);\r\n        newData.introduction = action.payload;\r\n      } else if (action.type === Types.UPDATE_QUESTION_MAIN_DATA) {\r\n        newData = copyData(data);\r\n        newData.main = action.payload;\r\n      } else if (action.type === Types.UPDATE_QUESTION_PROPOSITIONS_DATA) {\r\n        const newPropositions = action.payload;\r\n        newData = copyMainContent(data);\r\n\r\n        if (isQuestionPropositions(newData.main.content)) {\r\n          const {\r\n            main: { content: propositions },\r\n          } = newData;\r\n\r\n          if (propositions?.value) {\r\n            const { isMCQ } = propositions.value;\r\n\r\n            if (!newPropositions.isMCQ && isMCQ !== newPropositions.isMCQ) {\r\n              newPropositions.items = deselectAllProposition(newPropositions.items, true);\r\n            }\r\n          }\r\n\r\n          propositions.value = newPropositions;\r\n        }\r\n      } else if (action.type === Types.ADD_QUESTION_PROPOSITION_DATA) {\r\n        newData = copyMainContent(data);\r\n\r\n        if (isQuestionPropositions(newData.main.content)) {\r\n          const proposition = action.payload;\r\n          const {\r\n            main: {\r\n              content: { value: propositions },\r\n            },\r\n          } = newData;\r\n\r\n          if (propositions) {\r\n            propositions.items = [...propositions.items, proposition];\r\n          }\r\n        }\r\n      } else if (action.type === Types.UPDATE_QUESTION_PROPOSITION_DATA) {\r\n        newData = copyMainContent(data);\r\n\r\n        if (isQuestionPropositions(newData.main.content)) {\r\n          const proposition = action.payload;\r\n          const {\r\n            validity: { value: newValidty },\r\n          } = proposition;\r\n          const {\r\n            main: {\r\n              content: { value: propositions },\r\n            },\r\n          } = newData;\r\n\r\n          if (propositions) {\r\n            const { isMCQ, items } = propositions;\r\n            let deselectPrevSelected = false;\r\n\r\n            const newItems = items.map((item) => {\r\n              if (item.id === proposition.id) {\r\n                if (!isMCQ && newValidty && item.validity.value !== newValidty) {\r\n                  deselectPrevSelected = true;\r\n                }\r\n                return proposition;\r\n              } else {\r\n                return item;\r\n              }\r\n            });\r\n\r\n            if (deselectPrevSelected) {\r\n              propositions.items = deselectAllProposition(newItems, false, proposition);\r\n            } else {\r\n              propositions.items = newItems;\r\n            }\r\n          }\r\n        }\r\n      } else if (action.type === Types.DELETE_QUESTION_PROPOSITION_DATA) {\r\n        newData = copyMainContent(data);\r\n\r\n        if (isQuestionPropositions(newData.main.content)) {\r\n          const proposition = action.payload;\r\n          const {\r\n            main: {\r\n              content: { value: propositions },\r\n            },\r\n          } = newData;\r\n\r\n          if (propositions) {\r\n            propositions.items = propositions.items.filter((item) => item.id !== proposition.id);\r\n          }\r\n        }\r\n      } else if (action.type === Types.UPDATE_QUESTION_CUSTOM_DATA) {\r\n        newData = copyMainContent(data);\r\n\r\n        if (isQuestionCustom(data.main.content)) {\r\n          newData.main.content = action.payload;\r\n        }\r\n      } else if (action.type === Types.UPDATE_QUESTION_FEEDBACK_DATA) {\r\n        newData = copyData(data);\r\n        newData.feedback = action.payload;\r\n      } else if (action.type === Types.UPDATE_QUESTION_PARAMETERS_DATA) {\r\n        newData = copyData(data);\r\n        newData.parameters = action.payload;\r\n      }\r\n\r\n      if (newData) {\r\n        return { ...state, isEdited: true, data: newData };\r\n      }\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default questionReducer;\r\n"]},"metadata":{},"sourceType":"module"}