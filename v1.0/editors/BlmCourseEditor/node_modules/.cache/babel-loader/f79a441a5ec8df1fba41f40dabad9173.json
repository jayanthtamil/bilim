{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\shared\\\\numeric-input\\\\BlmNumericInput.tsx\";\nimport React, { useState, useEffect, forwardRef } from \"react\";\nimport clamp from \"lodash/clamp\";\nimport { toNumber } from \"utils\";\nconst TYPYPING_INTERVAL = 3000;\n\nconst BlmNumericInput = (props, ref) => {\n  const {\n    name,\n    value,\n    min,\n    max,\n    disabled,\n    className,\n    onChange\n  } = props;\n  const [text, setText] = useState(\"\");\n  const [validate, setValidate] = useState(false);\n  useEffect(() => {\n    var _value$toString;\n\n    const str = typeof value === \"string\" ? toNumber(value).toString() : (_value$toString = value === null || value === void 0 ? void 0 : value.toString()) !== null && _value$toString !== void 0 ? _value$toString : \"\";\n    setText(str);\n  }, [value]);\n  useEffect(() => {\n    if (validate) {\n      const timerId = setTimeout(validateValue, TYPYPING_INTERVAL);\n      return () => {\n        clearTimeout(timerId);\n      };\n    }\n  });\n\n  const validateValue = () => {\n    var _newValue;\n\n    if (!validate) {\n      return;\n    }\n\n    let newValue = clamp(toNumber(text), min !== null && min !== void 0 ? min : -Infinity, max !== null && max !== void 0 ? max : Infinity);\n\n    if (isNaN(newValue)) {\n      if (min !== undefined) {\n        newValue = min;\n      } else if (max !== undefined) {\n        newValue = max;\n      } else {\n        newValue = value;\n      }\n    }\n\n    setText(((_newValue = newValue) !== null && _newValue !== void 0 ? _newValue : \"\").toString());\n\n    if (onChange && newValue !== undefined) {\n      onChange({\n        target: {\n          name,\n          value: newValue\n        }\n      });\n    }\n\n    setValidate(false);\n  };\n\n  const handleChange = event => {\n    const regex = /^$|^[0-9\\b]+$/;\n    const str = event.target.value;\n\n    if (regex.test(str)) {\n      setText(str);\n      setValidate(true);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.keyCode === 13) {\n      validateValue();\n    }\n  };\n\n  const handleBlur = event => {\n    validateValue();\n  };\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    ref: ref,\n    value: text,\n    min: min,\n    max: max,\n    disabled: disabled,\n    className: className,\n    onChange: handleChange,\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default forwardRef(BlmNumericInput);","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/numeric-input/BlmNumericInput.tsx"],"names":["React","useState","useEffect","forwardRef","clamp","toNumber","TYPYPING_INTERVAL","BlmNumericInput","props","ref","name","value","min","max","disabled","className","onChange","text","setText","validate","setValidate","str","toString","timerId","setTimeout","validateValue","clearTimeout","newValue","Infinity","isNaN","undefined","target","handleChange","event","regex","test","handleKeyDown","keyCode","handleBlur"],"mappings":"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","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  ChangeEvent,\r\n  FocusEvent,\r\n  KeyboardEvent,\r\n  ForwardRefRenderFunction,\r\n  forwardRef,\r\n} from \"react\";\r\nimport clamp from \"lodash/clamp\";\r\n\r\nimport { CustomChangeEvent } from \"types\";\r\nimport { toNumber } from \"utils\";\r\n\r\nexport type NumericInputChangeEvent = CustomChangeEvent<number>;\r\n\r\ninterface CompProps {\r\n  name: string;\r\n  value?: number;\r\n  min?: number;\r\n  max?: number;\r\n  disabled?: boolean;\r\n  className?: string;\r\n  onChange?: (event: NumericInputChangeEvent) => void;\r\n}\r\n\r\nconst TYPYPING_INTERVAL = 3000;\r\n\r\nconst BlmNumericInput: ForwardRefRenderFunction<HTMLInputElement, CompProps> = (props, ref) => {\r\n  const { name, value, min, max, disabled, className, onChange } = props;\r\n  const [text, setText] = useState(\"\");\r\n  const [validate, setValidate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const str = typeof value === \"string\" ? toNumber(value).toString() : value?.toString() ?? \"\";\r\n\r\n    setText(str);\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (validate) {\r\n      const timerId = setTimeout(validateValue, TYPYPING_INTERVAL);\r\n\r\n      return () => {\r\n        clearTimeout(timerId);\r\n      };\r\n    }\r\n  });\r\n\r\n  const validateValue = () => {\r\n    if (!validate) {\r\n      return;\r\n    }\r\n\r\n    let newValue: number | undefined = clamp(toNumber(text), min ?? -Infinity, max ?? Infinity);\r\n\r\n    if (isNaN(newValue)) {\r\n      if (min !== undefined) {\r\n        newValue = min;\r\n      } else if (max !== undefined) {\r\n        newValue = max;\r\n      } else {\r\n        newValue = value;\r\n      }\r\n    }\r\n\r\n    setText((newValue ?? \"\").toString());\r\n\r\n    if (onChange && newValue !== undefined) {\r\n      onChange({\r\n        target: {\r\n          name,\r\n          value: newValue,\r\n        },\r\n      });\r\n    }\r\n\r\n    setValidate(false);\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const regex = /^$|^[0-9\\b]+$/;\r\n    const str = event.target.value;\r\n\r\n    if (regex.test(str)) {\r\n      setText(str);\r\n      setValidate(true);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: KeyboardEvent) => {\r\n    if (event.keyCode === 13) {\r\n      validateValue();\r\n    }\r\n  };\r\n\r\n  const handleBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    validateValue();\r\n  };\r\n\r\n  return (\r\n    <input\r\n      ref={ref}\r\n      value={text}\r\n      min={min}\r\n      max={max}\r\n      disabled={disabled}\r\n      className={className}\r\n      onChange={handleChange}\r\n      onKeyDown={handleKeyDown}\r\n      onBlur={handleBlur}\r\n    />\r\n  );\r\n};\r\n\r\nexport default forwardRef(BlmNumericInput);\r\n"]},"metadata":{},"sourceType":"module"}