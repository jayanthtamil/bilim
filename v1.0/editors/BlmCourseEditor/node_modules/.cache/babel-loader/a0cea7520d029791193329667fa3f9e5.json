{"ast":null,"code":"import { ButtonComponent } from \"types\";\nimport { ComponentActionTypes, GotoActionTypes, StyleListTypes } from \"editor-constants\";\nimport { toJSONObject } from \"utils\";\nimport { createMediaFormat, getAllHTMLElements, getBLMElement, getHTMLElement, setComponentBy } from \"../../core\";\nimport { createAction, createComponentStyle } from \"./common\";\nexport function getAllButtonComponent(parent, selector, repeaterId) {\n  const elements = getAllHTMLElements(parent, selector);\n  const buttons = [];\n\n  for (let element of elements) {\n    const button = createButton(element);\n    button.repeaterId = repeaterId;\n    buttons.push(button);\n  }\n\n  return buttons;\n}\n\nfunction createButton(element) {\n  var _button$buttonOptions;\n\n  const button = new ButtonComponent();\n  const model = getBLMElement(element);\n  const label = getHTMLElement(element, \".buttonoptionwrapper .buttonlabel\");\n  const num = getHTMLElement(element, \".buttonoptionwrapper .buttonnumber\");\n  const title = getHTMLElement(element, \".txtwrapper .buttontitle\");\n  const desc = getHTMLElement(element, \".txtwrapper .buttondescription\");\n  const caption = getHTMLElement(element, \".txtwrapper .buttoncaption\");\n  const {\n    attributes,\n    editorOptions\n  } = model;\n  const {\n    value\n  } = button;\n  const action = toJSONObject(attributes === null || attributes === void 0 ? void 0 : attributes[\"blm-action\"]);\n\n  if (action && action.onClick && action.onClick.action === ComponentActionTypes.Goto && Object.values(GotoActionTypes).includes(action.onClick.option)) {\n    action.onClick.action = ComponentActionTypes.Navigation;\n  }\n\n  setComponentBy(button, model);\n  button.classList = Array.from(element.classList);\n  button.hasApplyStyle = (attributes === null || attributes === void 0 ? void 0 : attributes[\"unapplystyle\"]) === undefined;\n  button.buttonOptions.config = {};\n  button.buttonOptions.config.format = (editorOptions === null || editorOptions === void 0 ? void 0 : editorOptions.format) && (editorOptions === null || editorOptions === void 0 ? void 0 : editorOptions.format.split(\",\")) || [\"auto\", \"pixelwidth\"];\n  button.buttonOptions.format = createMediaFormat(Array.from(element.classList), element.style, (_button$buttonOptions = button.buttonOptions.config) === null || _button$buttonOptions === void 0 ? void 0 : _button$buttonOptions.format);\n  button.buttonOptions.format.defaultWidth = 200;\n  value.background = editorOptions === null || editorOptions === void 0 ? void 0 : editorOptions.background;\n  value.inline = editorOptions === null || editorOptions === void 0 ? void 0 : editorOptions.inline;\n  value.title = (title === null || title === void 0 ? void 0 : title.textContent) || \"\";\n  value.description = (desc === null || desc === void 0 ? void 0 : desc.textContent) || \"\";\n  value.caption = (caption === null || caption === void 0 ? void 0 : caption.textContent) || \"\";\n  value.label = (label === null || label === void 0 ? void 0 : label.textContent) || \"\";\n  value.number = (num === null || num === void 0 ? void 0 : num.textContent) || \"\";\n  value.clickAction = createAction(\"click\", action === null || action === void 0 ? void 0 : action.onClick);\n  value.overAction = createAction(\"over\", action === null || action === void 0 ? void 0 : action.onRollOver);\n  value.style = createComponentStyle(element, StyleListTypes.Button, true);\n  value.style.tint = (editorOptions === null || editorOptions === void 0 ? void 0 : editorOptions.tint) || value.style.tint;\n  return button;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/model/component/button.ts"],"names":["ButtonComponent","ComponentActionTypes","GotoActionTypes","StyleListTypes","toJSONObject","createMediaFormat","getAllHTMLElements","getBLMElement","getHTMLElement","setComponentBy","createAction","createComponentStyle","getAllButtonComponent","parent","selector","repeaterId","elements","buttons","element","button","createButton","push","model","label","num","title","desc","caption","attributes","editorOptions","value","action","onClick","Goto","Object","values","includes","option","Navigation","classList","Array","from","hasApplyStyle","undefined","buttonOptions","config","format","split","style","defaultWidth","background","inline","textContent","description","number","clickAction","overAction","onRollOver","Button","tint"],"mappings":"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","sourcesContent":["import { ButtonComponent, MediaConfig, MediaFile, SimpleObject, Tint } from \"types\";\r\nimport {\r\n  ComponentActionTypes,\r\n  GotoActionTypes,\r\n  MediaFormats,\r\n  StyleListTypes,\r\n} from \"editor-constants\";\r\nimport { toJSONObject } from \"utils\";\r\nimport {\r\n  createMediaFormat,\r\n  getAllHTMLElements,\r\n  getBLMElement,\r\n  getHTMLElement,\r\n  setComponentBy,\r\n} from \"../../core\";\r\nimport { createAction, createComponentStyle } from \"./common\";\r\n\r\nexport function getAllButtonComponent(parent: HTMLElement, selector: string, repeaterId?: string) {\r\n  const elements = getAllHTMLElements(parent, selector);\r\n  const buttons = [];\r\n\r\n  for (let element of elements) {\r\n    const button = createButton(element);\r\n    button.repeaterId = repeaterId;\r\n\r\n    buttons.push(button);\r\n  }\r\n\r\n  return buttons;\r\n}\r\n\r\nfunction createButton(element: HTMLElement) {\r\n  const button = new ButtonComponent();\r\n  const model = getBLMElement<\r\n    object,\r\n    { background?: MediaFile; inline?: MediaFile; tint?: Tint; format: string } | undefined\r\n  >(element);\r\n  const label = getHTMLElement(element, \".buttonoptionwrapper .buttonlabel\");\r\n  const num = getHTMLElement(element, \".buttonoptionwrapper .buttonnumber\");\r\n  const title = getHTMLElement(element, \".txtwrapper .buttontitle\");\r\n  const desc = getHTMLElement(element, \".txtwrapper .buttondescription\");\r\n  const caption = getHTMLElement(element, \".txtwrapper .buttoncaption\");\r\n  const { attributes, editorOptions } = model;\r\n  const { value } = button;\r\n  const action = toJSONObject<{\r\n    onClick?: SimpleObject;\r\n    onRollOver?: SimpleObject;\r\n  }>(attributes?.[\"blm-action\"]);\r\n\r\n  if (\r\n    action &&\r\n    action.onClick &&\r\n    action.onClick.action === ComponentActionTypes.Goto &&\r\n    Object.values(GotoActionTypes).includes(action.onClick.option)\r\n  ) {\r\n    action.onClick.action = ComponentActionTypes.Navigation;\r\n  }\r\n\r\n  setComponentBy(button, model);\r\n\r\n  button.classList = Array.from(element.classList);\r\n  button.hasApplyStyle = attributes?.[\"unapplystyle\"] === undefined;\r\n  button.buttonOptions.config = {} as MediaConfig;\r\n  button.buttonOptions.config.format =\r\n    (editorOptions?.format && (editorOptions?.format.split(\",\") as MediaFormats[])) ||\r\n    ([\"auto\", \"pixelwidth\"] as MediaFormats[]);\r\n  button.buttonOptions.format = createMediaFormat(\r\n    Array.from(element.classList),\r\n    element.style,\r\n    button.buttonOptions.config?.format\r\n  );\r\n  button.buttonOptions.format.defaultWidth = 200;\r\n\r\n  value.background = editorOptions?.background;\r\n  value.inline = editorOptions?.inline;\r\n  value.title = title?.textContent || \"\";\r\n  value.description = desc?.textContent || \"\";\r\n  value.caption = caption?.textContent || \"\";\r\n  value.label = label?.textContent || \"\";\r\n  value.number = num?.textContent || \"\";\r\n  value.clickAction = createAction(\"click\", action?.onClick);\r\n  value.overAction = createAction(\"over\", action?.onRollOver);\r\n  value.style = createComponentStyle(element, StyleListTypes.Button, true);\r\n  value.style.tint = editorOptions?.tint || value.style.tint;\r\n\r\n  return button;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}