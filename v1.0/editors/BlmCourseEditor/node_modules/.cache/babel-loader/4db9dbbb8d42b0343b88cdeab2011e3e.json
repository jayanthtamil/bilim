{"ast":null,"code":"import { QuestionMain, QuestionPropositions, QuestionProposition, QuestionPropositionInfo, QuestionPropositionFeedback, BaseComponent, QuestionCustomComponent, QuestionValidate } from \"types\";\nimport { QuestionPropositionValidTypes, QuestionPropositionInfoTypes, TemplateEditorOptionTypes, QuestionPropositionTypes, QuestionTemplateTypes } from \"editor-constants\";\nimport { createUUID } from \"utils\";\nimport { getBLMElement, getSimpleContentId, getHTMLElement, getAllHTMLElements, createMediaConfig, createMediaFormat, setComponentBy } from \"../../core\";\nimport { getQuestionMediaComponent, getSimpleContentComponent, getTextComponent } from \"../component\";\nexport function getQuestionMain(root, type) {\n  const main = new QuestionMain();\n  const element = getHTMLElement(root, \"[id='mainquestion']\");\n\n  if (element) {\n    main.title = getTextComponent(element, \"[blm-value='entiled']\");\n    main.text = getTextComponent(element, \"[blm-value='description']\");\n    main.media = getQuestionMediaComponent(element, \"[blm-value='mainmedia']\", true);\n    main.sound = getQuestionMediaComponent(element, \"[blm-value='mainsound']\");\n    main.simpleContent = getSimpleContentComponent(element, \"[blm-value='knowmore']\");\n    main.instruction = getTextComponent(element, \"[blm-value='instruction']\");\n    main.validate = getQuestionValidate(element);\n\n    if (type === QuestionTemplateTypes.Standard) {\n      main.content = getQuestionPropositions(element);\n    } else {\n      main.content = getQuestionCustom(element);\n    }\n  }\n\n  return main;\n}\n\nfunction getQuestionValidate(parent) {\n  const validate = new QuestionValidate();\n  const element = getHTMLElement(parent, \"[blm-value='validate']\");\n\n  if (element) {\n    validate.checked = !element.classList.contains(\"deactivated\");\n  }\n\n  return validate;\n}\n\nfunction getQuestionPropositions(parent) {\n  const propositions = new QuestionPropositions();\n  const element = getHTMLElement(parent, \"[blm-value='propositions']\");\n  const result = new BaseComponent(undefined);\n\n  if (element) {\n    const model = getBLMElement(element);\n    const items = getAllHTMLElements(element, \"[blm-value='proposition']\");\n    const {\n      isEditable = false,\n      options\n    } = model;\n\n    if (options) {\n      propositions.isMCQ = options.type === QuestionPropositionTypes.Multiple;\n      propositions.restrictTypeToSingle = options.restrict_type_to_single;\n      propositions.randomize = options.randomize;\n      propositions.maximum = options.maxprop;\n      propositions.minimum = options.minprop;\n    }\n\n    items.forEach(itemDom => {\n      const proposition = getQuestionProposition(itemDom);\n      propositions.items.push(proposition);\n    });\n    result.value = propositions;\n    result.isEditable = isEditable;\n  }\n\n  return result;\n}\n\nfunction getQuestionProposition(parent) {\n  const proposition = new QuestionProposition();\n  const model = getBLMElement(parent);\n  const validity = model.option === QuestionPropositionValidTypes.Right;\n  proposition.id = createUUID(); //local id used for drag and drop.\n\n  proposition.validity = new BaseComponent(validity);\n  proposition.title = getTextComponent(parent, \"[blm-value='propositiontitle']\");\n  proposition.text = getTextComponent(parent, \"[blm-value='propositiontext']\");\n  proposition.media = getQuestionMediaComponent(parent, \"[blm-value='mediaprop']\");\n  proposition.sound = getQuestionMediaComponent(parent, \"[blm-value='soundprop']\");\n  proposition.info = getQuestionPropositionInfo(parent);\n  proposition.feedback = getQuestionPropositionFeedback(parent);\n  return proposition;\n}\n\nfunction getQuestionPropositionInfo(parent) {\n  const info = new QuestionPropositionInfo();\n  const element = getHTMLElement(parent, \"[blm-value='knowmoreprop']\");\n  const result = new BaseComponent(undefined);\n\n  if (element) {\n    const model = getBLMElement(element);\n    const {\n      isEditable = false,\n      option\n    } = model;\n    const simpleContentId = getSimpleContentId(option);\n\n    if (simpleContentId) {\n      info.type = QuestionPropositionInfoTypes.Detailed;\n    } else {\n      info.type = model.option || QuestionPropositionInfoTypes.None;\n    }\n\n    info.simpleContentId = simpleContentId || TemplateEditorOptionTypes.None;\n    info.simple.title = getTextComponent(element, \"[blm-value='knowmoreproppopuptitle']\");\n    info.simple.text = getTextComponent(element, \"[blm-value='knowmoreproppopuptext']\");\n    result.value = info;\n    result.isEditable = isEditable;\n  }\n\n  return result;\n}\n\nfunction getQuestionPropositionFeedback(parent) {\n  const feedback = new QuestionPropositionFeedback();\n  const element = getHTMLElement(parent, \"[id='feedbackprop']\");\n\n  if (element) {\n    feedback.title = getTextComponent(element, \"[blm-value='propositionfeedbacktitle']\");\n    feedback.text = getTextComponent(element, \"[blm-value='propositionfeedbacktext']\");\n    feedback.media = getQuestionMediaComponent(element, \"[blm-value='mediafeedbackprop']\");\n    feedback.sound = getQuestionMediaComponent(element, \"[blm-value='soundfeedbackprop']\");\n  }\n\n  return feedback;\n}\n\nfunction getQuestionCustom(mainHtml) {\n  const custom = new QuestionCustomComponent();\n  const element = getHTMLElement(mainHtml, \"[blm-value='maincustommedia']\");\n\n  if (element) {\n    var _custom$config;\n\n    const model = getBLMElement(element);\n    const {\n      options,\n      editorOptions\n    } = model;\n    setComponentBy(custom, model);\n\n    if (options) {\n      custom.options = options;\n      custom.config = createMediaConfig(options);\n    }\n\n    custom.format = createMediaFormat(Array.from(element.classList), element.style, (_custom$config = custom.config) === null || _custom$config === void 0 ? void 0 : _custom$config.format);\n\n    if (editorOptions) {\n      custom.value = editorOptions;\n    }\n  }\n\n  return custom;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/model/question/main.ts"],"names":["QuestionMain","QuestionPropositions","QuestionProposition","QuestionPropositionInfo","QuestionPropositionFeedback","BaseComponent","QuestionCustomComponent","QuestionValidate","QuestionPropositionValidTypes","QuestionPropositionInfoTypes","TemplateEditorOptionTypes","QuestionPropositionTypes","QuestionTemplateTypes","createUUID","getBLMElement","getSimpleContentId","getHTMLElement","getAllHTMLElements","createMediaConfig","createMediaFormat","setComponentBy","getQuestionMediaComponent","getSimpleContentComponent","getTextComponent","getQuestionMain","root","type","main","element","title","text","media","sound","simpleContent","instruction","validate","getQuestionValidate","Standard","content","getQuestionPropositions","getQuestionCustom","parent","checked","classList","contains","propositions","result","undefined","model","items","isEditable","options","isMCQ","Multiple","restrictTypeToSingle","restrict_type_to_single","randomize","maximum","maxprop","minimum","minprop","forEach","itemDom","proposition","getQuestionProposition","push","value","validity","option","Right","id","info","getQuestionPropositionInfo","feedback","getQuestionPropositionFeedback","simpleContentId","Detailed","None","simple","mainHtml","custom","editorOptions","config","format","Array","from","style"],"mappings":"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","sourcesContent":["import {\r\n  QuestionMain,\r\n  QuestionPropositions,\r\n  QuestionProposition,\r\n  QuestionPropositionInfo,\r\n  QuestionPropositionFeedback,\r\n  BaseComponent,\r\n  QuizPropositionsOptionsJSON,\r\n  QuestionCustomComponent,\r\n  MediaConfigJSON,\r\n  MediaFile,\r\n  QuestionValidate,\r\n} from \"types\";\r\nimport {\r\n  QuestionPropositionValidTypes,\r\n  QuestionPropositionInfoTypes,\r\n  TemplateEditorOptionTypes,\r\n  QuestionPropositionTypes,\r\n  QuestionTemplateTypes,\r\n} from \"editor-constants\";\r\nimport { createUUID } from \"utils\";\r\nimport {\r\n  getBLMElement,\r\n  getSimpleContentId,\r\n  getHTMLElement,\r\n  getAllHTMLElements,\r\n  createMediaConfig,\r\n  createMediaFormat,\r\n  setComponentBy,\r\n} from \"../../core\";\r\nimport {\r\n  getQuestionMediaComponent,\r\n  getSimpleContentComponent,\r\n  getTextComponent,\r\n} from \"../component\";\r\n\r\nexport function getQuestionMain(root: HTMLElement, type: QuestionTemplateTypes) {\r\n  const main = new QuestionMain();\r\n  const element = getHTMLElement(root, \"[id='mainquestion']\");\r\n\r\n  if (element) {\r\n    main.title = getTextComponent(element, \"[blm-value='entiled']\");\r\n    main.text = getTextComponent(element, \"[blm-value='description']\");\r\n    main.media = getQuestionMediaComponent(element, \"[blm-value='mainmedia']\", true);\r\n    main.sound = getQuestionMediaComponent(element, \"[blm-value='mainsound']\");\r\n    main.simpleContent = getSimpleContentComponent(element, \"[blm-value='knowmore']\");\r\n    main.instruction = getTextComponent(element, \"[blm-value='instruction']\");\r\n    main.validate = getQuestionValidate(element);\r\n\r\n    if (type === QuestionTemplateTypes.Standard) {\r\n      main.content = getQuestionPropositions(element);\r\n    } else {\r\n      main.content = getQuestionCustom(element);\r\n    }\r\n  }\r\n\r\n  return main;\r\n}\r\n\r\nfunction getQuestionValidate(parent: HTMLElement) {\r\n  const validate = new QuestionValidate();\r\n  const element = getHTMLElement(parent, \"[blm-value='validate']\");\r\n\r\n  if (element) {\r\n    validate.checked = !element.classList.contains(\"deactivated\");\r\n  }\r\n\r\n  return validate;\r\n}\r\n\r\nfunction getQuestionPropositions(parent: HTMLElement) {\r\n  const propositions = new QuestionPropositions();\r\n  const element = getHTMLElement(parent, \"[blm-value='propositions']\");\r\n  const result = new BaseComponent<QuestionPropositions>(undefined);\r\n\r\n  if (element) {\r\n    const model = getBLMElement<QuizPropositionsOptionsJSON>(element);\r\n    const items = getAllHTMLElements(element, \"[blm-value='proposition']\");\r\n    const { isEditable = false, options } = model;\r\n\r\n    if (options) {\r\n      propositions.isMCQ = options.type === QuestionPropositionTypes.Multiple;\r\n      propositions.restrictTypeToSingle = options.restrict_type_to_single;\r\n      propositions.randomize = options.randomize;\r\n      propositions.maximum = options.maxprop;\r\n      propositions.minimum = options.minprop;\r\n    }\r\n\r\n    items.forEach((itemDom) => {\r\n      const proposition = getQuestionProposition(itemDom);\r\n\r\n      propositions.items.push(proposition);\r\n    });\r\n\r\n    result.value = propositions;\r\n    result.isEditable = isEditable;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction getQuestionProposition(parent: HTMLElement) {\r\n  const proposition = new QuestionProposition();\r\n  const model = getBLMElement(parent);\r\n  const validity = model.option === QuestionPropositionValidTypes.Right;\r\n\r\n  proposition.id = createUUID(); //local id used for drag and drop.\r\n  proposition.validity = new BaseComponent(validity);\r\n  proposition.title = getTextComponent(parent, \"[blm-value='propositiontitle']\");\r\n  proposition.text = getTextComponent(parent, \"[blm-value='propositiontext']\");\r\n  proposition.media = getQuestionMediaComponent(parent, \"[blm-value='mediaprop']\");\r\n  proposition.sound = getQuestionMediaComponent(parent, \"[blm-value='soundprop']\");\r\n\r\n  proposition.info = getQuestionPropositionInfo(parent);\r\n  proposition.feedback = getQuestionPropositionFeedback(parent);\r\n\r\n  return proposition;\r\n}\r\n\r\nfunction getQuestionPropositionInfo(parent: HTMLElement) {\r\n  const info = new QuestionPropositionInfo();\r\n  const element = getHTMLElement(parent, \"[blm-value='knowmoreprop']\");\r\n  const result = new BaseComponent<QuestionPropositionInfo>(undefined);\r\n\r\n  if (element) {\r\n    const model = getBLMElement(element);\r\n    const { isEditable = false, option } = model;\r\n    const simpleContentId = getSimpleContentId(option);\r\n\r\n    if (simpleContentId) {\r\n      info.type = QuestionPropositionInfoTypes.Detailed;\r\n    } else {\r\n      info.type =\r\n        (model.option as QuestionPropositionInfoTypes) || QuestionPropositionInfoTypes.None;\r\n    }\r\n\r\n    info.simpleContentId = simpleContentId || TemplateEditorOptionTypes.None;\r\n    info.simple.title = getTextComponent(element, \"[blm-value='knowmoreproppopuptitle']\");\r\n    info.simple.text = getTextComponent(element, \"[blm-value='knowmoreproppopuptext']\");\r\n\r\n    result.value = info;\r\n    result.isEditable = isEditable;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction getQuestionPropositionFeedback(parent: HTMLElement) {\r\n  const feedback = new QuestionPropositionFeedback();\r\n  const element = getHTMLElement(parent, \"[id='feedbackprop']\");\r\n\r\n  if (element) {\r\n    feedback.title = getTextComponent(element, \"[blm-value='propositionfeedbacktitle']\");\r\n    feedback.text = getTextComponent(element, \"[blm-value='propositionfeedbacktext']\");\r\n    feedback.media = getQuestionMediaComponent(element, \"[blm-value='mediafeedbackprop']\");\r\n    feedback.sound = getQuestionMediaComponent(element, \"[blm-value='soundfeedbackprop']\");\r\n  }\r\n\r\n  return feedback;\r\n}\r\n\r\nfunction getQuestionCustom(mainHtml: HTMLElement) {\r\n  const custom = new QuestionCustomComponent();\r\n  const element = getHTMLElement(mainHtml, \"[blm-value='maincustommedia']\");\r\n\r\n  if (element) {\r\n    const model = getBLMElement<MediaConfigJSON, MediaFile>(element);\r\n    const { options, editorOptions } = model;\r\n\r\n    setComponentBy(custom, model);\r\n\r\n    if (options) {\r\n      custom.options = options;\r\n      custom.config = createMediaConfig(options);\r\n    }\r\n\r\n    custom.format = createMediaFormat(\r\n      Array.from(element.classList),\r\n      element.style,\r\n      custom.config?.format\r\n    );\r\n\r\n    if (editorOptions) {\r\n      custom.value = editorOptions;\r\n    }\r\n  }\r\n\r\n  return custom;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}