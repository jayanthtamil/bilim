{"ast":null,"code":"import { toBRs } from \"utils\";\nimport { DOMAIN } from \"config\";\nimport { fetchAPI } from \"redux/api\";\nimport * as actions from \"../types\";\nexport const uploadFiles = (id, elementId, files) => (dispatch, getState) => {\n  const headers = {};\n  const state = getState();\n  const {\n    course: {\n      properties: {\n        id: courseId\n      }\n    }\n  } = state;\n\n  if (!courseId || courseId === \"\") {\n    return;\n  }\n\n  const formData = new FormData();\n  formData.append(\"elementId\", elementId);\n  formData.append(\"courseId\", courseId);\n  files.forEach(file => {\n    if (file instanceof File) {\n      formData.append(\"file[]\", file, file.name);\n    } else {\n      if (file.id) {\n        formData.append(\"mediaId[]\", file.id);\n      }\n\n      formData.append(\"file[]\", new Blob([file.content], {\n        type: \"text/plain\"\n      }), file.name);\n    }\n  });\n  return dispatch(fetchAPI({\n    url: \"service/upload\",\n    method: \"POST\",\n    authenticated: false,\n    headers,\n    body: formData,\n    meta: {\n      id,\n      files\n    },\n    types: [actions.UPLOAD_FILE_STARTED, actions.UPLOAD_FILE_SUCCESS, actions.UPLOAD_FILE_ERROR]\n  }));\n};\nexport function deleteFiles(elementId, medias) {\n  const body = {\n    element_id: elementId,\n    media_ids: medias.map(media => media.id)\n  };\n  return fetchAPI({\n    url: \"api/media\",\n    method: \"DELETE\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    types: [actions.DELETE_FILES_STARTED, actions.DELETE_FILES_SUCCESS, actions.DELETE_FILES_ERROR]\n  });\n}\nexport function getFile(id, url) {\n  return fetchAPI({\n    url: DOMAIN + url,\n    method: \"GET\",\n    authenticated: false,\n    headers: {},\n    meta: {\n      id\n    },\n    types: [actions.GET_FILE_STARATED, actions.GET_FILE_SUCCESS, actions.GET_FILE_ERROR]\n  });\n}\nexport function clearFile(id) {\n  return {\n    type: actions.CLEAR_FILE,\n    payload: {\n      id\n    }\n  };\n}\nexport function addFiles(medias) {\n  return {\n    type: actions.ADD_FILES,\n    payload: {\n      medias\n    }\n  };\n}\nexport function removeFiles(medias) {\n  if (medias.length) {\n    return {\n      type: actions.REMOVE_FILES,\n      payload: {\n        medias\n      }\n    };\n  }\n}\nexport function clearFiles(id, isSaved) {\n  return (dispatch, getState) => {\n    const {\n      course: {\n        file: {\n          files: {\n            added,\n            removed\n          }\n        }\n      }\n    } = getState();\n    const arr = isSaved ? removed : added;\n\n    if (arr.length > 0) {\n      dispatch(deleteFiles(id, arr));\n    }\n\n    return dispatch({\n      type: actions.CLEAR_FILES\n    });\n  };\n}\nexport function getAnimation(id) {\n  return fetchAPI({\n    url: \"api/custom_media/\" + id,\n    method: \"GET\",\n    authenticated: true,\n    meta: {\n      id\n    },\n    types: [actions.GET_ANIMATION_STARATED, actions.GET_ANIMATION_SUCCESS, actions.GET_ANIMATION_ERROR]\n  });\n}\nexport function updateAnimation(id, animation) {\n  var _animation$translatio;\n\n  const body = { ...animation,\n    translations: (_animation$translatio = animation.translations) === null || _animation$translatio === void 0 ? void 0 : _animation$translatio.map(item => ({ ...item,\n      text: toBRs(item.text)\n    }))\n  };\n  return fetchAPI({\n    url: \"api/custom_media/\" + id,\n    method: \"PATCH\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    meta: {\n      id,\n      animation\n    },\n    types: [actions.UPDATE_ANIMATION_STARATED, actions.UPDATE_ANIMATION_SUCCESS, actions.UPDATE_ANIMATION_ERROR]\n  });\n}\nexport function clearAnimations() {\n  return {\n    type: actions.CLEAR_ANIMATIONS\n  };\n}\nexport const replaceAnimationAttachment = (id, attachment, file) => {\n  const headers = {\n    \"Content-Disposition\": 'file; filename=\"' + file.name + '\"'\n  };\n  const {\n    url\n  } = attachment;\n  const formData = new FormData();\n  formData.append(\"id\", id);\n  formData.append(\"path\", url);\n  formData.append(\"file\", file, file.name);\n  return fetchAPI({\n    url: \"service/replace-animation\",\n    method: \"POST\",\n    authenticated: false,\n    headers,\n    body: formData,\n    meta: {\n      id,\n      attachment\n    },\n    types: [actions.REPLACE_ANIMATION_ATTACHMENT_STARATED, actions.REPLACE_ANIMATION_ATTACHMENT_SUCCESS, actions.REPLACE_ANIMATION_ATTACHMENT_ERROR]\n  });\n};\nexport function getMediaProperties(id) {\n  const body = {\n    media_ids: id\n  };\n  return fetchAPI({\n    url: \"/api/media\",\n    method: \"PATCH\",\n    authenticated: true,\n    body: JSON.stringify(body),\n    meta: {\n      id\n    },\n    types: [actions.GET_MEDIA_PROPERTIES_STARATED, actions.GET_MEDIA_PROPERTIES_SUCCESS, actions.GET_MEDIA_PROPERTIES_ERROR]\n  });\n}\nexport function clearMediaProperties() {\n  return {\n    type: actions.CLEAR_MEDIA_PROPERTIES\n  };\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/course/file/actions/index.ts"],"names":["toBRs","DOMAIN","fetchAPI","actions","uploadFiles","id","elementId","files","dispatch","getState","headers","state","course","properties","courseId","formData","FormData","append","forEach","file","File","name","Blob","content","type","url","method","authenticated","body","meta","types","UPLOAD_FILE_STARTED","UPLOAD_FILE_SUCCESS","UPLOAD_FILE_ERROR","deleteFiles","medias","element_id","media_ids","map","media","JSON","stringify","DELETE_FILES_STARTED","DELETE_FILES_SUCCESS","DELETE_FILES_ERROR","getFile","GET_FILE_STARATED","GET_FILE_SUCCESS","GET_FILE_ERROR","clearFile","CLEAR_FILE","payload","addFiles","ADD_FILES","removeFiles","length","REMOVE_FILES","clearFiles","isSaved","added","removed","arr","CLEAR_FILES","getAnimation","GET_ANIMATION_STARATED","GET_ANIMATION_SUCCESS","GET_ANIMATION_ERROR","updateAnimation","animation","translations","item","text","UPDATE_ANIMATION_STARATED","UPDATE_ANIMATION_SUCCESS","UPDATE_ANIMATION_ERROR","clearAnimations","CLEAR_ANIMATIONS","replaceAnimationAttachment","attachment","REPLACE_ANIMATION_ATTACHMENT_STARATED","REPLACE_ANIMATION_ATTACHMENT_SUCCESS","REPLACE_ANIMATION_ATTACHMENT_ERROR","getMediaProperties","GET_MEDIA_PROPERTIES_STARATED","GET_MEDIA_PROPERTIES_SUCCESS","GET_MEDIA_PROPERTIES_ERROR","clearMediaProperties","CLEAR_MEDIA_PROPERTIES"],"mappings":"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","sourcesContent":["import { AnimationAttachment, AnimationMedia, MediaFile } from \"types\";\r\nimport { toBRs } from \"utils\";\r\nimport { DOMAIN } from \"config\";\r\nimport { fetchAPI } from \"redux/api\";\r\nimport { ApiThunkAction, AppThunkAction } from \"redux/types\";\r\nimport * as actions from \"../types\";\r\n\r\nexport const uploadFiles =\r\n  (id: string, elementId: string, files: (File | actions.FileContent)[]): ApiThunkAction =>\r\n  (dispatch, getState) => {\r\n    const headers = {};\r\n    const state = getState();\r\n    const {\r\n      course: {\r\n        properties: { id: courseId },\r\n      },\r\n    } = state;\r\n\r\n    if (!courseId || courseId === \"\") {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"elementId\", elementId);\r\n    formData.append(\"courseId\", courseId);\r\n\r\n    files.forEach((file) => {\r\n      if (file instanceof File) {\r\n        formData.append(\"file[]\", file, file.name);\r\n      } else {\r\n        if (file.id) {\r\n          formData.append(\"mediaId[]\", file.id);\r\n        }\r\n        formData.append(\"file[]\", new Blob([file.content], { type: \"text/plain\" }), file.name);\r\n      }\r\n    });\r\n\r\n    return dispatch(\r\n      fetchAPI({\r\n        url: \"service/upload\",\r\n        method: \"POST\",\r\n        authenticated: false,\r\n        headers,\r\n        body: formData,\r\n        meta: { id, files },\r\n        types: [\r\n          actions.UPLOAD_FILE_STARTED,\r\n          actions.UPLOAD_FILE_SUCCESS,\r\n          actions.UPLOAD_FILE_ERROR,\r\n        ],\r\n      })\r\n    );\r\n  };\r\n\r\nexport function deleteFiles(elementId: string, medias: MediaFile[]) {\r\n  const body = { element_id: elementId, media_ids: medias.map((media) => media.id) };\r\n\r\n  return fetchAPI({\r\n    url: \"api/media\",\r\n    method: \"DELETE\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    types: [actions.DELETE_FILES_STARTED, actions.DELETE_FILES_SUCCESS, actions.DELETE_FILES_ERROR],\r\n  });\r\n}\r\n\r\nexport function getFile(id: string, url: string) {\r\n  return fetchAPI({\r\n    url: DOMAIN + url,\r\n    method: \"GET\",\r\n    authenticated: false,\r\n    headers: {},\r\n    meta: { id },\r\n    types: [actions.GET_FILE_STARATED, actions.GET_FILE_SUCCESS, actions.GET_FILE_ERROR],\r\n  });\r\n}\r\n\r\nexport function clearFile(id: string): actions.ClearFileAction {\r\n  return {\r\n    type: actions.CLEAR_FILE,\r\n    payload: {\r\n      id,\r\n    },\r\n  };\r\n}\r\n\r\nexport function addFiles(medias: MediaFile[]): actions.AddFilesAction {\r\n  return {\r\n    type: actions.ADD_FILES,\r\n    payload: {\r\n      medias,\r\n    },\r\n  };\r\n}\r\n\r\nexport function removeFiles(medias: MediaFile[]): actions.RemoveFilesAction | undefined {\r\n  if (medias.length) {\r\n    return {\r\n      type: actions.REMOVE_FILES,\r\n      payload: { medias },\r\n    };\r\n  }\r\n}\r\n\r\nexport function clearFiles(id: string, isSaved: boolean): AppThunkAction<actions.ClearFilesAction> {\r\n  return (dispatch, getState) => {\r\n    const {\r\n      course: {\r\n        file: {\r\n          files: { added, removed },\r\n        },\r\n      },\r\n    } = getState();\r\n    const arr = isSaved ? removed : added;\r\n\r\n    if (arr.length > 0) {\r\n      dispatch(deleteFiles(id, arr));\r\n    }\r\n\r\n    return dispatch({\r\n      type: actions.CLEAR_FILES,\r\n    });\r\n  };\r\n}\r\n\r\nexport function getAnimation(id: string) {\r\n  return fetchAPI({\r\n    url: \"api/custom_media/\" + id,\r\n    method: \"GET\",\r\n    authenticated: true,\r\n    meta: { id },\r\n    types: [\r\n      actions.GET_ANIMATION_STARATED,\r\n      actions.GET_ANIMATION_SUCCESS,\r\n      actions.GET_ANIMATION_ERROR,\r\n    ],\r\n  });\r\n}\r\n\r\nexport function updateAnimation(\r\n  id: string,\r\n  animation: Partial<Pick<AnimationMedia, \"translations\" | \"options\">>\r\n) {\r\n  const body = {\r\n    ...animation,\r\n    translations: animation.translations?.map((item) => ({ ...item, text: toBRs(item.text) })),\r\n  };\r\n\r\n  return fetchAPI({\r\n    url: \"api/custom_media/\" + id,\r\n    method: \"PATCH\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    meta: { id, animation },\r\n    types: [\r\n      actions.UPDATE_ANIMATION_STARATED,\r\n      actions.UPDATE_ANIMATION_SUCCESS,\r\n      actions.UPDATE_ANIMATION_ERROR,\r\n    ],\r\n  });\r\n}\r\n\r\nexport function clearAnimations(): actions.ClearAnimationsAction {\r\n  return {\r\n    type: actions.CLEAR_ANIMATIONS,\r\n  };\r\n}\r\n\r\nexport const replaceAnimationAttachment = (\r\n  id: string,\r\n  attachment: AnimationAttachment,\r\n  file: File\r\n) => {\r\n  const headers = { \"Content-Disposition\": 'file; filename=\"' + file.name + '\"' };\r\n  const { url } = attachment;\r\n\r\n  const formData = new FormData();\r\n  formData.append(\"id\", id);\r\n  formData.append(\"path\", url);\r\n  formData.append(\"file\", file, file.name);\r\n\r\n  return fetchAPI({\r\n    url: \"service/replace-animation\",\r\n    method: \"POST\",\r\n    authenticated: false,\r\n    headers,\r\n    body: formData,\r\n    meta: { id, attachment },\r\n    types: [\r\n      actions.REPLACE_ANIMATION_ATTACHMENT_STARATED,\r\n      actions.REPLACE_ANIMATION_ATTACHMENT_SUCCESS,\r\n      actions.REPLACE_ANIMATION_ATTACHMENT_ERROR,\r\n    ],\r\n  });\r\n};\r\n\r\nexport function getMediaProperties(id: string) {\r\n  const body = { media_ids: id };\r\n\r\n  return fetchAPI({\r\n    url: \"/api/media\",\r\n    method: \"PATCH\",\r\n    authenticated: true,\r\n    body: JSON.stringify(body),\r\n    meta: { id },\r\n    types: [\r\n      actions.GET_MEDIA_PROPERTIES_STARATED,\r\n      actions.GET_MEDIA_PROPERTIES_SUCCESS,\r\n      actions.GET_MEDIA_PROPERTIES_ERROR,\r\n    ],\r\n  });\r\n}\r\n\r\nexport function clearMediaProperties(): actions.ClearMediaPropertiesAction {\r\n  return {\r\n    type: actions.CLEAR_MEDIA_PROPERTIES,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}