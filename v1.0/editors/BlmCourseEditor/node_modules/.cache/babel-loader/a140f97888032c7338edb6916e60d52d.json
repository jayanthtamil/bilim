{"ast":null,"code":"import { Tint } from \"types\";\nimport { toNumber, updateStyleInnerHTML } from \"utils\";\nexport function getHTMLElement(parent, selector) {\n  return parent.querySelector(selector);\n}\nexport function getAllHTMLElements(parent, selector) {\n  return Array.from(parent.querySelectorAll(selector));\n}\nexport function getComputedStyle(parent, selector) {\n  const element = getHTMLElement(parent, selector);\n\n  if (element) {\n    return window.getComputedStyle(element);\n  }\n}\nexport function getStyleElementRules(parent) {\n  const styles = parent.getElementsByTagName(\"style\");\n\n  if (styles.length) {\n    var _style$sheet;\n\n    const style = styles[0];\n    return (_style$sheet = style.sheet) === null || _style$sheet === void 0 ? void 0 : _style$sheet.cssRules;\n  }\n}\nexport function setStyleSheetHTML(root) {\n  const styles = root.getElementsByTagName(\"style\");\n\n  if (styles.length) {\n    const style = styles[0];\n    updateStyleInnerHTML(style);\n  }\n}\nexport function createTint(style, color, opacity) {\n  const tint = new Tint();\n  tint.color = style.getPropertyValue(color) || undefined;\n  tint.alpha = toNumber(style.getPropertyValue(opacity));\n\n  if (tint.color === \"unset\") {\n    tint.color = undefined;\n  }\n\n  if (isNaN(tint.alpha)) {\n    tint.alpha = undefined;\n  } else {\n    tint.alpha *= 100;\n  }\n\n  return tint.color !== undefined || tint.alpha !== undefined ? tint : undefined;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/core/html.ts"],"names":["Tint","toNumber","updateStyleInnerHTML","getHTMLElement","parent","selector","querySelector","getAllHTMLElements","Array","from","querySelectorAll","getComputedStyle","element","window","getStyleElementRules","styles","getElementsByTagName","length","style","sheet","cssRules","setStyleSheetHTML","root","createTint","color","opacity","tint","getPropertyValue","undefined","alpha","isNaN"],"mappings":"AAAA,SAASA,IAAT,QAAqB,OAArB;AACA,SAASC,QAAT,EAAmBC,oBAAnB,QAA+C,OAA/C;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAA6CC,QAA7C,EAAmF;AACxF,SAAOD,MAAM,CAACE,aAAP,CAAqBD,QAArB,CAAP;AACD;AAED,OAAO,SAASE,kBAAT,CAA4BH,MAA5B,EAAiDC,QAAjD,EAAkF;AACvF,SAAOG,KAAK,CAACC,IAAN,CAAWL,MAAM,CAACM,gBAAP,CAAwBL,QAAxB,CAAX,CAAP;AACD;AAED,OAAO,SAASM,gBAAT,CAA0BP,MAA1B,EAA+CC,QAA/C,EAAiE;AACtE,QAAMO,OAAO,GAAGT,cAAc,CAACC,MAAD,EAASC,QAAT,CAA9B;;AAEA,MAAIO,OAAJ,EAAa;AACX,WAAOC,MAAM,CAACF,gBAAP,CAAwBC,OAAxB,CAAP;AACD;AACF;AAED,OAAO,SAASE,oBAAT,CAA8BV,MAA9B,EAAmD;AACxD,QAAMW,MAAM,GAAGX,MAAM,CAACY,oBAAP,CAA4B,OAA5B,CAAf;;AAEA,MAAID,MAAM,CAACE,MAAX,EAAmB;AAAA;;AACjB,UAAMC,KAAK,GAAGH,MAAM,CAAC,CAAD,CAApB;AAEA,2BAAOG,KAAK,CAACC,KAAb,iDAAO,aAAaC,QAApB;AACD;AACF;AAED,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAA8C;AACnD,QAAMP,MAAM,GAAGO,IAAI,CAACN,oBAAL,CAA0B,OAA1B,CAAf;;AAEA,MAAID,MAAM,CAACE,MAAX,EAAmB;AACjB,UAAMC,KAAK,GAAGH,MAAM,CAAC,CAAD,CAApB;AAEAb,IAAAA,oBAAoB,CAACgB,KAAD,CAApB;AACD;AACF;AAED,OAAO,SAASK,UAAT,CAAoBL,KAApB,EAAgDM,KAAhD,EAA+DC,OAA/D,EAAgF;AACrF,QAAMC,IAAI,GAAG,IAAI1B,IAAJ,EAAb;AACA0B,EAAAA,IAAI,CAACF,KAAL,GAAaN,KAAK,CAACS,gBAAN,CAAuBH,KAAvB,KAAiCI,SAA9C;AACAF,EAAAA,IAAI,CAACG,KAAL,GAAa5B,QAAQ,CAACiB,KAAK,CAACS,gBAAN,CAAuBF,OAAvB,CAAD,CAArB;;AAEA,MAAIC,IAAI,CAACF,KAAL,KAAe,OAAnB,EAA4B;AAC1BE,IAAAA,IAAI,CAACF,KAAL,GAAaI,SAAb;AACD;;AAED,MAAIE,KAAK,CAACJ,IAAI,CAACG,KAAN,CAAT,EAAuB;AACrBH,IAAAA,IAAI,CAACG,KAAL,GAAaD,SAAb;AACD,GAFD,MAEO;AACLF,IAAAA,IAAI,CAACG,KAAL,IAAc,GAAd;AACD;;AAED,SAAOH,IAAI,CAACF,KAAL,KAAeI,SAAf,IAA4BF,IAAI,CAACG,KAAL,KAAeD,SAA3C,GAAuDF,IAAvD,GAA8DE,SAArE;AACD","sourcesContent":["import { Tint } from \"types\";\r\nimport { toNumber, updateStyleInnerHTML } from \"utils\";\r\n\r\nexport function getHTMLElement(parent: HTMLElement, selector: string): HTMLElement | null {\r\n  return parent.querySelector(selector) as HTMLElement;\r\n}\r\n\r\nexport function getAllHTMLElements(parent: HTMLElement, selector: string): HTMLElement[] {\r\n  return Array.from(parent.querySelectorAll(selector));\r\n}\r\n\r\nexport function getComputedStyle(parent: HTMLElement, selector: string) {\r\n  const element = getHTMLElement(parent, selector);\r\n\r\n  if (element) {\r\n    return window.getComputedStyle(element);\r\n  }\r\n}\r\n\r\nexport function getStyleElementRules(parent: HTMLElement) {\r\n  const styles = parent.getElementsByTagName(\"style\");\r\n\r\n  if (styles.length) {\r\n    const style = styles[0] as HTMLStyleElement;\r\n\r\n    return style.sheet?.cssRules;\r\n  }\r\n}\r\n\r\nexport function setStyleSheetHTML(root: HTMLElement) {\r\n  const styles = root.getElementsByTagName(\"style\");\r\n\r\n  if (styles.length) {\r\n    const style = styles[0] as HTMLStyleElement;\r\n\r\n    updateStyleInnerHTML(style);\r\n  }\r\n}\r\n\r\nexport function createTint(style: CSSStyleDeclaration, color: string, opacity: string) {\r\n  const tint = new Tint();\r\n  tint.color = style.getPropertyValue(color) || undefined;\r\n  tint.alpha = toNumber(style.getPropertyValue(opacity));\r\n\r\n  if (tint.color === \"unset\") {\r\n    tint.color = undefined;\r\n  }\r\n\r\n  if (isNaN(tint.alpha)) {\r\n    tint.alpha = undefined;\r\n  } else {\r\n    tint.alpha *= 100;\r\n  }\r\n\r\n  return tint.color !== undefined || tint.alpha !== undefined ? tint : undefined;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}