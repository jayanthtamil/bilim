{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar DraftTreeAdapter = require(\"./DraftTreeAdapter\");\n\nvar DraftTreeInvariants = require(\"./DraftTreeInvariants\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar createCharacterList = require(\"./createCharacterList\");\n\nvar decodeEntityRanges = require(\"./decodeEntityRanges\");\n\nvar decodeInlineStyleRanges = require(\"./decodeInlineStyleRanges\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar List = Immutable.List,\n    Map = Immutable.Map,\n    OrderedMap = Immutable.OrderedMap;\n\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityKeyMap) {\n  var key = block.key,\n      type = block.type,\n      data = block.data,\n      text = block.text,\n      depth = block.depth;\n  var blockNodeConfig = {\n    text: text,\n    depth: depth || 0,\n    type: type || 'unstyled',\n    key: key || generateRandomKey(),\n    data: Map(data),\n    characterList: decodeCharacterList(block, entityKeyMap)\n  };\n  return blockNodeConfig;\n};\n\nvar decodeCharacterList = function decodeCharacterList(block, entityKeyMap) {\n  var text = block.text,\n      rawEntityRanges = block.entityRanges,\n      rawInlineStyleRanges = block.inlineStyleRanges;\n  var entityRanges = rawEntityRanges || [];\n  var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n\n  return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function (range) {\n    return entityKeyMap.hasOwnProperty(range.key);\n  }).map(function (range) {\n    return _objectSpread(_objectSpread({}, range), {}, {\n      key: entityKeyMap[range.key]\n    });\n  })));\n};\n\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n  return _objectSpread(_objectSpread({}, block), {}, {\n    key: block.key || generateRandomKey()\n  });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */\n\n\nvar updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n  var nodesWithParentRef = nodes.map(function (block) {\n    return _objectSpread(_objectSpread({}, block), {}, {\n      parentRef: parentRef\n    });\n  }); // since we pop nodes from the stack we need to insert them in reverse\n\n  return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */\n\n\nvar decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n  return blocks // ensure children have valid keys to enable sibling links\n  .map(addKeyIfMissing).reduce(function (blockMap, block, index) {\n    !Array.isArray(block.children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0; // ensure children have valid keys to enable sibling links\n\n    var children = block.children.map(addKeyIfMissing); // root level nodes\n\n    var contentBlockNode = new ContentBlockNode(_objectSpread(_objectSpread({}, decodeBlockNodeConfig(block, entityMap)), {}, {\n      prevSibling: index === 0 ? null : blocks[index - 1].key,\n      nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n      children: List(children.map(function (child) {\n        return child.key;\n      }))\n    })); // push root node to blockMap\n\n    blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n    var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n\n    while (stack.length > 0) {\n      // we pop from the stack and start processing this node\n      var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n\n      var parentRef = node.parentRef;\n      var siblings = parentRef.getChildKeys();\n\n      var _index = siblings.indexOf(node.key);\n\n      var isValidBlock = Array.isArray(node.children);\n\n      if (!isValidBlock) {\n        !isValidBlock ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n        break;\n      } // ensure children have valid keys to enable sibling links\n\n\n      var _children = node.children.map(addKeyIfMissing);\n\n      var _contentBlockNode = new ContentBlockNode(_objectSpread(_objectSpread({}, decodeBlockNodeConfig(node, entityMap)), {}, {\n        parent: parentRef.getKey(),\n        children: List(_children.map(function (child) {\n          return child.key;\n        })),\n        prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n        nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n      })); // push node to blockMap\n\n\n      blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n      stack = updateNodeStack(stack, _children, _contentBlockNode);\n    }\n\n    return blockMap;\n  }, OrderedMap());\n};\n\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityKeyMap) {\n  return OrderedMap(blocks.map(function (block) {\n    var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityKeyMap));\n    return [contentBlock.getKey(), contentBlock];\n  }));\n};\n\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityKeyMap) {\n  var isTreeRawBlock = rawState.blocks.find(function (block) {\n    return Array.isArray(block.children) && block.children.length > 0;\n  });\n  var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n\n  if (!experimentalTreeDataSupport) {\n    return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityKeyMap);\n  }\n\n  var blockMap = decodeContentBlockNodes(rawBlocks, entityKeyMap); // in dev mode, check that the tree invariants are met\n\n  if (process.env.NODE_ENV !== \"production\") {\n    !DraftTreeInvariants.isValidTree(blockMap) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Should be a valid tree') : invariant(false) : void 0;\n  }\n\n  return blockMap;\n};\n\nvar decodeRawEntityMap = function decodeRawEntityMap(contentStateArg, rawState) {\n  var rawEntityMap = rawState.entityMap;\n  var entityKeyMap = {};\n  var contentState = contentStateArg;\n  Object.keys(rawEntityMap).forEach(function (rawEntityKey) {\n    var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],\n        type = _rawEntityMap$rawEnti.type,\n        mutability = _rawEntityMap$rawEnti.mutability,\n        data = _rawEntityMap$rawEnti.data;\n    contentState = contentState.createEntity(type, mutability, data || {}); // get the key reference to created entity\n\n    entityKeyMap[rawEntityKey] = contentState.getLastCreatedEntityKey();\n  }); // $FlowFixMe[incompatible-return]\n\n  return {\n    entityKeyMap: entityKeyMap,\n    contentState: contentState\n  };\n};\n\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n  !Array.isArray(rawState.blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentState') : invariant(false) : void 0; // decode entities\n\n  var _decodeRawEntityMap = decodeRawEntityMap(ContentState.createFromText(''), rawState),\n      contentState = _decodeRawEntityMap.contentState,\n      entityKeyMap = _decodeRawEntityMap.entityKeyMap; // decode blockMap\n\n\n  var blockMap = decodeRawBlocks(rawState, entityKeyMap); // create initial selection\n\n  var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n  return new ContentState({\n    blockMap: blockMap,\n    entityMap: contentState.getEntityMap(),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n};\n\nmodule.exports = convertFromRawToDraftState;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/node_modules/draft-js/lib/convertFromRawToDraftState.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","ContentBlock","require","ContentBlockNode","ContentState","DraftTreeAdapter","DraftTreeInvariants","SelectionState","createCharacterList","decodeEntityRanges","decodeInlineStyleRanges","generateRandomKey","gkx","Immutable","invariant","experimentalTreeDataSupport","List","Map","OrderedMap","decodeBlockNodeConfig","block","entityKeyMap","type","data","text","depth","blockNodeConfig","characterList","decodeCharacterList","rawEntityRanges","entityRanges","rawInlineStyleRanges","inlineStyleRanges","range","hasOwnProperty","map","addKeyIfMissing","updateNodeStack","stack","nodes","parentRef","nodesWithParentRef","concat","reverse","decodeContentBlockNodes","blocks","entityMap","reduce","blockMap","index","Array","isArray","children","process","env","NODE_ENV","contentBlockNode","prevSibling","nextSibling","child","set","getKey","node","pop","siblings","getChildKeys","_index","indexOf","isValidBlock","_children","_contentBlockNode","parent","get","size","decodeContentBlocks","contentBlock","decodeRawBlocks","rawState","isTreeRawBlock","find","rawBlocks","fromRawStateToRawTreeState","fromRawTreeStateToRawState","isValidTree","decodeRawEntityMap","contentStateArg","rawEntityMap","contentState","rawEntityKey","_rawEntityMap$rawEnti","mutability","createEntity","getLastCreatedEntityKey","convertFromRawToDraftState","_decodeRawEntityMap","createFromText","selectionState","isEmpty","createEmpty","first","getEntityMap","selectionBefore","selectionAfter","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar DraftTreeAdapter = require(\"./DraftTreeAdapter\");\n\nvar DraftTreeInvariants = require(\"./DraftTreeInvariants\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar createCharacterList = require(\"./createCharacterList\");\n\nvar decodeEntityRanges = require(\"./decodeEntityRanges\");\n\nvar decodeInlineStyleRanges = require(\"./decodeInlineStyleRanges\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar List = Immutable.List,\n    Map = Immutable.Map,\n    OrderedMap = Immutable.OrderedMap;\n\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityKeyMap) {\n  var key = block.key,\n      type = block.type,\n      data = block.data,\n      text = block.text,\n      depth = block.depth;\n  var blockNodeConfig = {\n    text: text,\n    depth: depth || 0,\n    type: type || 'unstyled',\n    key: key || generateRandomKey(),\n    data: Map(data),\n    characterList: decodeCharacterList(block, entityKeyMap)\n  };\n  return blockNodeConfig;\n};\n\nvar decodeCharacterList = function decodeCharacterList(block, entityKeyMap) {\n  var text = block.text,\n      rawEntityRanges = block.entityRanges,\n      rawInlineStyleRanges = block.inlineStyleRanges;\n  var entityRanges = rawEntityRanges || [];\n  var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n\n  return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function (range) {\n    return entityKeyMap.hasOwnProperty(range.key);\n  }).map(function (range) {\n    return _objectSpread(_objectSpread({}, range), {}, {\n      key: entityKeyMap[range.key]\n    });\n  })));\n};\n\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n  return _objectSpread(_objectSpread({}, block), {}, {\n    key: block.key || generateRandomKey()\n  });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */\n\n\nvar updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n  var nodesWithParentRef = nodes.map(function (block) {\n    return _objectSpread(_objectSpread({}, block), {}, {\n      parentRef: parentRef\n    });\n  }); // since we pop nodes from the stack we need to insert them in reverse\n\n  return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */\n\n\nvar decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n  return blocks // ensure children have valid keys to enable sibling links\n  .map(addKeyIfMissing).reduce(function (blockMap, block, index) {\n    !Array.isArray(block.children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0; // ensure children have valid keys to enable sibling links\n\n    var children = block.children.map(addKeyIfMissing); // root level nodes\n\n    var contentBlockNode = new ContentBlockNode(_objectSpread(_objectSpread({}, decodeBlockNodeConfig(block, entityMap)), {}, {\n      prevSibling: index === 0 ? null : blocks[index - 1].key,\n      nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n      children: List(children.map(function (child) {\n        return child.key;\n      }))\n    })); // push root node to blockMap\n\n    blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n    var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n\n    while (stack.length > 0) {\n      // we pop from the stack and start processing this node\n      var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n\n      var parentRef = node.parentRef;\n      var siblings = parentRef.getChildKeys();\n\n      var _index = siblings.indexOf(node.key);\n\n      var isValidBlock = Array.isArray(node.children);\n\n      if (!isValidBlock) {\n        !isValidBlock ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n        break;\n      } // ensure children have valid keys to enable sibling links\n\n\n      var _children = node.children.map(addKeyIfMissing);\n\n      var _contentBlockNode = new ContentBlockNode(_objectSpread(_objectSpread({}, decodeBlockNodeConfig(node, entityMap)), {}, {\n        parent: parentRef.getKey(),\n        children: List(_children.map(function (child) {\n          return child.key;\n        })),\n        prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n        nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n      })); // push node to blockMap\n\n\n      blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n      stack = updateNodeStack(stack, _children, _contentBlockNode);\n    }\n\n    return blockMap;\n  }, OrderedMap());\n};\n\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityKeyMap) {\n  return OrderedMap(blocks.map(function (block) {\n    var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityKeyMap));\n    return [contentBlock.getKey(), contentBlock];\n  }));\n};\n\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityKeyMap) {\n  var isTreeRawBlock = rawState.blocks.find(function (block) {\n    return Array.isArray(block.children) && block.children.length > 0;\n  });\n  var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n\n  if (!experimentalTreeDataSupport) {\n    return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityKeyMap);\n  }\n\n  var blockMap = decodeContentBlockNodes(rawBlocks, entityKeyMap); // in dev mode, check that the tree invariants are met\n\n  if (process.env.NODE_ENV !== \"production\") {\n    !DraftTreeInvariants.isValidTree(blockMap) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Should be a valid tree') : invariant(false) : void 0;\n  }\n\n  return blockMap;\n};\n\nvar decodeRawEntityMap = function decodeRawEntityMap(contentStateArg, rawState) {\n  var rawEntityMap = rawState.entityMap;\n  var entityKeyMap = {};\n  var contentState = contentStateArg;\n  Object.keys(rawEntityMap).forEach(function (rawEntityKey) {\n    var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],\n        type = _rawEntityMap$rawEnti.type,\n        mutability = _rawEntityMap$rawEnti.mutability,\n        data = _rawEntityMap$rawEnti.data;\n    contentState = contentState.createEntity(type, mutability, data || {}); // get the key reference to created entity\n\n    entityKeyMap[rawEntityKey] = contentState.getLastCreatedEntityKey();\n  }); // $FlowFixMe[incompatible-return]\n\n  return {\n    entityKeyMap: entityKeyMap,\n    contentState: contentState\n  };\n};\n\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n  !Array.isArray(rawState.blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentState') : invariant(false) : void 0; // decode entities\n\n  var _decodeRawEntityMap = decodeRawEntityMap(ContentState.createFromText(''), rawState),\n      contentState = _decodeRawEntityMap.contentState,\n      entityKeyMap = _decodeRawEntityMap.entityKeyMap; // decode blockMap\n\n\n  var blockMap = decodeRawBlocks(rawState, entityKeyMap); // create initial selection\n\n  var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n  return new ContentState({\n    blockMap: blockMap,\n    entityMap: contentState.getEntityMap(),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n};\n\nmodule.exports = convertFromRawToDraftState;"]},"metadata":{},"sourceType":"script"}