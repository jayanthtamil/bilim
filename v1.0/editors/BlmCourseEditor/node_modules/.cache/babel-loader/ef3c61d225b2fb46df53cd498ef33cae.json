{"ast":null,"code":"import * as actions from \"../types\";\nimport { createAnimationMedia, createMediaFiles, updateAnimationAttchement, updateAnimationMedia } from \"../utils\";\nexport const initState = {\n  files: {\n    uploaded: {},\n    added: [],\n    removed: [],\n    loaded: {}\n  },\n  animations: {},\n  properties: {}\n};\nexport default function mediaReducer(state = initState, action) {\n  const {\n    files,\n    animations\n  } = state;\n\n  switch (action.type) {\n    case actions.UPLOAD_FILE_SUCCESS:\n      {\n        const {\n          id,\n          files: replaceables\n        } = action.meta;\n        const medias = createMediaFiles(action.payload);\n        let loaded = files.loaded;\n\n        if (replaceables) {\n          replaceables.forEach(file => {\n            if (!(file instanceof File)) {\n              if (file.id && loaded[file.id]) {\n                loaded = { ...loaded,\n                  [file.id]: file.content\n                };\n              }\n            }\n          });\n        }\n\n        if (medias) {\n          return { ...state,\n            files: { ...files,\n              uploaded: { ...files.uploaded,\n                [id]: medias\n              },\n              loaded\n            }\n          };\n        }\n\n        return state;\n      }\n\n    case actions.GET_FILE_SUCCESS:\n      {\n        const {\n          id\n        } = action.meta;\n        return { ...state,\n          files: { ...files,\n            loaded: { ...files.loaded,\n              [id]: action.payload\n            }\n          }\n        };\n      }\n\n    case actions.CLEAR_FILE:\n      {\n        const {\n          [action.payload.id]: deleted,\n          ...others\n        } = files.uploaded;\n        return { ...state,\n          files: { ...files,\n            uploaded: { ...others\n            }\n          }\n        };\n      }\n\n    case actions.ADD_FILES:\n      return { ...state,\n        files: { ...files,\n          added: [...files.added, ...action.payload.medias]\n        }\n      };\n\n    case actions.REMOVE_FILES:\n      return { ...state,\n        files: { ...files,\n          removed: [...files.removed, ...action.payload.medias]\n        }\n      };\n\n    case actions.CLEAR_FILES:\n      return { ...state,\n        files: { ...files,\n          added: [],\n          removed: [],\n          loaded: {}\n        }\n      };\n\n    case actions.GET_ANIMATION_SUCCESS:\n      {\n        const {\n          id\n        } = action.meta;\n        const animation = createAnimationMedia(action.payload);\n        return { ...state,\n          animations: { ...animations,\n            [id]: animation\n          }\n        };\n      }\n\n    case actions.UPDATE_ANIMATION_SUCCESS:\n      {\n        const {\n          id,\n          animation\n        } = action.meta;\n        const media = animations[id];\n\n        if (media) {\n          const animation2 = updateAnimationMedia(media, animation);\n\n          if (animation2) {\n            return { ...state,\n              animations: { ...animations,\n                [id]: animation2\n              }\n            };\n          }\n        }\n\n        return state;\n      }\n\n    case actions.REPLACE_ANIMATION_ATTACHMENT_SUCCESS:\n      {\n        const {\n          id,\n          attachment\n        } = action.meta;\n        const media = animations[id];\n\n        if (media) {\n          const animation = updateAnimationAttchement(media, attachment);\n\n          if (animation) {\n            return { ...state,\n              animations: { ...animations,\n                [id]: animation\n              }\n            };\n          }\n        }\n\n        return state;\n      }\n\n    case actions.CLEAR_ANIMATIONS:\n      return { ...state,\n        animations: {}\n      };\n\n    case actions.GET_MEDIA_PROPERTIES_SUCCESS:\n      {\n        const {\n          id\n        } = action.meta;\n        const {\n          wav_json_file\n        } = action.payload[0] || {};\n\n        if (wav_json_file) {\n          return { ...state,\n            properties: { ...state.properties,\n              [id]: {\n                waveform: wav_json_file\n              }\n            }\n          };\n        }\n\n        return state;\n      }\n\n    case actions.CLEAR_MEDIA_PROPERTIES:\n      return { ...state,\n        properties: {}\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/course/file/reducers/index.ts"],"names":["actions","createAnimationMedia","createMediaFiles","updateAnimationAttchement","updateAnimationMedia","initState","files","uploaded","added","removed","loaded","animations","properties","mediaReducer","state","action","type","UPLOAD_FILE_SUCCESS","id","replaceables","meta","medias","payload","forEach","file","File","content","GET_FILE_SUCCESS","CLEAR_FILE","deleted","others","ADD_FILES","REMOVE_FILES","CLEAR_FILES","GET_ANIMATION_SUCCESS","animation","UPDATE_ANIMATION_SUCCESS","media","animation2","REPLACE_ANIMATION_ATTACHMENT_SUCCESS","attachment","CLEAR_ANIMATIONS","GET_MEDIA_PROPERTIES_SUCCESS","wav_json_file","waveform","CLEAR_MEDIA_PROPERTIES"],"mappings":"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","sourcesContent":["import * as actions from \"../types\";\r\nimport {\r\n  createAnimationMedia,\r\n  createMediaFiles,\r\n  updateAnimationAttchement,\r\n  updateAnimationMedia,\r\n} from \"../utils\";\r\n\r\nexport const initState: actions.FileState = {\r\n  files: {\r\n    uploaded: {},\r\n    added: [],\r\n    removed: [],\r\n    loaded: {},\r\n  },\r\n  animations: {},\r\n  properties: {},\r\n};\r\n\r\nexport default function mediaReducer(\r\n  state = initState,\r\n  action: actions.FileActions\r\n): actions.FileState {\r\n  const { files, animations } = state;\r\n\r\n  switch (action.type) {\r\n    case actions.UPLOAD_FILE_SUCCESS: {\r\n      const { id, files: replaceables } = action.meta;\r\n      const medias = createMediaFiles(action.payload);\r\n      let loaded = files.loaded;\r\n\r\n      if (replaceables) {\r\n        (replaceables as (File | actions.FileContent)[]).forEach((file) => {\r\n          if (!(file instanceof File)) {\r\n            if (file.id && loaded[file.id]) {\r\n              loaded = { ...loaded, [file.id]: file.content };\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (medias) {\r\n        return {\r\n          ...state,\r\n          files: {\r\n            ...files,\r\n            uploaded: { ...files.uploaded, [id]: medias },\r\n            loaded,\r\n          },\r\n        };\r\n      }\r\n\r\n      return state;\r\n    }\r\n    case actions.GET_FILE_SUCCESS: {\r\n      const { id } = action.meta;\r\n\r\n      return {\r\n        ...state,\r\n        files: {\r\n          ...files,\r\n          loaded: {\r\n            ...files.loaded,\r\n            [id]: action.payload,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    case actions.CLEAR_FILE: {\r\n      const { [action.payload.id]: deleted, ...others } = files.uploaded;\r\n\r\n      return {\r\n        ...state,\r\n        files: {\r\n          ...files,\r\n          uploaded: { ...others },\r\n        },\r\n      };\r\n    }\r\n    case actions.ADD_FILES:\r\n      return {\r\n        ...state,\r\n        files: {\r\n          ...files,\r\n          added: [...files.added, ...action.payload.medias],\r\n        },\r\n      };\r\n    case actions.REMOVE_FILES:\r\n      return {\r\n        ...state,\r\n        files: {\r\n          ...files,\r\n          removed: [...files.removed, ...action.payload.medias],\r\n        },\r\n      };\r\n    case actions.CLEAR_FILES:\r\n      return {\r\n        ...state,\r\n        files: {\r\n          ...files,\r\n          added: [],\r\n          removed: [],\r\n          loaded: {},\r\n        },\r\n      };\r\n\r\n    case actions.GET_ANIMATION_SUCCESS: {\r\n      const { id } = action.meta;\r\n      const animation = createAnimationMedia(action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        animations: {\r\n          ...animations,\r\n          [id]: animation,\r\n        },\r\n      };\r\n    }\r\n    case actions.UPDATE_ANIMATION_SUCCESS: {\r\n      const { id, animation } = action.meta;\r\n      const media = animations[id];\r\n\r\n      if (media) {\r\n        const animation2 = updateAnimationMedia(media, animation);\r\n\r\n        if (animation2) {\r\n          return {\r\n            ...state,\r\n            animations: {\r\n              ...animations,\r\n              [id]: animation2,\r\n            },\r\n          };\r\n        }\r\n      }\r\n\r\n      return state;\r\n    }\r\n    case actions.REPLACE_ANIMATION_ATTACHMENT_SUCCESS: {\r\n      const { id, attachment } = action.meta;\r\n      const media = animations[id];\r\n\r\n      if (media) {\r\n        const animation = updateAnimationAttchement(media, attachment);\r\n\r\n        if (animation) {\r\n          return {\r\n            ...state,\r\n            animations: {\r\n              ...animations,\r\n              [id]: animation,\r\n            },\r\n          };\r\n        }\r\n      }\r\n\r\n      return state;\r\n    }\r\n    case actions.CLEAR_ANIMATIONS:\r\n      return {\r\n        ...state,\r\n        animations: {},\r\n      };\r\n    case actions.GET_MEDIA_PROPERTIES_SUCCESS: {\r\n      const { id } = action.meta;\r\n      const { wav_json_file } = action.payload[0] || {};\r\n\r\n      if (wav_json_file) {\r\n        return {\r\n          ...state,\r\n          properties: { ...state.properties, [id]: { waveform: wav_json_file } },\r\n        };\r\n      }\r\n\r\n      return state;\r\n    }\r\n    case actions.CLEAR_MEDIA_PROPERTIES:\r\n      return { ...state, properties: {} };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}