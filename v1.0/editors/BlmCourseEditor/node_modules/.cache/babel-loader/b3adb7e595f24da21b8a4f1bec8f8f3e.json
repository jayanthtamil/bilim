{"ast":null,"code":"import { ElementType } from \"editor-constants\";\nimport { getTemplateHTMLJSON, setTemplateActionHTML } from \"template-builders\";\nexport const changeKeyMap = {\n  loadAlways: {\n    obj1: \"load\",\n    obj2: \"navigation\",\n    key: \"always\"\n  },\n  loadNext: {\n    obj1: \"load\",\n    obj2: \"navigation\",\n    key: \"next\"\n  },\n  loadPrevious: {\n    obj1: \"load\",\n    obj2: \"navigation\",\n    key: \"previous\"\n  },\n  loadHome: {\n    obj1: \"load\",\n    obj2: \"navigation\",\n    key: \"home\"\n  },\n  loadSC: {\n    obj1: \"load\",\n    obj2: \"simpleContent\"\n  },\n  loadSCAlways: {\n    obj1: \"load\",\n    obj2: \"simpleContent\",\n    key: \"always\"\n  },\n  loadBG: {\n    obj1: \"load\",\n    obj2: \"background\"\n  },\n  loadBGAlways: {\n    obj1: \"load\",\n    obj2: \"background\",\n    key: \"always\"\n  },\n  loadSound: {\n    obj1: \"load\",\n    obj2: \"sound\"\n  },\n  loadSoundAlways: {\n    obj1: \"load\",\n    obj2: \"sound\",\n    key: \"always\"\n  },\n  loadBackgroundSound: {\n    obj1: \"load\",\n    obj2: \"backgroundSound\"\n  },\n  loadBackgroundSoundAlways: {\n    obj1: \"load\",\n    obj2: \"backgroundSound\",\n    key: \"always\"\n  },\n  completeNext: {\n    obj1: \"complete\",\n    obj2: \"navigation\",\n    key: \"next\"\n  },\n  completePrevious: {\n    obj1: \"complete\",\n    obj2: \"navigation\",\n    key: \"previous\"\n  },\n  completeHome: {\n    obj1: \"complete\",\n    obj2: \"navigation\",\n    key: \"home\"\n  },\n  completeSC: {\n    obj1: \"complete\",\n    obj2: \"simpleContent\"\n  },\n  completeBG: {\n    obj1: \"complete\",\n    obj2: \"background\"\n  },\n  completeSound: {\n    obj1: \"complete\",\n    obj2: \"sound\"\n  }\n};\nexport const createTemplate = (template, data, view) => {\n  const newTemplate = { ...template\n  };\n  const [html, options] = setTemplateActionHTML(newTemplate, data, view);\n  newTemplate.html = html;\n  newTemplate.options = options;\n  newTemplate.htmlJSON = getTemplateHTMLJSON(newTemplate);\n  return newTemplate;\n};\nexport const createTemplateView = element => {\n  var _element$parent, _element$root, _element$root2;\n\n  const isScreen = element.type === ElementType.Screen;\n  const isPartpage = ((_element$parent = element.parent) === null || _element$parent === void 0 ? void 0 : _element$parent.type) === ElementType.Page;\n  const isStarting = ((_element$root = element.root) === null || _element$root === void 0 ? void 0 : _element$root.type) === ElementType.Starting;\n  const isStructure = ((_element$root2 = element.root) === null || _element$root2 === void 0 ? void 0 : _element$root2.type) === ElementType.Structure;\n  const isPrimary = isStructure && (isScreen || isPartpage);\n  const isSecondary = isStarting && isScreen;\n  return {\n    dashboardType: isPrimary ? \"controlled\" : \"standard\",\n    load: {\n      always: isPrimary || isSecondary ? {\n        default: isSecondary\n      } : undefined,\n      navigation: isScreen && (isStarting || isStructure) ? {\n        next: true,\n        previous: true,\n        home: isStructure\n      } : undefined,\n      simpleContent: isPrimary || isSecondary,\n      background: isStructure && isPartpage,\n      sound: true,\n      backgroundSound: isStructure\n    },\n    complete: isPrimary ? {\n      navigation: isScreen ? {\n        next: true,\n        previous: true,\n        home: true\n      } : undefined,\n      simpleContent: true,\n      background: true,\n      sound: true\n    } : undefined\n  };\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/template-editors/containers/template-action/utils.ts"],"names":["ElementType","getTemplateHTMLJSON","setTemplateActionHTML","changeKeyMap","loadAlways","obj1","obj2","key","loadNext","loadPrevious","loadHome","loadSC","loadSCAlways","loadBG","loadBGAlways","loadSound","loadSoundAlways","loadBackgroundSound","loadBackgroundSoundAlways","completeNext","completePrevious","completeHome","completeSC","completeBG","completeSound","createTemplate","template","data","view","newTemplate","html","options","htmlJSON","createTemplateView","element","isScreen","type","Screen","isPartpage","parent","Page","isStarting","root","Starting","isStructure","Structure","isPrimary","isSecondary","dashboardType","load","always","default","undefined","navigation","next","previous","home","simpleContent","background","sound","backgroundSound","complete"],"mappings":"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","sourcesContent":["import {\r\n  CourseElementTemplate,\r\n  ContentTemplateAction,\r\n  KeysOfType,\r\n  TemplateAction,\r\n  TempalteActionView,\r\n  CourseElement,\r\n} from \"types\";\r\nimport { ElementType } from \"editor-constants\";\r\nimport { getTemplateHTMLJSON, setTemplateActionHTML } from \"template-builders\";\r\n\r\ntype ActionKeys1 = KeysOfType<ContentTemplateAction, object>;\r\ntype ActionKeys2 = KeysOfType<TemplateAction, object>;\r\n\r\nexport interface ChangeKeyMap {\r\n  [key: string]: { obj1: ActionKeys1; obj2: ActionKeys2; key?: string };\r\n}\r\n\r\nexport const changeKeyMap: ChangeKeyMap = {\r\n  loadAlways: { obj1: \"load\", obj2: \"navigation\", key: \"always\" },\r\n  loadNext: { obj1: \"load\", obj2: \"navigation\", key: \"next\" },\r\n  loadPrevious: { obj1: \"load\", obj2: \"navigation\", key: \"previous\" },\r\n  loadHome: { obj1: \"load\", obj2: \"navigation\", key: \"home\" },\r\n  loadSC: { obj1: \"load\", obj2: \"simpleContent\" },\r\n  loadSCAlways: { obj1: \"load\", obj2: \"simpleContent\", key: \"always\" },\r\n  loadBG: { obj1: \"load\", obj2: \"background\" },\r\n  loadBGAlways: { obj1: \"load\", obj2: \"background\", key: \"always\" },\r\n  loadSound: { obj1: \"load\", obj2: \"sound\" },\r\n  loadSoundAlways: { obj1: \"load\", obj2: \"sound\", key: \"always\" },\r\n  loadBackgroundSound: { obj1: \"load\", obj2: \"backgroundSound\" },\r\n  loadBackgroundSoundAlways: { obj1: \"load\", obj2: \"backgroundSound\", key: \"always\" },\r\n  completeNext: { obj1: \"complete\", obj2: \"navigation\", key: \"next\" },\r\n  completePrevious: { obj1: \"complete\", obj2: \"navigation\", key: \"previous\" },\r\n  completeHome: { obj1: \"complete\", obj2: \"navigation\", key: \"home\" },\r\n  completeSC: { obj1: \"complete\", obj2: \"simpleContent\" },\r\n  completeBG: { obj1: \"complete\", obj2: \"background\" },\r\n  completeSound: { obj1: \"complete\", obj2: \"sound\" },\r\n};\r\n\r\nexport const createTemplate = (\r\n  template: CourseElementTemplate,\r\n  data: ContentTemplateAction,\r\n  view: TempalteActionView\r\n) => {\r\n  const newTemplate: CourseElementTemplate = {\r\n    ...template,\r\n  };\r\n  const [html, options] = setTemplateActionHTML(newTemplate, data, view);\r\n\r\n  newTemplate.html = html;\r\n  newTemplate.options = options;\r\n  newTemplate.htmlJSON = getTemplateHTMLJSON(newTemplate);\r\n\r\n  return newTemplate;\r\n};\r\n\r\nexport const createTemplateView = (element: CourseElement): TempalteActionView => {\r\n  const isScreen = element.type === ElementType.Screen;\r\n  const isPartpage = element.parent?.type === ElementType.Page;\r\n  const isStarting = element.root?.type === ElementType.Starting;\r\n  const isStructure = element.root?.type === ElementType.Structure;\r\n  const isPrimary = isStructure && (isScreen || isPartpage);\r\n  const isSecondary = isStarting && isScreen;\r\n\r\n  return {\r\n    dashboardType: isPrimary ? \"controlled\" : \"standard\",\r\n    load: {\r\n      always:\r\n        isPrimary || isSecondary\r\n          ? {\r\n              default: isSecondary,\r\n            }\r\n          : undefined,\r\n      navigation:\r\n        isScreen && (isStarting || isStructure)\r\n          ? { next: true, previous: true, home: isStructure }\r\n          : undefined,\r\n      simpleContent: isPrimary || isSecondary,\r\n      background: isStructure && isPartpage,\r\n      sound: true,\r\n      backgroundSound: isStructure\r\n    },\r\n    complete: isPrimary\r\n      ? {\r\n          navigation: isScreen ? { next: true, previous: true, home: true } : undefined,\r\n          simpleContent: true,\r\n          background: true,\r\n          sound: true,\r\n        }\r\n      : undefined,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}