{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\repository\\\\text-card\\\\BlmTextCard.tsx\";\nimport React, { useMemo } from \"react\";\nimport { camelToKebab, toNumber } from \"utils\";\nimport { BlmHTMLParser } from \"shared\";\nimport { useTextCardStyle } from \"./styles\";\nconst cssProperties = [\"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"textDecoration\", \"textTransform\"];\n\nfunction BlmTextCard(props) {\n  const {\n    data: {\n      value,\n      frameStyle\n    }\n  } = props;\n  const classes = useTextCardStyle();\n  const style = useMemo(() => {\n    if (frameStyle) {\n      const styles = {};\n\n      for (const prop of cssProperties) {\n        let val = frameStyle.getPropertyValue(camelToKebab(prop));\n\n        if (prop === \"fontSize\" && toNumber(val) > 20) {\n          val = \"20px\";\n        }\n\n        styles[prop] = val;\n      }\n\n      return styles;\n    }\n  }, [frameStyle]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    className: classes.textWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, value && /*#__PURE__*/React.createElement(BlmHTMLParser, {\n    html: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  })));\n}\n\nexport default BlmTextCard;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/repository/text-card/BlmTextCard.tsx"],"names":["React","useMemo","camelToKebab","toNumber","BlmHTMLParser","useTextCardStyle","cssProperties","BlmTextCard","props","data","value","frameStyle","classes","style","styles","prop","val","getPropertyValue","root","textWrapper"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAGA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,OAAvC;AACA,SAASC,aAAT,QAA8B,QAA9B;AACA,SAASC,gBAAT,QAAiC,UAAjC;AAEA,MAAMC,aAAa,GAAG,CACpB,YADoB,EAEpB,UAFoB,EAGpB,WAHoB,EAIpB,YAJoB,EAKpB,gBALoB,EAMpB,eANoB,CAAtB;;AAaA,SAASC,WAAT,CAAqBC,KAArB,EAAuC;AACrC,QAAM;AACJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AADF,MAEFH,KAFJ;AAGA,QAAMI,OAAO,GAAGP,gBAAgB,EAAhC;AAEA,QAAMQ,KAAK,GAAGZ,OAAO,CAAC,MAAM;AAC1B,QAAIU,UAAJ,EAAgB;AACd,YAAMG,MAAoB,GAAG,EAA7B;;AAEA,WAAK,MAAMC,IAAX,IAAmBT,aAAnB,EAAkC;AAChC,YAAIU,GAAG,GAAGL,UAAU,CAACM,gBAAX,CAA4Bf,YAAY,CAACa,IAAD,CAAxC,CAAV;;AAEA,YAAIA,IAAI,KAAK,UAAT,IAAuBZ,QAAQ,CAACa,GAAD,CAAR,GAAgB,EAA3C,EAA+C;AAC7CA,UAAAA,GAAG,GAAG,MAAN;AACD;;AAEDF,QAAAA,MAAM,CAACC,IAAD,CAAN,GAAeC,GAAf;AACD;;AAED,aAAOF,MAAP;AACD;AACF,GAhBoB,EAgBlB,CAACH,UAAD,CAhBkB,CAArB;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAEC,OAAO,CAACM,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAEL,KAAZ;AAAmB,IAAA,SAAS,EAAED,OAAO,CAACO,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,iBAAI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,CADF,CADF;AAOD;;AAED,eAAeH,WAAf","sourcesContent":["import React, { useMemo } from \"react\";\r\n\r\nimport { TextComponent, SimpleObject } from \"types\";\r\nimport { camelToKebab, toNumber } from \"utils\";\r\nimport { BlmHTMLParser } from \"shared\";\r\nimport { useTextCardStyle } from \"./styles\";\r\n\r\nconst cssProperties = [\r\n  \"fontFamily\",\r\n  \"fontSize\",\r\n  \"fontStyle\",\r\n  \"fontWeight\",\r\n  \"textDecoration\",\r\n  \"textTransform\",\r\n];\r\n\r\nexport interface CompProps {\r\n  data: TextComponent;\r\n}\r\n\r\nfunction BlmTextCard(props: CompProps) {\r\n  const {\r\n    data: { value, frameStyle },\r\n  } = props;\r\n  const classes = useTextCardStyle();\r\n\r\n  const style = useMemo(() => {\r\n    if (frameStyle) {\r\n      const styles: SimpleObject = {};\r\n\r\n      for (const prop of cssProperties) {\r\n        let val = frameStyle.getPropertyValue(camelToKebab(prop));\r\n\r\n        if (prop === \"fontSize\" && toNumber(val) > 20) {\r\n          val = \"20px\";\r\n        }\r\n\r\n        styles[prop] = val;\r\n      }\r\n\r\n      return styles;\r\n    }\r\n  }, [frameStyle]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={style} className={classes.textWrapper}>\r\n        {value && <BlmHTMLParser html={value} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmTextCard;\r\n"]},"metadata":{},"sourceType":"module"}