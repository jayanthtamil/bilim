{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DraftStringKey = require(\"./DraftStringKey\");\n\nvar encodeEntityRanges = require(\"./encodeEntityRanges\");\n\nvar encodeInlineStyleRanges = require(\"./encodeInlineStyleRanges\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n  return {\n    key: block.getKey(),\n    text: block.getText(),\n    type: block.getType(),\n    depth: block.getDepth(),\n    inlineStyleRanges: encodeInlineStyleRanges(block),\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\n    data: block.getData().toObject()\n  };\n};\n\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n  if (block instanceof ContentBlock) {\n    rawBlocks.push(createRawBlock(block, entityMap));\n    return;\n  }\n\n  !(block instanceof ContentBlockNode) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'block is not a BlockNode') : invariant(false) : void 0;\n  var parentKey = block.getParentKey();\n\n  var rawBlock = blockCacheRef[block.getKey()] = _objectSpread(_objectSpread({}, createRawBlock(block, entityMap)), {}, {\n    children: []\n  });\n\n  if (parentKey) {\n    blockCacheRef[parentKey].children.push(rawBlock);\n    return;\n  }\n\n  rawBlocks.push(rawBlock);\n};\n\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n  var entityMap = rawState.entityMap;\n  var rawBlocks = [];\n  var blockCacheRef = {};\n  var entityCacheRef = {};\n  var entityStorageKey = 0;\n  contentState.getBlockMap().forEach(function (block) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      var entityKey = block.getEntityAt(start); // Stringify to maintain order of otherwise numeric keys.\n\n      var stringifiedEntityKey = DraftStringKey.stringify(entityKey); // This makes this function resilient to two entities\n      // erroneously having the same key\n\n      if (entityCacheRef[stringifiedEntityKey]) {\n        return;\n      }\n\n      entityCacheRef[stringifiedEntityKey] = entityKey; // we need the `any` casting here since this is a temporary state\n      // where we will later on flip the entity map and populate it with\n      // real entity, at this stage we just need to map back the entity\n      // key used by the BlockNode\n\n      entityMap[stringifiedEntityKey] = \"\".concat(entityStorageKey);\n      entityStorageKey++;\n    });\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n  });\n  return {\n    blocks: rawBlocks,\n    entityMap: entityMap\n  };\n}; // Flip storage map so that our storage keys map to global\n// DraftEntity keys.\n\n\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n  var blocks = rawState.blocks,\n      entityMap = rawState.entityMap;\n  var rawEntityMap = {};\n  Object.keys(entityMap).forEach(function (key, index) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    rawEntityMap[index] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n  return {\n    blocks: blocks,\n    // $FlowFixMe[incompatible-exact]\n    // $FlowFixMe[incompatible-return]\n    entityMap: rawEntityMap\n  };\n};\n\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n  var rawDraftContentState = {\n    entityMap: {},\n    blocks: []\n  }; // add blocks\n  // $FlowFixMe[prop-missing]\n\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState); // add entities\n  // $FlowFixMe[prop-missing]\n\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n  return rawDraftContentState;\n};\n\nmodule.exports = convertFromDraftStateToRaw;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/node_modules/draft-js/lib/convertFromDraftStateToRaw.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","ContentBlock","require","ContentBlockNode","DraftStringKey","encodeEntityRanges","encodeInlineStyleRanges","invariant","createRawBlock","block","entityStorageMap","getKey","text","getText","type","getType","depth","getDepth","inlineStyleRanges","entityRanges","data","getData","toObject","insertRawBlock","entityMap","rawBlocks","blockCacheRef","process","env","NODE_ENV","parentKey","getParentKey","rawBlock","children","encodeRawBlocks","contentState","rawState","entityCacheRef","entityStorageKey","getBlockMap","findEntityRanges","character","getEntity","start","entityKey","getEntityAt","stringifiedEntityKey","stringify","concat","blocks","encodeRawEntityMap","rawEntityMap","index","entity","unstringify","mutability","getMutability","convertFromDraftStateToRaw","rawDraftContentState","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIG,MAAM,CAACC,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;AAAoDC,IAAAA,cAAc,KAAKI,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAf,CAAd,EAAkIP,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB,CAAlI;AAAmK;;AAAC,SAAOH,IAAP;AAAc;;AAErV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAG,QAAQF,SAAS,CAACD,CAAD,CAAjB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;AAAuDA,IAAAA,CAAC,GAAG,CAAJ,GAAQf,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,CAAC,CAAlB,CAAP,CAA4BC,OAA5B,CAAoC,UAAUC,GAAV,EAAe;AAAEC,MAAAA,eAAe,CAACP,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,KAAjG,CAAR,GAA6GhB,MAAM,CAACkB,yBAAP,GAAmClB,MAAM,CAACmB,gBAAP,CAAwBT,MAAxB,EAAgCV,MAAM,CAACkB,yBAAP,CAAiCJ,MAAjC,CAAhC,CAAnC,GAA+GlB,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEhB,MAAAA,MAAM,CAACoB,cAAP,CAAsBV,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,KAApI,CAA5N;AAAoW;;AAAC,SAAON,MAAP;AAAgB;;AAE1f,SAASO,eAAT,CAAyBI,GAAzB,EAA8BL,GAA9B,EAAmCM,KAAnC,EAA0C;AAAE,MAAIN,GAAG,IAAIK,GAAX,EAAgB;AAAErB,IAAAA,MAAM,CAACoB,cAAP,CAAsBC,GAAtB,EAA2BL,GAA3B,EAAgC;AAAEM,MAAAA,KAAK,EAAEA,KAAT;AAAgBhB,MAAAA,UAAU,EAAE,IAA5B;AAAkCiB,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEH,IAAAA,GAAG,CAACL,GAAD,CAAH,GAAWM,KAAX;AAAmB;;AAAC,SAAOD,GAAP;AAAa;;AAEjN,IAAII,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AAEA,IAAIE,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIG,kBAAkB,GAAGH,OAAO,CAAC,sBAAD,CAAhC;;AAEA,IAAII,uBAAuB,GAAGJ,OAAO,CAAC,2BAAD,CAArC;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIM,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,gBAA/B,EAAiD;AACpE,SAAO;AACLlB,IAAAA,GAAG,EAAEiB,KAAK,CAACE,MAAN,EADA;AAELC,IAAAA,IAAI,EAAEH,KAAK,CAACI,OAAN,EAFD;AAGLC,IAAAA,IAAI,EAAEL,KAAK,CAACM,OAAN,EAHD;AAILC,IAAAA,KAAK,EAAEP,KAAK,CAACQ,QAAN,EAJF;AAKLC,IAAAA,iBAAiB,EAAEZ,uBAAuB,CAACG,KAAD,CALrC;AAMLU,IAAAA,YAAY,EAAEd,kBAAkB,CAACI,KAAD,EAAQC,gBAAR,CAN3B;AAOLU,IAAAA,IAAI,EAAEX,KAAK,CAACY,OAAN,GAAgBC,QAAhB;AAPD,GAAP;AASD,CAVD;;AAYA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBd,KAAxB,EAA+Be,SAA/B,EAA0CC,SAA1C,EAAqDC,aAArD,EAAoE;AACvF,MAAIjB,KAAK,YAAYR,YAArB,EAAmC;AACjCwB,IAAAA,SAAS,CAAC1C,IAAV,CAAeyB,cAAc,CAACC,KAAD,EAAQe,SAAR,CAA7B;AACA;AACD;;AAED,IAAEf,KAAK,YAAYN,gBAAnB,IAAuCwB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCtB,SAAS,CAAC,KAAD,EAAQ,0BAAR,CAAjD,GAAuFA,SAAS,CAAC,KAAD,CAAvI,GAAiJ,KAAK,CAAtJ;AACA,MAAIuB,SAAS,GAAGrB,KAAK,CAACsB,YAAN,EAAhB;;AAEA,MAAIC,QAAQ,GAAGN,aAAa,CAACjB,KAAK,CAACE,MAAN,EAAD,CAAb,GAAgC1B,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKuB,cAAc,CAACC,KAAD,EAAQe,SAAR,CAAnB,CAAd,EAAsD,EAAtD,EAA0D;AACpHS,IAAAA,QAAQ,EAAE;AAD0G,GAA1D,CAA5D;;AAIA,MAAIH,SAAJ,EAAe;AACbJ,IAAAA,aAAa,CAACI,SAAD,CAAb,CAAyBG,QAAzB,CAAkClD,IAAlC,CAAuCiD,QAAvC;AACA;AACD;;AAEDP,EAAAA,SAAS,CAAC1C,IAAV,CAAeiD,QAAf;AACD,CAnBD;;AAqBA,IAAIE,eAAe,GAAG,SAASA,eAAT,CAAyBC,YAAzB,EAAuCC,QAAvC,EAAiD;AACrE,MAAIZ,SAAS,GAAGY,QAAQ,CAACZ,SAAzB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIW,cAAc,GAAG,EAArB;AACA,MAAIC,gBAAgB,GAAG,CAAvB;AACAH,EAAAA,YAAY,CAACI,WAAb,GAA2BhD,OAA3B,CAAmC,UAAUkB,KAAV,EAAiB;AAClDA,IAAAA,KAAK,CAAC+B,gBAAN,CAAuB,UAAUC,SAAV,EAAqB;AAC1C,aAAOA,SAAS,CAACC,SAAV,OAA0B,IAAjC;AACD,KAFD,EAEG,UAAUC,KAAV,EAAiB;AAClB,UAAIC,SAAS,GAAGnC,KAAK,CAACoC,WAAN,CAAkBF,KAAlB,CAAhB,CADkB,CACwB;;AAE1C,UAAIG,oBAAoB,GAAG1C,cAAc,CAAC2C,SAAf,CAAyBH,SAAzB,CAA3B,CAHkB,CAG8C;AAChE;;AAEA,UAAIP,cAAc,CAACS,oBAAD,CAAlB,EAA0C;AACxC;AACD;;AAEDT,MAAAA,cAAc,CAACS,oBAAD,CAAd,GAAuCF,SAAvC,CAVkB,CAUgC;AAClD;AACA;AACA;;AAEApB,MAAAA,SAAS,CAACsB,oBAAD,CAAT,GAAkC,GAAGE,MAAH,CAAUV,gBAAV,CAAlC;AACAA,MAAAA,gBAAgB;AACjB,KAnBD;AAoBAf,IAAAA,cAAc,CAACd,KAAD,EAAQe,SAAR,EAAmBC,SAAnB,EAA8BC,aAA9B,CAAd;AACD,GAtBD;AAuBA,SAAO;AACLuB,IAAAA,MAAM,EAAExB,SADH;AAELD,IAAAA,SAAS,EAAEA;AAFN,GAAP;AAID,CAjCD,C,CAiCG;AACH;;;AAGA,IAAI0B,kBAAkB,GAAG,SAASA,kBAAT,CAA4Bf,YAA5B,EAA0CC,QAA1C,EAAoD;AAC3E,MAAIa,MAAM,GAAGb,QAAQ,CAACa,MAAtB;AAAA,MACIzB,SAAS,GAAGY,QAAQ,CAACZ,SADzB;AAEA,MAAI2B,YAAY,GAAG,EAAnB;AACA3E,EAAAA,MAAM,CAACD,IAAP,CAAYiD,SAAZ,EAAuBjC,OAAvB,CAA+B,UAAUC,GAAV,EAAe4D,KAAf,EAAsB;AACnD,QAAIC,MAAM,GAAGlB,YAAY,CAACO,SAAb,CAAuBtC,cAAc,CAACkD,WAAf,CAA2B9D,GAA3B,CAAvB,CAAb;AACA2D,IAAAA,YAAY,CAACC,KAAD,CAAZ,GAAsB;AACpBtC,MAAAA,IAAI,EAAEuC,MAAM,CAACtC,OAAP,EADc;AAEpBwC,MAAAA,UAAU,EAAEF,MAAM,CAACG,aAAP,EAFQ;AAGpBpC,MAAAA,IAAI,EAAEiC,MAAM,CAAChC,OAAP;AAHc,KAAtB;AAKD,GAPD;AAQA,SAAO;AACL4B,IAAAA,MAAM,EAAEA,MADH;AAEL;AACA;AACAzB,IAAAA,SAAS,EAAE2B;AAJN,GAAP;AAMD,CAlBD;;AAoBA,IAAIM,0BAA0B,GAAG,SAASA,0BAAT,CAAoCtB,YAApC,EAAkD;AACjF,MAAIuB,oBAAoB,GAAG;AACzBlC,IAAAA,SAAS,EAAE,EADc;AAEzByB,IAAAA,MAAM,EAAE;AAFiB,GAA3B,CADiF,CAI9E;AACH;;AAEAS,EAAAA,oBAAoB,GAAGxB,eAAe,CAACC,YAAD,EAAeuB,oBAAf,CAAtC,CAPiF,CAOL;AAC5E;;AAEAA,EAAAA,oBAAoB,GAAGR,kBAAkB,CAACf,YAAD,EAAeuB,oBAAf,CAAzC;AACA,SAAOA,oBAAP;AACD,CAZD;;AAcAC,MAAM,CAACC,OAAP,GAAiBH,0BAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DraftStringKey = require(\"./DraftStringKey\");\n\nvar encodeEntityRanges = require(\"./encodeEntityRanges\");\n\nvar encodeInlineStyleRanges = require(\"./encodeInlineStyleRanges\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n  return {\n    key: block.getKey(),\n    text: block.getText(),\n    type: block.getType(),\n    depth: block.getDepth(),\n    inlineStyleRanges: encodeInlineStyleRanges(block),\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\n    data: block.getData().toObject()\n  };\n};\n\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n  if (block instanceof ContentBlock) {\n    rawBlocks.push(createRawBlock(block, entityMap));\n    return;\n  }\n\n  !(block instanceof ContentBlockNode) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'block is not a BlockNode') : invariant(false) : void 0;\n  var parentKey = block.getParentKey();\n\n  var rawBlock = blockCacheRef[block.getKey()] = _objectSpread(_objectSpread({}, createRawBlock(block, entityMap)), {}, {\n    children: []\n  });\n\n  if (parentKey) {\n    blockCacheRef[parentKey].children.push(rawBlock);\n    return;\n  }\n\n  rawBlocks.push(rawBlock);\n};\n\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n  var entityMap = rawState.entityMap;\n  var rawBlocks = [];\n  var blockCacheRef = {};\n  var entityCacheRef = {};\n  var entityStorageKey = 0;\n  contentState.getBlockMap().forEach(function (block) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      var entityKey = block.getEntityAt(start); // Stringify to maintain order of otherwise numeric keys.\n\n      var stringifiedEntityKey = DraftStringKey.stringify(entityKey); // This makes this function resilient to two entities\n      // erroneously having the same key\n\n      if (entityCacheRef[stringifiedEntityKey]) {\n        return;\n      }\n\n      entityCacheRef[stringifiedEntityKey] = entityKey; // we need the `any` casting here since this is a temporary state\n      // where we will later on flip the entity map and populate it with\n      // real entity, at this stage we just need to map back the entity\n      // key used by the BlockNode\n\n      entityMap[stringifiedEntityKey] = \"\".concat(entityStorageKey);\n      entityStorageKey++;\n    });\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n  });\n  return {\n    blocks: rawBlocks,\n    entityMap: entityMap\n  };\n}; // Flip storage map so that our storage keys map to global\n// DraftEntity keys.\n\n\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n  var blocks = rawState.blocks,\n      entityMap = rawState.entityMap;\n  var rawEntityMap = {};\n  Object.keys(entityMap).forEach(function (key, index) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    rawEntityMap[index] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n  return {\n    blocks: blocks,\n    // $FlowFixMe[incompatible-exact]\n    // $FlowFixMe[incompatible-return]\n    entityMap: rawEntityMap\n  };\n};\n\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n  var rawDraftContentState = {\n    entityMap: {},\n    blocks: []\n  }; // add blocks\n  // $FlowFixMe[prop-missing]\n\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState); // add entities\n  // $FlowFixMe[prop-missing]\n\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n  return rawDraftContentState;\n};\n\nmodule.exports = convertFromDraftStateToRaw;"]},"metadata":{},"sourceType":"script"}