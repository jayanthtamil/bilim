{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar DataTransfer = require(\"fbjs/lib/DataTransfer\");\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar DraftPasteProcessor = require(\"./DraftPasteProcessor\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar RichTextEditorUtil = require(\"./RichTextEditorUtil\");\n\nvar getEntityKeyForSelection = require(\"./getEntityKeyForSelection\");\n\nvar getTextContentFromFiles = require(\"./getTextContentFromFiles\");\n\nvar isEventHandled = require(\"./isEventHandled\");\n\nvar splitTextIntoTextBlocks = require(\"./splitTextIntoTextBlocks\");\n/**\n * Paste content.\n */\n\n\nfunction editOnPaste(editor, e) {\n  e.preventDefault();\n  var data = new DataTransfer(e.clipboardData); // Get files, unless this is likely to be a string the user wants inline.\n\n  if (!data.isRichText()) {\n    var files = data.getFiles();\n    var defaultFileText = data.getText();\n\n    if (files.length > 0) {\n      // Allow customized paste handling for images, etc. Otherwise, fall\n      // through to insert text contents into the editor.\n      if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {\n        return;\n      }\n      /* $FlowFixMe[incompatible-call] This comment suppresses an error found\n       * DataTransfer was typed. getFiles() returns an array of <Files extends\n       * Blob>, not Blob */\n\n\n      getTextContentFromFiles(files, function (\n      /*string*/\n      fileText) {\n        fileText = fileText || defaultFileText;\n\n        if (!fileText) {\n          return;\n        }\n\n        var editorState = editor._latestEditorState;\n        var blocks = splitTextIntoTextBlocks(fileText);\n        var character = CharacterMetadata.create({\n          style: editorState.getCurrentInlineStyle(),\n          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n        });\n        var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n        var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);\n        var fragment = BlockMapBuilder.createFromArray(text);\n        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n        editor.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));\n      });\n      return;\n    }\n  }\n\n  var textBlocks = [];\n  var text = data.getText();\n  var html = data.getHTML();\n  var editorState = editor._latestEditorState;\n\n  if (editor.props.formatPastedText) {\n    var _editor$props$formatP = editor.props.formatPastedText(text, html),\n        formattedText = _editor$props$formatP.text,\n        formattedHtml = _editor$props$formatP.html;\n\n    text = formattedText;\n    html = formattedHtml;\n  }\n\n  if (text) {\n    textBlocks = splitTextIntoTextBlocks(text);\n  }\n\n  var handleInternalPaste = null;\n\n  if (!editor.props.stripPastedStyles) {\n    // If the text from the paste event is rich content that matches what we\n    // already have on the internal clipboard, assume that we should just use\n    // the clipboard fragment for the paste. This will allow us to preserve\n    // styling and entities, if any are present. Note that newlines are\n    // stripped during comparison -- this is because copy/paste within the\n    // editor in Firefox and IE will not include empty lines. The resulting\n    // paste will preserve the newlines correctly.\n    var internalClipboard = editor.getClipboard();\n\n    if (!editor.props.formatPastedText && data.isRichText() && internalClipboard) {\n      var _html;\n\n      if ( // If the editorKey is present in the pasted HTML, it should be safe to\n      // assume this is an internal paste.\n      ((_html = html) === null || _html === void 0 ? void 0 : _html.indexOf(editor.getEditorKey())) !== -1 || // The copy may have been made within a single block, in which case the\n      // editor key won't be part of the paste. In this case, just check\n      // whether the pasted text matches the internal clipboard.\n      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\n        handleInternalPaste = function handleInternalPaste() {\n          return editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n        };\n      }\n    } else if (internalClipboard && data.types.includes('com.apple.webarchive') && !data.types.includes('text/html') && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {\n      // Safari does not properly store text/html in some cases.\n      // Use the internalClipboard if present and equal to what is on\n      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\n      handleInternalPaste = function handleInternalPaste() {\n        return editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n      };\n    }\n\n    if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html, editorState, handleInternalPaste != null))) {\n      return;\n    }\n\n    if (handleInternalPaste != null) {\n      handleInternalPaste();\n      return;\n    } // If there is html paste data, try to parse that.\n\n\n    if (html) {\n      var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);\n\n      if (htmlFragment) {\n        var contentBlocks = htmlFragment.contentBlocks,\n            entityMap = htmlFragment.entityMap;\n\n        if (contentBlocks) {\n          var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\n          editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));\n          return;\n        }\n      }\n    } // Otherwise, create a new fragment from our pasted text. Also\n    // empty the internal clipboard, since it's no longer valid.\n\n\n    editor.setClipboard(null);\n  }\n\n  if (textBlocks.length) {\n    var character = CharacterMetadata.create({\n      style: editorState.getCurrentInlineStyle(),\n      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n    });\n    var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n    var textFragment = DraftPasteProcessor.processText(textBlocks, character, currentBlockType);\n    var textMap = BlockMapBuilder.createFromArray(textFragment);\n    editor.update(insertFragment(editor._latestEditorState, textMap));\n  }\n}\n\nfunction insertFragment(editorState, fragment, entityMap) {\n  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n  var newEntityMap = entityMap ? ContentState.mergeEntityMaps(newContent.getAllEntities(), entityMap) : newContent.getAllEntities();\n  return EditorState.push(editorState, newContent.setEntityMap(newEntityMap), 'insert-fragment');\n}\n\nfunction areTextBlocksAndClipboardEqual(textBlocks, blockMap) {\n  return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function (block, ii) {\n    return block.getText() === textBlocks[ii];\n  });\n}\n\nmodule.exports = editOnPaste;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/node_modules/draft-js/lib/editOnPaste.js"],"names":["BlockMapBuilder","require","CharacterMetadata","ContentState","DataTransfer","DraftModifier","DraftPasteProcessor","EditorState","RichTextEditorUtil","getEntityKeyForSelection","getTextContentFromFiles","isEventHandled","splitTextIntoTextBlocks","editOnPaste","editor","e","preventDefault","data","clipboardData","isRichText","files","getFiles","defaultFileText","getText","length","props","handlePastedFiles","fileText","editorState","_latestEditorState","blocks","character","create","style","getCurrentInlineStyle","entity","getCurrentContent","getSelection","currentBlockType","getCurrentBlockType","text","processText","fragment","createFromArray","withInsertedText","replaceWithFragment","update","push","textBlocks","html","getHTML","formatPastedText","_editor$props$formatP","formattedText","formattedHtml","handleInternalPaste","stripPastedStyles","internalClipboard","getClipboard","_html","indexOf","getEditorKey","size","first","insertFragment","types","includes","areTextBlocksAndClipboardEqual","handlePastedText","htmlFragment","processHTML","blockRenderMap","contentBlocks","entityMap","htmlMap","setClipboard","textFragment","textMap","newContent","newEntityMap","mergeEntityMaps","getAllEntities","setEntityMap","blockMap","valueSeq","every","block","ii","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar DataTransfer = require(\"fbjs/lib/DataTransfer\");\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar DraftPasteProcessor = require(\"./DraftPasteProcessor\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar RichTextEditorUtil = require(\"./RichTextEditorUtil\");\n\nvar getEntityKeyForSelection = require(\"./getEntityKeyForSelection\");\n\nvar getTextContentFromFiles = require(\"./getTextContentFromFiles\");\n\nvar isEventHandled = require(\"./isEventHandled\");\n\nvar splitTextIntoTextBlocks = require(\"./splitTextIntoTextBlocks\");\n/**\n * Paste content.\n */\n\n\nfunction editOnPaste(editor, e) {\n  e.preventDefault();\n  var data = new DataTransfer(e.clipboardData); // Get files, unless this is likely to be a string the user wants inline.\n\n  if (!data.isRichText()) {\n    var files = data.getFiles();\n    var defaultFileText = data.getText();\n\n    if (files.length > 0) {\n      // Allow customized paste handling for images, etc. Otherwise, fall\n      // through to insert text contents into the editor.\n      if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {\n        return;\n      }\n      /* $FlowFixMe[incompatible-call] This comment suppresses an error found\n       * DataTransfer was typed. getFiles() returns an array of <Files extends\n       * Blob>, not Blob */\n\n\n      getTextContentFromFiles(files, function (\n      /*string*/\n      fileText) {\n        fileText = fileText || defaultFileText;\n\n        if (!fileText) {\n          return;\n        }\n\n        var editorState = editor._latestEditorState;\n        var blocks = splitTextIntoTextBlocks(fileText);\n        var character = CharacterMetadata.create({\n          style: editorState.getCurrentInlineStyle(),\n          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n        });\n        var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n        var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);\n        var fragment = BlockMapBuilder.createFromArray(text);\n        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n        editor.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));\n      });\n      return;\n    }\n  }\n\n  var textBlocks = [];\n  var text = data.getText();\n  var html = data.getHTML();\n  var editorState = editor._latestEditorState;\n\n  if (editor.props.formatPastedText) {\n    var _editor$props$formatP = editor.props.formatPastedText(text, html),\n        formattedText = _editor$props$formatP.text,\n        formattedHtml = _editor$props$formatP.html;\n\n    text = formattedText;\n    html = formattedHtml;\n  }\n\n  if (text) {\n    textBlocks = splitTextIntoTextBlocks(text);\n  }\n\n  var handleInternalPaste = null;\n\n  if (!editor.props.stripPastedStyles) {\n    // If the text from the paste event is rich content that matches what we\n    // already have on the internal clipboard, assume that we should just use\n    // the clipboard fragment for the paste. This will allow us to preserve\n    // styling and entities, if any are present. Note that newlines are\n    // stripped during comparison -- this is because copy/paste within the\n    // editor in Firefox and IE will not include empty lines. The resulting\n    // paste will preserve the newlines correctly.\n    var internalClipboard = editor.getClipboard();\n\n    if (!editor.props.formatPastedText && data.isRichText() && internalClipboard) {\n      var _html;\n\n      if ( // If the editorKey is present in the pasted HTML, it should be safe to\n      // assume this is an internal paste.\n      ((_html = html) === null || _html === void 0 ? void 0 : _html.indexOf(editor.getEditorKey())) !== -1 || // The copy may have been made within a single block, in which case the\n      // editor key won't be part of the paste. In this case, just check\n      // whether the pasted text matches the internal clipboard.\n      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\n        handleInternalPaste = function handleInternalPaste() {\n          return editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n        };\n      }\n    } else if (internalClipboard && data.types.includes('com.apple.webarchive') && !data.types.includes('text/html') && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {\n      // Safari does not properly store text/html in some cases.\n      // Use the internalClipboard if present and equal to what is on\n      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\n      handleInternalPaste = function handleInternalPaste() {\n        return editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n      };\n    }\n\n    if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html, editorState, handleInternalPaste != null))) {\n      return;\n    }\n\n    if (handleInternalPaste != null) {\n      handleInternalPaste();\n      return;\n    } // If there is html paste data, try to parse that.\n\n\n    if (html) {\n      var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);\n\n      if (htmlFragment) {\n        var contentBlocks = htmlFragment.contentBlocks,\n            entityMap = htmlFragment.entityMap;\n\n        if (contentBlocks) {\n          var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\n          editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));\n          return;\n        }\n      }\n    } // Otherwise, create a new fragment from our pasted text. Also\n    // empty the internal clipboard, since it's no longer valid.\n\n\n    editor.setClipboard(null);\n  }\n\n  if (textBlocks.length) {\n    var character = CharacterMetadata.create({\n      style: editorState.getCurrentInlineStyle(),\n      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n    });\n    var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n    var textFragment = DraftPasteProcessor.processText(textBlocks, character, currentBlockType);\n    var textMap = BlockMapBuilder.createFromArray(textFragment);\n    editor.update(insertFragment(editor._latestEditorState, textMap));\n  }\n}\n\nfunction insertFragment(editorState, fragment, entityMap) {\n  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n  var newEntityMap = entityMap ? ContentState.mergeEntityMaps(newContent.getAllEntities(), entityMap) : newContent.getAllEntities();\n  return EditorState.push(editorState, newContent.setEntityMap(newEntityMap), 'insert-fragment');\n}\n\nfunction areTextBlocksAndClipboardEqual(textBlocks, blockMap) {\n  return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function (block, ii) {\n    return block.getText() === textBlocks[ii];\n  });\n}\n\nmodule.exports = editOnPaste;"]},"metadata":{},"sourceType":"script"}