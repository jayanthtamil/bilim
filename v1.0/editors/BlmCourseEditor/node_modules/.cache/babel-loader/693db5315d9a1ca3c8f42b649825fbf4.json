{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\component-editor\\\\text\\\\BlmTextEditor.tsx\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport { Editor, EditorState, Modifier, RichUtils } from \"draft-js\";\nimport { decorator, blockStyleFn, customStyleFn } from \"./config\";\nimport { createEditorState, createEditorHTML, removeInlineStyle, toggleAlignment, cleareStyles, applyInlineStyle, toggleHighlight } from \"./utils\";\n\nconst initEditorState = () => EditorState.createEmpty(decorator);\n\nconst BlmTextEditor = (props, ref) => {\n  const {\n    name,\n    value,\n    showSelection,\n    onChange,\n    onTextChange,\n    onEditorChange,\n    ...others\n  } = props;\n  const [editorState, setEditorState] = useState(initEditorState);\n  const editorRef = useRef(null);\n  const htmlRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setFocus: () => {\n      var _editorRef$current;\n\n      return (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.focus();\n    },\n    toggleInlineStyle: inlineStyle => {\n      handleChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n    },\n    applyInlineStyle: (inlieStyle, value) => {\n      handleChange(applyInlineStyle(editorState, inlieStyle, value));\n    },\n    removeInlineStyle: inlineStyle => {\n      handleChange(removeInlineStyle(editorState, inlineStyle));\n    },\n    toggleAlignment: textAlign => {\n      handleChange(toggleAlignment(editorState, textAlign));\n    },\n    toggleBlockType: blockType => {\n      handleChange(RichUtils.toggleBlockType(editorState, blockType));\n    },\n    clearStyles: () => {\n      handleChange(cleareStyles(editorState));\n    }\n  }));\n  useEffect(() => {\n    if (value !== undefined && value !== null && value !== htmlRef.current) {\n      const state = createEditorState(value);\n      const html = createEditorHTML(state);\n      htmlRef.current = html;\n      setEditorState(state);\n    }\n  }, [value]);\n  useEffect(() => {\n    setEditorState(state => toggleHighlight(state, showSelection));\n  }, [showSelection]);\n\n  const updateChange = state => {\n    const oldHtml = htmlRef.current;\n    const html = createEditorHTML(state);\n\n    if (html !== oldHtml) {\n      htmlRef.current = html;\n\n      if (onChange) {\n        onChange({\n          target: {\n            name,\n            value: html\n          }\n        });\n      }\n\n      if (onTextChange) {\n        onTextChange({\n          target: {\n            name,\n            value: state.getCurrentContent().getPlainText()\n          }\n        });\n      }\n    }\n\n    if (onEditorChange) {\n      onEditorChange(state);\n    }\n  };\n\n  const handleChange = state => {\n    const newState = toggleHighlight(state, showSelection);\n    setEditorState(newState);\n    updateChange(newState);\n  };\n\n  const handlePastedText = (text, html, state) => {\n    const newContent = Modifier.replaceText(state.getCurrentContent(), state.getSelection(), text);\n    const newState = EditorState.push(state, newContent, \"insert-fragment\");\n    handleChange(newState);\n    return true;\n  };\n\n  return /*#__PURE__*/React.createElement(Editor, Object.assign({\n    ref: editorRef,\n    editorState: editorState,\n    tabIndex: 1,\n    blockStyleFn: blockStyleFn,\n    customStyleFn: customStyleFn,\n    onChange: handleChange,\n    handlePastedText: handlePastedText\n  }, others, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default forwardRef(BlmTextEditor);","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/component-editor/text/BlmTextEditor.tsx"],"names":["React","forwardRef","useEffect","useImperativeHandle","useRef","useState","Editor","EditorState","Modifier","RichUtils","decorator","blockStyleFn","customStyleFn","createEditorState","createEditorHTML","removeInlineStyle","toggleAlignment","cleareStyles","applyInlineStyle","toggleHighlight","initEditorState","createEmpty","BlmTextEditor","props","ref","name","value","showSelection","onChange","onTextChange","onEditorChange","others","editorState","setEditorState","editorRef","htmlRef","setFocus","current","focus","toggleInlineStyle","inlineStyle","handleChange","inlieStyle","textAlign","toggleBlockType","blockType","clearStyles","undefined","state","html","updateChange","oldHtml","target","getCurrentContent","getPlainText","newState","handlePastedText","text","newContent","replaceText","getSelection","push"],"mappings":"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","sourcesContent":["import React, {\r\n  ComponentProps,\r\n  forwardRef,\r\n  ForwardRefRenderFunction,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { DraftHandleValue, Editor, EditorState, Modifier, RichUtils } from \"draft-js\";\r\n\r\nimport { CustomChangeEvent, TextEditorComponent } from \"types\";\r\nimport { decorator, blockStyleFn, customStyleFn } from \"./config\";\r\nimport {\r\n  createEditorState,\r\n  createEditorHTML,\r\n  removeInlineStyle,\r\n  toggleAlignment,\r\n  cleareStyles,\r\n  applyInlineStyle,\r\n  toggleHighlight,\r\n} from \"./utils\";\r\n\r\nexport type TextEditorChangeEvent = CustomChangeEvent<string>;\r\n\r\nexport interface TextEditorProps\r\n  extends Partial<Omit<ComponentProps<typeof Editor>, \"editorState\" | \"onChange\">> {\r\n  name: string;\r\n  value?: string;\r\n  showSelection?: boolean;\r\n  onChange?: (event: TextEditorChangeEvent) => void;\r\n  onTextChange?: (event: TextEditorChangeEvent) => void;\r\n  onEditorChange?: (state: EditorState) => void;\r\n}\r\n\r\nconst initEditorState = () => EditorState.createEmpty(decorator);\r\n\r\nconst BlmTextEditor: ForwardRefRenderFunction<TextEditorComponent, TextEditorProps> = (\r\n  props,\r\n  ref\r\n) => {\r\n  const { name, value, showSelection, onChange, onTextChange, onEditorChange, ...others } = props;\r\n  const [editorState, setEditorState] = useState(initEditorState);\r\n  const editorRef = useRef<Editor>(null);\r\n  const htmlRef = useRef<string | null>(null);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setFocus: () => editorRef.current?.focus(),\r\n    toggleInlineStyle: (inlineStyle) => {\r\n      handleChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\r\n    },\r\n    applyInlineStyle: (inlieStyle, value) => {\r\n      handleChange(applyInlineStyle(editorState, inlieStyle, value));\r\n    },\r\n    removeInlineStyle: (inlineStyle) => {\r\n      handleChange(removeInlineStyle(editorState, inlineStyle));\r\n    },\r\n    toggleAlignment: (textAlign) => {\r\n      handleChange(toggleAlignment(editorState, textAlign));\r\n    },\r\n    toggleBlockType: (blockType) => {\r\n      handleChange(RichUtils.toggleBlockType(editorState, blockType));\r\n    },\r\n    clearStyles: () => {\r\n      handleChange(cleareStyles(editorState));\r\n    },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    if (value !== undefined && value !== null && value !== htmlRef.current) {\r\n      const state = createEditorState(value);\r\n      const html = createEditorHTML(state);\r\n\r\n      htmlRef.current = html;\r\n\r\n      setEditorState(state);\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    setEditorState((state) => toggleHighlight(state, showSelection));\r\n  }, [showSelection]);\r\n\r\n  const updateChange = (state: EditorState) => {\r\n    const oldHtml = htmlRef.current;\r\n    const html = createEditorHTML(state);\r\n\r\n    if (html !== oldHtml) {\r\n      htmlRef.current = html;\r\n\r\n      if (onChange) {\r\n        onChange({ target: { name, value: html } });\r\n      }\r\n\r\n      if (onTextChange) {\r\n        onTextChange({ target: { name, value: state.getCurrentContent().getPlainText() } });\r\n      }\r\n    }\r\n\r\n    if (onEditorChange) {\r\n      onEditorChange(state);\r\n    }\r\n  };\r\n\r\n  const handleChange = (state: EditorState) => {\r\n    const newState = toggleHighlight(state, showSelection);\r\n\r\n    setEditorState(newState);\r\n\r\n    updateChange(newState);\r\n  };\r\n\r\n  const handlePastedText = (text: string, html: string | undefined, state: EditorState) => {\r\n    const newContent = Modifier.replaceText(state.getCurrentContent(), state.getSelection(), text);\r\n    const newState = EditorState.push(state, newContent, \"insert-fragment\");\r\n\r\n    handleChange(newState);\r\n\r\n    return true as unknown as DraftHandleValue;\r\n  };\r\n\r\n  return (\r\n    <Editor\r\n      ref={editorRef}\r\n      editorState={editorState}\r\n      tabIndex={1}\r\n      blockStyleFn={blockStyleFn}\r\n      customStyleFn={customStyleFn}\r\n      onChange={handleChange}\r\n      handlePastedText={handlePastedText}\r\n      {...others}\r\n    />\r\n  );\r\n};\r\n\r\nexport default forwardRef(BlmTextEditor);\r\n"]},"metadata":{},"sourceType":"module"}