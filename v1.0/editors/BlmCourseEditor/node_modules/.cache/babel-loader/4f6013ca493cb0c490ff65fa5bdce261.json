{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\question-editor\\\\components\\\\main\\\\link-media\\\\BlmLinkMedia.tsx\";\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { useTranslation } from \"react-i18next\";\nimport { AcceptedFileTypes, MediaOptionTypes } from \"editor-constants\";\nimport { BlmMediaPicker } from \"components/shared\";\nimport \"./styles.scss\";\n\nfunction BlmLinkMedia(props) {\n  const {\n    elementId,\n    name,\n    data,\n    linkMedia,\n    isEditable = true,\n    onChange\n  } = props;\n  const {\n    option,\n    media\n  } = data || {};\n  const showLinkBtn = isEditable && linkMedia && !media ? true : false;\n  const isLinked = showLinkBtn && (!option || option === MediaOptionTypes.Linked) ? true : false;\n  const {\n    t\n  } = useTranslation(\"question-editor\");\n\n  const updateChange = newData => {\n    if (onChange) {\n      onChange({\n        target: {\n          name,\n          value: newData\n        }\n      });\n    }\n  };\n\n  const getNewData = () => {\n    if (data) {\n      return { ...data\n      };\n    } else {\n      return {\n        option: isLinked ? MediaOptionTypes.Linked : MediaOptionTypes.None\n      };\n    }\n  };\n\n  const handleLinkClick = event => {\n    const newData = getNewData();\n\n    if (newData.option === MediaOptionTypes.Linked) {\n      newData.option = MediaOptionTypes.None;\n    } else {\n      newData.option = MediaOptionTypes.Linked;\n    }\n\n    updateChange(newData);\n  };\n\n  const handleChange = event => {\n    const {\n      value\n    } = event.target;\n    const newData = getNewData();\n    newData.option = value ? MediaOptionTypes.Media : MediaOptionTypes.None;\n    newData.media = value;\n    updateChange(newData);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"link-media-picker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlmMediaPicker, {\n    name: name,\n    elementId: elementId,\n    acceptedFiles: [AcceptedFileTypes.Image, AcceptedFileTypes.Video],\n    data: isLinked ? linkMedia : media,\n    placeholder: t(\"label.select_media\"),\n    isLinked: isLinked,\n    replaceZone: isLinked ? \"none\" : \"button\",\n    disabled: !isEditable,\n    className: \"media-picker-1\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), showLinkBtn && /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"link-btn\", {\n      linked: isLinked\n    }),\n    onClick: handleLinkClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default BlmLinkMedia;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/question-editor/components/main/link-media/BlmLinkMedia.tsx"],"names":["React","clsx","useTranslation","AcceptedFileTypes","MediaOptionTypes","BlmMediaPicker","BlmLinkMedia","props","elementId","name","data","linkMedia","isEditable","onChange","option","media","showLinkBtn","isLinked","Linked","t","updateChange","newData","target","value","getNewData","None","handleLinkClick","event","handleChange","Media","Image","Video","linked"],"mappings":"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","sourcesContent":["import React, { MouseEvent } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CustomChangeEvent, LinkMedia, MediaFile } from \"types\";\r\nimport { AcceptedFileTypes, MediaOptionTypes } from \"editor-constants\";\r\nimport { BlmMediaPicker, MediaPickerChangeEvent } from \"components/shared\";\r\nimport \"./styles.scss\";\r\n\r\nexport type LinkMediaChangeEvent = CustomChangeEvent<LinkMedia | undefined>;\r\n\r\ninterface CompProps {\r\n  elementId: string;\r\n  name: string;\r\n  data?: LinkMedia | null;\r\n  linkMedia?: MediaFile | null;\r\n  isEditable?: boolean;\r\n  onChange: (event: LinkMediaChangeEvent) => void;\r\n}\r\n\r\nfunction BlmLinkMedia(props: CompProps) {\r\n  const { elementId, name, data, linkMedia, isEditable = true, onChange } = props;\r\n  const { option, media } = data || {};\r\n  const showLinkBtn = isEditable && linkMedia && !media ? true : false;\r\n  const isLinked = showLinkBtn && (!option || option === MediaOptionTypes.Linked) ? true : false;\r\n  const { t } = useTranslation(\"question-editor\");\r\n\r\n  const updateChange = (newData: LinkMedia) => {\r\n    if (onChange) {\r\n      onChange({ target: { name, value: newData } });\r\n    }\r\n  };\r\n\r\n  const getNewData = () => {\r\n    if (data) {\r\n      return { ...data };\r\n    } else {\r\n      return {\r\n        option: isLinked ? MediaOptionTypes.Linked : MediaOptionTypes.None,\r\n      };\r\n    }\r\n  };\r\n\r\n  const handleLinkClick = (event: MouseEvent) => {\r\n    const newData: LinkMedia = getNewData();\r\n\r\n    if (newData.option === MediaOptionTypes.Linked) {\r\n      newData.option = MediaOptionTypes.None;\r\n    } else {\r\n      newData.option = MediaOptionTypes.Linked;\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const handleChange = (event: MediaPickerChangeEvent) => {\r\n    const { value } = event.target;\r\n    const newData: LinkMedia = getNewData();\r\n\r\n    newData.option = value ? MediaOptionTypes.Media : MediaOptionTypes.None;\r\n    newData.media = value;\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"link-media-picker\">\r\n      <BlmMediaPicker\r\n        name={name}\r\n        elementId={elementId}\r\n        acceptedFiles={[AcceptedFileTypes.Image, AcceptedFileTypes.Video]}\r\n        data={isLinked ? linkMedia : media}\r\n        placeholder={t(\"label.select_media\")}\r\n        isLinked={isLinked}\r\n        replaceZone={isLinked ? \"none\" : \"button\"}\r\n        disabled={!isEditable}\r\n        className=\"media-picker-1\"\r\n        onChange={handleChange}\r\n      />\r\n      {showLinkBtn && (\r\n        <div className={clsx(\"link-btn\", { linked: isLinked })} onClick={handleLinkClick} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmLinkMedia;\r\n"]},"metadata":{},"sourceType":"module"}