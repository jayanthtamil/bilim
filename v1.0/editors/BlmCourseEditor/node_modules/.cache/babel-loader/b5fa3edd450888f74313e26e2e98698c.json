{"ast":null,"code":"import { TemplateType, TemplateMenu } from \"editor-constants\";\nexport function getTheme(themes, name) {\n  return themes.find(item => {\n    return item.name.toLowerCase() === name.toLowerCase();\n  });\n}\nexport function isCategory(category) {\n  return category && (category.type === TemplateType.CategoryRoot || category.type === TemplateType.Category);\n}\nexport function isTemplate(template) {\n  return template && template.type === TemplateType.Template;\n}\nexport function isVariant(variant) {\n  return variant && variant.type === TemplateType.Varaint;\n}\nexport function hasSubCategory(category) {\n  return hasCategory(category, TemplateMenu.Left);\n}\nexport function hasTabCategory(category) {\n  return hasCategory(category, TemplateMenu.Tab);\n}\nexport function hasGroupCategory(category) {\n  return hasCategory(category, TemplateMenu.Inline);\n}\nexport function hasCategory(category, menu) {\n  if (isCategory(category)) {\n    for (let child of category.children) {\n      if (isCategory(child) && (!menu || child.menu === menu)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nexport function cloneTemplates(templates) {\n  return copyCategories(templates);\n}\n\nfunction copyCategories(categories, parent) {\n  return categories.map(category => {\n    const result = { ...category,\n      parent\n    };\n    result.children = hasCategory(category) ? copyCategories(category.children, result) : copyTemplates(category.children, result);\n    return result;\n  });\n}\n\nfunction copyTemplates(templates, parent) {\n  return templates.map(template => {\n    const result = { ...template,\n      parent\n    };\n    result.variants = copyVariants(template.variants, result);\n    return result;\n  });\n}\n\nfunction copyVariants(variants, parent) {\n  return variants.map(variant => ({ ...variant,\n    parent\n  }));\n}\n\nexport function traverseTemplates(templates, id, callback) {\n  return templates.find(template => {\n    if (template.id === id) {\n      callback(template);\n      return true;\n    } else if (!isVariant(template)) {\n      return traverseTemplates(isTemplate(template) ? template.variants : template.children, id, callback);\n    }\n\n    return false;\n  });\n}\nexport function getTemplateAndVariant(templates, id) {\n  let result;\n  traverseTemplates(templates, id, template => {\n    if (isVariant(template)) {\n      result = {\n        template: template.parent,\n        variant: template\n      };\n    } else if (isTemplate(template)) {\n      result = {\n        template\n      };\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/utils/editor/domain.ts"],"names":["TemplateType","TemplateMenu","getTheme","themes","name","find","item","toLowerCase","isCategory","category","type","CategoryRoot","Category","isTemplate","template","Template","isVariant","variant","Varaint","hasSubCategory","hasCategory","Left","hasTabCategory","Tab","hasGroupCategory","Inline","menu","child","children","cloneTemplates","templates","copyCategories","categories","parent","map","result","copyTemplates","variants","copyVariants","traverseTemplates","id","callback","getTemplateAndVariant"],"mappings":"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","sourcesContent":["import {\r\n  Template,\r\n  TemplateBase,\r\n  TemplateCategory,\r\n  TemplateTraverseCallback,\r\n  TemplateVariant,\r\n  Theme,\r\n} from \"types\";\r\nimport { TemplateType, TemplateMenu } from \"editor-constants\";\r\n\r\nexport function getTheme(themes: Theme[], name: string) {\r\n  return themes.find((item) => {\r\n    return item.name.toLowerCase() === name.toLowerCase();\r\n  });\r\n}\r\n\r\nexport function isCategory(\r\n  category: TemplateCategory | Template | TemplateVariant\r\n): category is TemplateCategory {\r\n  return (\r\n    category &&\r\n    (category.type === TemplateType.CategoryRoot || category.type === TemplateType.Category)\r\n  );\r\n}\r\n\r\nexport function isTemplate(\r\n  template: TemplateCategory | Template | TemplateVariant\r\n): template is Template {\r\n  return template && template.type === TemplateType.Template;\r\n}\r\n\r\nexport function isVariant(\r\n  variant: TemplateCategory | Template | TemplateVariant\r\n): variant is TemplateVariant {\r\n  return variant && variant.type === TemplateType.Varaint;\r\n}\r\n\r\nexport function hasSubCategory(\r\n  category: TemplateCategory | Template\r\n): category is TemplateCategory & { children: TemplateCategory[] } {\r\n  return hasCategory(category, TemplateMenu.Left);\r\n}\r\n\r\nexport function hasTabCategory(\r\n  category: TemplateCategory | Template\r\n): category is TemplateCategory & { children: TemplateCategory[] } {\r\n  return hasCategory(category, TemplateMenu.Tab);\r\n}\r\n\r\nexport function hasGroupCategory(\r\n  category: TemplateCategory | Template\r\n): category is TemplateCategory & { children: TemplateCategory[] } {\r\n  return hasCategory(category, TemplateMenu.Inline);\r\n}\r\n\r\nexport function hasCategory(\r\n  category: TemplateCategory | Template,\r\n  menu?: string\r\n): category is TemplateCategory & { children: TemplateCategory[] } {\r\n  if (isCategory(category)) {\r\n    for (let child of category.children) {\r\n      if (isCategory(child) && (!menu || child.menu === menu)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function cloneTemplates(templates: TemplateCategory[]) {\r\n  return copyCategories(templates);\r\n}\r\n\r\nfunction copyCategories(\r\n  categories: TemplateCategory[],\r\n  parent?: TemplateCategory\r\n): TemplateCategory[] {\r\n  return categories.map((category) => {\r\n    const result = { ...category, parent };\r\n\r\n    result.children = hasCategory(category)\r\n      ? copyCategories(category.children, result)\r\n      : copyTemplates(category.children as Template[], result);\r\n\r\n    return result;\r\n  });\r\n}\r\n\r\nfunction copyTemplates(templates: Template[], parent: TemplateCategory): Template[] {\r\n  return templates.map((template) => {\r\n    const result = { ...template, parent };\r\n    result.variants = copyVariants(template.variants, result);\r\n\r\n    return result;\r\n  });\r\n}\r\n\r\nfunction copyVariants(variants: TemplateVariant[], parent: Template): TemplateVariant[] {\r\n  return variants.map((variant) => ({ ...variant, parent }));\r\n}\r\n\r\nexport function traverseTemplates(\r\n  templates: TemplateCategory[] | Template[] | TemplateVariant[],\r\n  id: string,\r\n  callback: TemplateTraverseCallback\r\n): TemplateCategory | Template | TemplateVariant | undefined {\r\n  return (templates as (TemplateCategory | Template | TemplateVariant)[]).find((template) => {\r\n    if (template.id === id) {\r\n      callback(template);\r\n      return true;\r\n    } else if (!isVariant(template)) {\r\n      return traverseTemplates(\r\n        isTemplate(template) ? template.variants : template.children,\r\n        id,\r\n        callback\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n}\r\n\r\nexport function getTemplateAndVariant(\r\n  templates: TemplateCategory[] | Template[],\r\n  id: string\r\n): { template: Template; variant?: TemplateBase } | undefined {\r\n  let result;\r\n\r\n  traverseTemplates(templates, id, (template) => {\r\n    if (isVariant(template)) {\r\n      result = { template: template.parent!, variant: template };\r\n    } else if (isTemplate(template)) {\r\n      result = { template };\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}