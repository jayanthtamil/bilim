{"ast":null,"code":"import { QuestionTemplate } from \"types\";\nimport { QuestionTemplateTypes } from \"editor-constants\";\nimport { createHTMLElement, isQuestionCustom } from \"utils\";\nimport { getStyleElementRules } from \"template-builders/core\";\nimport { getRelativeStyles } from \"../component\";\nimport { getQuestionIntroduction } from \"./introduction\";\nimport { getQuestionMain } from \"./main\";\nimport { getQuestionFeedback } from \"./feedback\";\nimport { getQuestionParameters } from \"./parameters\";\nexport function getQuestionTemplateModel(template) {\n  const {\n    html,\n    template: associated\n  } = template;\n  const question = new QuestionTemplate();\n  const element = createHTMLElement(html);\n\n  if (element) {\n    const rules = getStyleElementRules(element);\n\n    if (element.classList.contains(\"customquestion\")) {\n      question.type = element.classList.contains(\"noheader\") ? QuestionTemplateTypes.NoHeader : QuestionTemplateTypes.Custom;\n    }\n\n    question.introduction = getQuestionIntroduction(element);\n    question.main = getQuestionMain(element, question.type);\n    question.feedback = getQuestionFeedback(element);\n    question.parameters = getQuestionParameters(element);\n\n    if (rules && isQuestionCustom(question.main.content)) {\n      getRelativeStyles(rules, associated.name, [question.main.content]);\n    }\n  }\n\n  return question;\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/model/question/index.ts"],"names":["QuestionTemplate","QuestionTemplateTypes","createHTMLElement","isQuestionCustom","getStyleElementRules","getRelativeStyles","getQuestionIntroduction","getQuestionMain","getQuestionFeedback","getQuestionParameters","getQuestionTemplateModel","template","html","associated","question","element","rules","classList","contains","type","NoHeader","Custom","introduction","main","feedback","parameters","content","name"],"mappings":"AAAA,SAAgCA,gBAAhC,QAAwD,OAAxD;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,OAApD;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AACA,SAASC,eAAT,QAAgC,QAAhC;AACA,SAASC,mBAAT,QAAoC,YAApC;AACA,SAASC,qBAAT,QAAsC,cAAtC;AAEA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAAmE;AACxE,QAAM;AAAEC,IAAAA,IAAF;AAAQD,IAAAA,QAAQ,EAAEE;AAAlB,MAAiCF,QAAvC;AACA,QAAMG,QAAQ,GAAG,IAAId,gBAAJ,EAAjB;AACA,QAAMe,OAAO,GAAGb,iBAAiB,CAACU,IAAD,CAAjC;;AAEA,MAAIG,OAAJ,EAAa;AACX,UAAMC,KAAK,GAAGZ,oBAAoB,CAACW,OAAD,CAAlC;;AAEA,QAAIA,OAAO,CAACE,SAAR,CAAkBC,QAAlB,CAA2B,gBAA3B,CAAJ,EAAkD;AAChDJ,MAAAA,QAAQ,CAACK,IAAT,GAAgBJ,OAAO,CAACE,SAAR,CAAkBC,QAAlB,CAA2B,UAA3B,IACZjB,qBAAqB,CAACmB,QADV,GAEZnB,qBAAqB,CAACoB,MAF1B;AAGD;;AAEDP,IAAAA,QAAQ,CAACQ,YAAT,GAAwBhB,uBAAuB,CAACS,OAAD,CAA/C;AACAD,IAAAA,QAAQ,CAACS,IAAT,GAAgBhB,eAAe,CAACQ,OAAD,EAAUD,QAAQ,CAACK,IAAnB,CAA/B;AACAL,IAAAA,QAAQ,CAACU,QAAT,GAAoBhB,mBAAmB,CAACO,OAAD,CAAvC;AACAD,IAAAA,QAAQ,CAACW,UAAT,GAAsBhB,qBAAqB,CAACM,OAAD,CAA3C;;AAEA,QAAIC,KAAK,IAAIb,gBAAgB,CAACW,QAAQ,CAACS,IAAT,CAAcG,OAAf,CAA7B,EAAsD;AACpDrB,MAAAA,iBAAiB,CAACW,KAAD,EAAQH,UAAU,CAACc,IAAnB,EAAyB,CAACb,QAAQ,CAACS,IAAT,CAAcG,OAAf,CAAzB,CAAjB;AACD;AACF;;AAED,SAAOZ,QAAP;AACD","sourcesContent":["import { CourseElementTemplate, QuestionTemplate } from \"types\";\r\nimport { QuestionTemplateTypes } from \"editor-constants\";\r\nimport { createHTMLElement, isQuestionCustom } from \"utils\";\r\nimport { getStyleElementRules } from \"template-builders/core\";\r\nimport { getRelativeStyles } from \"../component\";\r\nimport { getQuestionIntroduction } from \"./introduction\";\r\nimport { getQuestionMain } from \"./main\";\r\nimport { getQuestionFeedback } from \"./feedback\";\r\nimport { getQuestionParameters } from \"./parameters\";\r\n\r\nexport function getQuestionTemplateModel(template: CourseElementTemplate) {\r\n  const { html, template: associated } = template;\r\n  const question = new QuestionTemplate();\r\n  const element = createHTMLElement(html);\r\n\r\n  if (element) {\r\n    const rules = getStyleElementRules(element);\r\n\r\n    if (element.classList.contains(\"customquestion\")) {\r\n      question.type = element.classList.contains(\"noheader\")\r\n        ? QuestionTemplateTypes.NoHeader\r\n        : QuestionTemplateTypes.Custom;\r\n    }\r\n\r\n    question.introduction = getQuestionIntroduction(element);\r\n    question.main = getQuestionMain(element, question.type);\r\n    question.feedback = getQuestionFeedback(element);\r\n    question.parameters = getQuestionParameters(element);\r\n\r\n    if (rules && isQuestionCustom(question.main.content)) {\r\n      getRelativeStyles(rules, associated.name, [question.main.content]);\r\n    }\r\n  }\r\n\r\n  return question;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}