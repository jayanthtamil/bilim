{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\course-tree\\\\BlmCourseTree.tsx\";\nimport React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport Tree, { TreeNode } from \"rc-tree\";\nimport { ElementType } from \"editor-constants\";\nimport { getSiblingElements } from \"utils\";\n\nfunction BlmCourseTree(props) {\n  const {\n    data,\n    treeType,\n    selectedItem,\n    allowedItems,\n    className,\n    onItemClick\n  } = props;\n  const selectedIds = selectedItem ? [selectedItem.id] : [];\n  const treeData = useMemo(() => {\n    if (treeType === \"associated-chapter\") {\n      return [data];\n    } else if (treeType === \"template\" && [ElementType.SimpleContent, ElementType.SimplePartPage].includes(data.type)) {\n      return getSiblingElements(data.type === ElementType.SimplePartPage ? data.parent : data);\n    } else {\n      return data.children;\n    }\n  }, [data, treeType]);\n\n  const handleClick = (event, node) => {\n    const item = node.props.data;\n\n    if (item && onItemClick) {\n      onItemClick(item);\n    }\n  };\n\n  const isAlwaysExpanded = element => {\n    switch (element.type) {\n      case ElementType.Root:\n        return true;\n\n      default:\n        return false;\n    }\n  };\n\n  const isAllowedItem = element => {\n    if (!allowedItems || (Array.isArray(allowedItems) ? allowedItems.includes(element.type) : allowedItems(element))) {\n      return true;\n    }\n  };\n\n  const renderChildren = elements => {\n    const arr = elements.filter(item => isAllowedItem(item));\n    return arr === null || arr === void 0 ? void 0 : arr.map(item => {\n      const children = renderChildren(item.children);\n      return /*#__PURE__*/React.createElement(TreeNode, {\n        key: item.id,\n        title: item.name,\n        data: item,\n        alwaysExpanded: isAlwaysExpanded(item),\n        className: clsx(item.type, {\n          \"tree-treenode-no-children\": (children === null || children === void 0 ? void 0 : children.length) === 0\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, children);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"blm-course-tree-container\", treeType, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tree, {\n    selectedKeys: selectedIds,\n    defaultExpandedKeys: selectedIds,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, renderChildren(treeData)));\n}\n\nexport default BlmCourseTree;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/course-tree/BlmCourseTree.tsx"],"names":["React","useMemo","clsx","Tree","TreeNode","ElementType","getSiblingElements","BlmCourseTree","props","data","treeType","selectedItem","allowedItems","className","onItemClick","selectedIds","id","treeData","SimpleContent","SimplePartPage","includes","type","parent","children","handleClick","event","node","item","isAlwaysExpanded","element","Root","isAllowedItem","Array","isArray","renderChildren","elements","arr","filter","map","name","length"],"mappings":"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","sourcesContent":["import React, { MouseEvent, useMemo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport Tree, { TreeNode } from \"rc-tree\";\r\n\r\nimport { CourseElement, TreeNodeInstance } from \"types\";\r\nimport { ElementType } from \"editor-constants\";\r\nimport { getSiblingElements } from \"utils\";\r\n\r\nexport interface CourseTreeProps {\r\n  data: CourseElement;\r\n  treeType: ElementType | \"template\" | \"associated-chapter\";\r\n  selectedItem?: CourseElement;\r\n  allowedItems?: ElementType[] | ((item: CourseElement) => boolean);\r\n  className?: string;\r\n  onItemClick?: (item: CourseElement) => void;\r\n}\r\n\r\nfunction BlmCourseTree(props: CourseTreeProps) {\r\n  const { data, treeType, selectedItem, allowedItems, className, onItemClick } = props;\r\n  const selectedIds = selectedItem ? [selectedItem.id] : [];\r\n\r\n  const treeData = useMemo(() => {\r\n    if (treeType === \"associated-chapter\") {\r\n      return [data];\r\n    } else if (\r\n      treeType === \"template\" &&\r\n      [ElementType.SimpleContent, ElementType.SimplePartPage].includes(data.type)\r\n    ) {\r\n      return getSiblingElements(data.type === ElementType.SimplePartPage ? data.parent! : data);\r\n    } else {\r\n      return data.children;\r\n    }\r\n  }, [data, treeType]);\r\n\r\n  const handleClick = (event: MouseEvent, node: TreeNodeInstance) => {\r\n    const item = node.props.data;\r\n\r\n    if (item && onItemClick) {\r\n      onItemClick(item);\r\n    }\r\n  };\r\n\r\n  const isAlwaysExpanded = (element: CourseElement) => {\r\n    switch (element.type) {\r\n      case ElementType.Root:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  const isAllowedItem = (element: CourseElement) => {\r\n    if (\r\n      !allowedItems ||\r\n      (Array.isArray(allowedItems) ? allowedItems.includes(element.type) : allowedItems(element))\r\n    ) {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const renderChildren = (elements: CourseElement[]) => {\r\n    const arr = elements.filter((item) => isAllowedItem(item));\r\n\r\n    return arr?.map((item) => {\r\n      const children = renderChildren(item.children);\r\n\r\n      return (\r\n        <TreeNode\r\n          key={item.id}\r\n          title={item.name}\r\n          data={item}\r\n          alwaysExpanded={isAlwaysExpanded(item)}\r\n          className={clsx(item.type, {\r\n            \"tree-treenode-no-children\": children?.length === 0,\r\n          })}\r\n        >\r\n          {children}\r\n        </TreeNode>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(\"blm-course-tree-container\", treeType, className)}>\r\n      <Tree selectedKeys={selectedIds} defaultExpandedKeys={selectedIds} onClick={handleClick}>\r\n        {renderChildren(treeData)}\r\n      </Tree>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmCourseTree;\r\n"]},"metadata":{},"sourceType":"module"}