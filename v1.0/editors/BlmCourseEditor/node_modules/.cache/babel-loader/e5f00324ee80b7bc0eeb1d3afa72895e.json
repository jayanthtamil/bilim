{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\animation\\\\options\\\\item\\\\BlmOptionItem.tsx\";\nimport React, { Fragment } from \"react\";\nimport clsx from \"clsx\";\nimport { Checkbox, FormControlLabel, MenuItem, Select } from \"@material-ui/core\";\nimport \"./styles.scss\";\n\nfunction BlmOptionsItem(props) {\n  const {\n    name,\n    data,\n    onChange\n  } = props;\n  const {\n    name: label,\n    type,\n    value,\n    min,\n    max,\n    list_values\n  } = data;\n\n  const updateChange = newValue => {\n    const newData = { ...data,\n      value: newValue\n    };\n\n    if (onChange) {\n      onChange(name, newData);\n    }\n  };\n\n  const getRegEx = () => {\n    if (type === \"integer\") {\n      return /^\\d+$/;\n    } else if (type === \"number\") {\n      return /^\\d*(\\.\\d*)?$/;\n    } else {\n      return /(?:)/;\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value,\n      checked\n    } = event.target;\n\n    if (name === \"checkbox\") {\n      updateChange(checked);\n    } else if (value === \"\" || getRegEx().test(value)) {\n      updateChange(value);\n    }\n  };\n\n  const handleBlurChange = event => {\n    let newValue = event.target.value;\n\n    if (type !== \"string\" && newValue !== \"\") {\n      if (min !== undefined) {\n        newValue = Math.max(min, Number(newValue)).toString();\n      }\n\n      if (max !== undefined) {\n        newValue = Math.min(max, Number(newValue)).toString();\n      }\n\n      if (newValue !== value) {\n        updateChange(newValue);\n      }\n    }\n  };\n\n  const renderChild = () => {\n    if (type === \"string\" || type === \"number\" || type === \"integer\") {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"option-item-lbl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: value,\n        className: \"option-item-txt\",\n        onChange: handleChange,\n        onBlur: handleBlurChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }));\n    } else if (type === \"list\") {\n      const arr = list_values ? list_values.split(\"|\") : [];\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"option-item-lbl\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, label), /*#__PURE__*/React.createElement(Select, {\n        value: value,\n        className: \"option-item-dropdown\",\n        onChange: handleChange,\n        onBlur: handleBlurChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, arr.map((item, ind) => /*#__PURE__*/React.createElement(MenuItem, {\n        key: ind,\n        value: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }, item))));\n    } else if (type === \"boolean\") {\n      return /*#__PURE__*/React.createElement(FormControlLabel, {\n        name: \"checkbox\",\n        label: label,\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 20\n          }\n        }),\n        checked: value,\n        className: \"option-item-frm-ctrl\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"option-item-wrapper\", type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 10\n    }\n  }, renderChild());\n}\n\nexport default BlmOptionsItem;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/animation/options/item/BlmOptionItem.tsx"],"names":["React","Fragment","clsx","Checkbox","FormControlLabel","MenuItem","Select","BlmOptionsItem","props","name","data","onChange","label","type","value","min","max","list_values","updateChange","newValue","newData","getRegEx","handleChange","event","checked","target","test","handleBlurChange","undefined","Math","Number","toString","renderChild","arr","split","map","item","ind"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, FocusEvent, Fragment } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { Checkbox, FormControlLabel, MenuItem, Select } from \"@material-ui/core\";\r\n\r\nimport { AnimationOption } from \"types\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  name: string;\r\n  data: AnimationOption;\r\n  onChange?: (name: string, data: AnimationOption) => void;\r\n}\r\n\r\nfunction BlmOptionsItem(props: CompProps) {\r\n  const { name, data, onChange } = props;\r\n  const { name: label, type, value, min, max, list_values } = data;\r\n\r\n  const updateChange = (newValue: string | number | boolean) => {\r\n    const newData = { ...data, value: newValue };\r\n\r\n    if (onChange) {\r\n      onChange(name, newData);\r\n    }\r\n  };\r\n\r\n  const getRegEx = () => {\r\n    if (type === \"integer\") {\r\n      return /^\\d+$/;\r\n    } else if (type === \"number\") {\r\n      return /^\\d*(\\.\\d*)?$/;\r\n    } else {\r\n      return /(?:)/;\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<any>) => {\r\n    const { name, value, checked } = event.target;\r\n\r\n    if (name === \"checkbox\") {\r\n      updateChange(checked);\r\n    } else if (value === \"\" || getRegEx().test(value)) {\r\n      updateChange(value);\r\n    }\r\n  };\r\n\r\n  const handleBlurChange = (event: FocusEvent<HTMLInputElement>) => {\r\n    let newValue = event.target.value;\r\n\r\n    if (type !== \"string\" && newValue !== \"\") {\r\n      if (min !== undefined) {\r\n        newValue = Math.max(min, Number(newValue)).toString();\r\n      }\r\n      if (max !== undefined) {\r\n        newValue = Math.min(max, Number(newValue)).toString();\r\n      }\r\n      if (newValue !== value) {\r\n        updateChange(newValue);\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderChild = () => {\r\n    if (type === \"string\" || type === \"number\" || type === \"integer\") {\r\n      return (\r\n        <Fragment>\r\n          <div className=\"option-item-lbl\">{label}</div>\r\n          <input\r\n            type=\"text\"\r\n            value={value as string}\r\n            className=\"option-item-txt\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlurChange}\r\n          />\r\n        </Fragment>\r\n      );\r\n    } else if (type === \"list\") {\r\n      const arr = list_values ? list_values.split(\"|\") : [];\r\n      return (\r\n        <Fragment>\r\n          <div className=\"option-item-lbl\">{label}</div>\r\n          <Select\r\n            value={value as string}\r\n            className=\"option-item-dropdown\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlurChange}\r\n          >\r\n            {arr.map((item, ind) => (\r\n              <MenuItem key={ind} value={item}>\r\n                {item}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </Fragment>\r\n      );\r\n    } else if (type === \"boolean\") {\r\n      return (\r\n        <FormControlLabel\r\n          name=\"checkbox\"\r\n          label={label}\r\n          control={<Checkbox />}\r\n          checked={value as boolean}\r\n          className=\"option-item-frm-ctrl\"\r\n          onChange={handleChange}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return <div className={clsx(\"option-item-wrapper\", type)}>{renderChild()}</div>;\r\n}\r\n\r\nexport default BlmOptionsItem;\r\n"]},"metadata":{},"sourceType":"module"}