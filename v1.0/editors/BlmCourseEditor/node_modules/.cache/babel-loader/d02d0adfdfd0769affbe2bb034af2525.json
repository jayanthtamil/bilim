{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\shared\\\\numeric-select\\\\BlmNumericSelect.tsx\";\nimport React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { TextField } from \"@material-ui/core\";\nimport { DropdownImg1 } from \"assets/icons\";\nimport { toNumber } from \"utils\";\nimport BlmAutoComplete from \"./autocomplete\";\nimport { useStyles } from \"./styles\";\n\nfunction BlmNumericSelect(props) {\n  var _ref;\n\n  const {\n    name = \"select\",\n    min,\n    max,\n    value,\n    label,\n    options,\n    popupIcon = /*#__PURE__*/React.createElement(DropdownImg1, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }),\n    className,\n    popupClassName,\n    onChange\n  } = props;\n  const [inputValue, setInputValue] = useState();\n  const classes = useStyles();\n  const currentValue = (_ref = inputValue !== null && inputValue !== void 0 ? inputValue : value === null || value === void 0 ? void 0 : value.toString()) !== null && _ref !== void 0 ? _ref : \"\";\n\n  const updateChange = str => {\n    let newValue = toNumber(str);\n\n    if (!isNaN(newValue)) {\n      newValue = Math.min(Math.max(newValue, min || -Infinity), max || Infinity);\n    } else {\n      newValue = min;\n    }\n\n    setInputValue(undefined);\n\n    if (onChange && value !== newValue) {\n      onChange({\n        target: {\n          name,\n          value: newValue\n        }\n      });\n    }\n  };\n\n  const getOptionLabel = option => {\n    if (typeof option === \"string\") {\n      return option;\n    }\n\n    return option.value.toString();\n  };\n\n  const getOptionSelected = option => {\n    return currentValue !== \"\" && option.value === toNumber(currentValue);\n  };\n\n  const filterOptions = opts => {\n    return opts;\n  };\n\n  const handleInputChange = (event, newValue, reason) => {\n    const regex = /^[0-9%\\b]+$/;\n\n    if (newValue === \"\" || regex.test(newValue)) {\n      if (reason === \"input\") {\n        setInputValue(newValue);\n      } else {\n        updateChange(newValue);\n      }\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      handleBlur();\n    }\n  };\n\n  const handleBlur = () => {\n    updateChange(currentValue);\n  };\n\n  return /*#__PURE__*/React.createElement(BlmAutoComplete, {\n    freeSolo: true,\n    disableClearable: true,\n    suffix: label,\n    value: currentValue,\n    inputValue: currentValue,\n    options: options || [],\n    forcePopupIcon: options && options.length > 0,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      onBlur: handleBlur,\n      onKeyDown: handleKeyDown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    })),\n    renderOption: opt => opt.label,\n    popupIcon: popupIcon,\n    className: clsx(classes.root, className),\n    popupClassName: popupClassName,\n    getOptionLabel: getOptionLabel,\n    getOptionSelected: getOptionSelected,\n    filterOptions: filterOptions,\n    onInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default BlmNumericSelect;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/numeric-select/BlmNumericSelect.tsx"],"names":["React","useState","clsx","TextField","DropdownImg1","toNumber","BlmAutoComplete","useStyles","BlmNumericSelect","props","name","min","max","value","label","options","popupIcon","className","popupClassName","onChange","inputValue","setInputValue","classes","currentValue","toString","updateChange","str","newValue","isNaN","Math","Infinity","undefined","target","getOptionLabel","option","getOptionSelected","filterOptions","opts","handleInputChange","event","reason","regex","test","handleKeyDown","key","handleBlur","length","params","opt","root"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, ReactNode, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nimport { CustomChangeEvent } from \"types\";\r\nimport { DropdownImg1 } from \"assets/icons\";\r\nimport { toNumber } from \"utils\";\r\nimport BlmAutoComplete from \"./autocomplete\";\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport type NumericSelectChangeEvent = CustomChangeEvent<number | undefined>;\r\nexport type NumericSelectOption = { label: string; value: number };\r\n\r\nexport interface CompProps {\r\n  name?: string;\r\n  min?: number;\r\n  max?: number;\r\n  value?: number;\r\n  label?: string;\r\n  options?: NumericSelectOption[];\r\n  popupIcon?: ReactNode;\r\n  className?: string;\r\n  popupClassName?: string;\r\n  onChange?: (event: NumericSelectChangeEvent) => void;\r\n}\r\n\r\nfunction BlmNumericSelect(props: CompProps) {\r\n  const {\r\n    name = \"select\",\r\n    min,\r\n    max,\r\n    value,\r\n    label,\r\n    options,\r\n    popupIcon = <DropdownImg1 />,\r\n    className,\r\n    popupClassName,\r\n    onChange,\r\n  } = props;\r\n  const [inputValue, setInputValue] = useState<string>();\r\n  const classes = useStyles();\r\n  const currentValue = inputValue ?? value?.toString() ?? \"\";\r\n\r\n  const updateChange = (str: string) => {\r\n    let newValue: number | undefined = toNumber(str);\r\n\r\n    if (!isNaN(newValue)) {\r\n      newValue = Math.min(Math.max(newValue, min || -Infinity), max || Infinity);\r\n    } else {\r\n      newValue = min;\r\n    }\r\n\r\n    setInputValue(undefined);\r\n\r\n    if (onChange && value !== newValue) {\r\n      onChange({ target: { name, value: newValue } });\r\n    }\r\n  };\r\n\r\n  const getOptionLabel = (option: NumericSelectOption) => {\r\n    if (typeof option === \"string\") {\r\n      return option;\r\n    }\r\n    return option.value.toString();\r\n  };\r\n\r\n  const getOptionSelected = (option: NumericSelectOption) => {\r\n    return currentValue !== \"\" && option.value === toNumber(currentValue);\r\n  };\r\n\r\n  const filterOptions = (opts: NumericSelectOption[]) => {\r\n    return opts;\r\n  };\r\n\r\n  const handleInputChange = (event: ChangeEvent<any>, newValue: string, reason: string) => {\r\n    const regex = /^[0-9%\\b]+$/;\r\n\r\n    if (newValue === \"\" || regex.test(newValue)) {\r\n      if (reason === \"input\") {\r\n        setInputValue(newValue);\r\n      } else {\r\n        updateChange(newValue);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      handleBlur();\r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    updateChange(currentValue);\r\n  };\r\n\r\n  return (\r\n    <BlmAutoComplete\r\n      freeSolo\r\n      disableClearable\r\n      suffix={label}\r\n      value={currentValue}\r\n      inputValue={currentValue}\r\n      options={options || []}\r\n      forcePopupIcon={options && options.length > 0}\r\n      renderInput={(params) => (\r\n        <TextField {...params} variant=\"outlined\" onBlur={handleBlur} onKeyDown={handleKeyDown} />\r\n      )}\r\n      renderOption={(opt) => opt.label}\r\n      popupIcon={popupIcon}\r\n      className={clsx(classes.root, className)}\r\n      popupClassName={popupClassName}\r\n      getOptionLabel={getOptionLabel}\r\n      getOptionSelected={getOptionSelected}\r\n      filterOptions={filterOptions}\r\n      onInputChange={handleInputChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BlmNumericSelect;\r\n"]},"metadata":{},"sourceType":"module"}