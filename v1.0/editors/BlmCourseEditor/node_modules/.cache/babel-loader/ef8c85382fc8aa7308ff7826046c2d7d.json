{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar adjustBlockDepthForContentState = require(\"./adjustBlockDepthForContentState\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n\nvar RichTextEditorUtil = {\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n    var selection = editorState.getSelection();\n    var contentState = editorState.getCurrentContent();\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\n      var entity = v.getEntity();\n      return !!entity && contentState.getEntity(entity).getType() === 'LINK';\n    });\n  },\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\n    var selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  },\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n    return {\n      url: uri.toString()\n    };\n  },\n  handleKeyCommand: function handleKeyCommand(editorState, command, eventTimeStamp) {\n    switch (command) {\n      case 'bold':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\n\n      case 'italic':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\n\n      case 'underline':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\n\n      case 'strikethrough':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'STRIKETHROUGH');\n\n      case 'code':\n        return RichTextEditorUtil.toggleCode(editorState);\n\n      case 'backspace':\n      case 'backspace-word':\n      case 'backspace-to-start-of-line':\n        return RichTextEditorUtil.onBackspace(editorState);\n\n      case 'delete':\n      case 'delete-word':\n      case 'delete-to-end-of-block':\n        return RichTextEditorUtil.onDelete(editorState);\n\n      default:\n        // they may have custom editor commands; ignore those\n        return null;\n    }\n  },\n  insertSoftNewline: function insertSoftNewline(editorState) {\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\n', editorState.getCurrentInlineStyle(), null);\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n  },\n\n  /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */\n  onBackspace: function onBackspace(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n      return null;\n    } // First, try to remove a preceding atomic block.\n\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var blockBefore = content.getBlockBefore(startKey);\n\n    if (blockBefore && blockBefore.getType() === 'atomic') {\n      var blockMap = content.getBlockMap()[\"delete\"](blockBefore.getKey());\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n\n      if (withoutAtomicBlock !== content) {\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n      }\n    } // If that doesn't succeed, try to remove the current block style.\n\n\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n\n    if (withoutBlockStyle) {\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n    }\n\n    return null;\n  },\n  onDelete: function onDelete(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed()) {\n      return null;\n    }\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var block = content.getBlockForKey(startKey);\n    var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.\n\n    if (selection.getStartOffset() < length) {\n      return null;\n    }\n\n    var blockAfter = content.getBlockAfter(startKey);\n\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\n      return null;\n    }\n\n    var atomicBlockTarget = selection.merge({\n      focusKey: blockAfter.getKey(),\n      focusOffset: blockAfter.getLength()\n    });\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\n\n    if (withoutAtomicBlock !== content) {\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n\n    return null;\n  },\n  onTab: function onTab(event, editorState) {\n    var selection = editorState.getSelection();\n    var key = selection.getAnchorKey();\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(key);\n    var type = block.getType();\n\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    event.preventDefault();\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1);\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\n  },\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var target = selection; // Triple-click can lead to a selection that includes offset 0 of the\n    // following block. The `SelectionState` for this case is accurate, but\n    // we should avoid toggling block type for the trailing block because it\n    // is a confusing interaction.\n\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\n      endKey = blockBefore.getKey();\n      target = target.merge({\n        anchorKey: startKey,\n        anchorOffset: selection.getStartOffset(),\n        focusKey: endKey,\n        focusOffset: blockBefore.getLength(),\n        isBackward: false\n      });\n    }\n\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\n      return k !== startKey;\n    }).reverse().skipWhile(function (_, k) {\n      return k !== endKey;\n    }).some(function (v) {\n      return v.getType() === 'atomic';\n    });\n\n    if (hasAtomicBlock) {\n      return editorState;\n    }\n\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\n  },\n  toggleCode: function toggleCode(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\n    }\n\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\n  },\n\n  /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n    var selection = editorState.getSelection();\n    var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and\n    // set the result as the new inline style override. This will then be\n    // used as the inline style for the next character to be inserted.\n\n    if (selection.isCollapsed()) {\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n    } // If characters are selected, immediately apply or remove the\n    // inline style on the document state itself.\n\n\n    var content = editorState.getCurrentContent();\n    var newContent; // If the style is already present for the selection range, remove it.\n    // Otherwise, apply it.\n\n    if (currentStyle.has(inlineStyle)) {\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n    } else {\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n    }\n\n    return EditorState.push(editorState, newContent, 'change-inline-style');\n  },\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\n  },\n\n  /**\n   * When a collapsed cursor is at the start of a styled block, changes block\n   * type to 'unstyled'. Returns null if selection does not meet that criteria.\n   */\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n    var selection = editorState.getSelection();\n    var offset = selection.getAnchorOffset();\n\n    if (selection.isCollapsed() && offset === 0) {\n      var key = selection.getAnchorKey();\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(key);\n      var type = block.getType();\n      var blockBefore = content.getBlockBefore(key);\n\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\n        return null;\n      }\n\n      if (type !== 'unstyled') {\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\n      }\n    }\n\n    return null;\n  }\n};\nmodule.exports = RichTextEditorUtil;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/node_modules/draft-js/lib/RichTextEditorUtil.js"],"names":["DraftModifier","require","EditorState","adjustBlockDepthForContentState","nullthrows","RichTextEditorUtil","currentBlockContainsLink","editorState","selection","getSelection","contentState","getCurrentContent","getBlockForKey","getAnchorKey","getCharacterList","slice","getStartOffset","getEndOffset","some","v","entity","getEntity","getType","getCurrentBlockType","getStartKey","getDataObjectForLinkURL","uri","url","toString","handleKeyCommand","command","eventTimeStamp","toggleInlineStyle","toggleCode","onBackspace","onDelete","insertSoftNewline","insertText","getCurrentInlineStyle","newEditorState","push","forceSelection","getSelectionAfter","isCollapsed","getAnchorOffset","getFocusOffset","content","startKey","blockBefore","getBlockBefore","blockMap","getBlockMap","getKey","withoutAtomicBlock","merge","selectionAfter","withoutBlockStyle","tryToRemoveBlockStyle","block","length","getLength","blockAfter","getBlockAfter","atomicBlockTarget","focusKey","focusOffset","removeRange","onTab","event","key","type","preventDefault","withAdjustment","shiftKey","toggleBlockType","blockType","endKey","getEndKey","target","anchorKey","anchorOffset","isBackward","hasAtomicBlock","skipWhile","_","k","reverse","typeToSet","setBlockType","getFocusKey","inlineStyle","currentStyle","setInlineStyleOverride","has","remove","add","newContent","removeInlineStyle","applyInlineStyle","toggleLink","targetSelection","entityKey","withoutLink","applyEntity","offset","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @oncall draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar adjustBlockDepthForContentState = require(\"./adjustBlockDepthForContentState\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n\nvar RichTextEditorUtil = {\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n    var selection = editorState.getSelection();\n    var contentState = editorState.getCurrentContent();\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\n      var entity = v.getEntity();\n      return !!entity && contentState.getEntity(entity).getType() === 'LINK';\n    });\n  },\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\n    var selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  },\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n    return {\n      url: uri.toString()\n    };\n  },\n  handleKeyCommand: function handleKeyCommand(editorState, command, eventTimeStamp) {\n    switch (command) {\n      case 'bold':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\n\n      case 'italic':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\n\n      case 'underline':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\n\n      case 'strikethrough':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'STRIKETHROUGH');\n\n      case 'code':\n        return RichTextEditorUtil.toggleCode(editorState);\n\n      case 'backspace':\n      case 'backspace-word':\n      case 'backspace-to-start-of-line':\n        return RichTextEditorUtil.onBackspace(editorState);\n\n      case 'delete':\n      case 'delete-word':\n      case 'delete-to-end-of-block':\n        return RichTextEditorUtil.onDelete(editorState);\n\n      default:\n        // they may have custom editor commands; ignore those\n        return null;\n    }\n  },\n  insertSoftNewline: function insertSoftNewline(editorState) {\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\n', editorState.getCurrentInlineStyle(), null);\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n  },\n\n  /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */\n  onBackspace: function onBackspace(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n      return null;\n    } // First, try to remove a preceding atomic block.\n\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var blockBefore = content.getBlockBefore(startKey);\n\n    if (blockBefore && blockBefore.getType() === 'atomic') {\n      var blockMap = content.getBlockMap()[\"delete\"](blockBefore.getKey());\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n\n      if (withoutAtomicBlock !== content) {\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n      }\n    } // If that doesn't succeed, try to remove the current block style.\n\n\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n\n    if (withoutBlockStyle) {\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n    }\n\n    return null;\n  },\n  onDelete: function onDelete(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed()) {\n      return null;\n    }\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var block = content.getBlockForKey(startKey);\n    var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.\n\n    if (selection.getStartOffset() < length) {\n      return null;\n    }\n\n    var blockAfter = content.getBlockAfter(startKey);\n\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\n      return null;\n    }\n\n    var atomicBlockTarget = selection.merge({\n      focusKey: blockAfter.getKey(),\n      focusOffset: blockAfter.getLength()\n    });\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\n\n    if (withoutAtomicBlock !== content) {\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n\n    return null;\n  },\n  onTab: function onTab(event, editorState) {\n    var selection = editorState.getSelection();\n    var key = selection.getAnchorKey();\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(key);\n    var type = block.getType();\n\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    event.preventDefault();\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1);\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\n  },\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var target = selection; // Triple-click can lead to a selection that includes offset 0 of the\n    // following block. The `SelectionState` for this case is accurate, but\n    // we should avoid toggling block type for the trailing block because it\n    // is a confusing interaction.\n\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\n      endKey = blockBefore.getKey();\n      target = target.merge({\n        anchorKey: startKey,\n        anchorOffset: selection.getStartOffset(),\n        focusKey: endKey,\n        focusOffset: blockBefore.getLength(),\n        isBackward: false\n      });\n    }\n\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\n      return k !== startKey;\n    }).reverse().skipWhile(function (_, k) {\n      return k !== endKey;\n    }).some(function (v) {\n      return v.getType() === 'atomic';\n    });\n\n    if (hasAtomicBlock) {\n      return editorState;\n    }\n\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\n  },\n  toggleCode: function toggleCode(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\n    }\n\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\n  },\n\n  /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n    var selection = editorState.getSelection();\n    var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and\n    // set the result as the new inline style override. This will then be\n    // used as the inline style for the next character to be inserted.\n\n    if (selection.isCollapsed()) {\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n    } // If characters are selected, immediately apply or remove the\n    // inline style on the document state itself.\n\n\n    var content = editorState.getCurrentContent();\n    var newContent; // If the style is already present for the selection range, remove it.\n    // Otherwise, apply it.\n\n    if (currentStyle.has(inlineStyle)) {\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n    } else {\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n    }\n\n    return EditorState.push(editorState, newContent, 'change-inline-style');\n  },\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\n  },\n\n  /**\n   * When a collapsed cursor is at the start of a styled block, changes block\n   * type to 'unstyled'. Returns null if selection does not meet that criteria.\n   */\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n    var selection = editorState.getSelection();\n    var offset = selection.getAnchorOffset();\n\n    if (selection.isCollapsed() && offset === 0) {\n      var key = selection.getAnchorKey();\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(key);\n      var type = block.getType();\n      var blockBefore = content.getBlockBefore(key);\n\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\n        return null;\n      }\n\n      if (type !== 'unstyled') {\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\n      }\n    }\n\n    return null;\n  }\n};\nmodule.exports = RichTextEditorUtil;"]},"metadata":{},"sourceType":"script"}