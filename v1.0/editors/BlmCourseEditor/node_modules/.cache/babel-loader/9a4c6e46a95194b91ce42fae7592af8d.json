{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\animation\\\\BlmAnimation.tsx\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { useTranslation } from \"react-i18next\";\nimport { AcceptedFileTypes } from \"editor-constants\";\nimport { BlmMediaPicker } from \"components/shared\";\nimport BlmTranslationEditor from \"./tranaslation\";\nimport BlmOptionsEditor from \"./options\";\nimport BlmAnimationAttachment from \"./attachment\";\nimport \"./styles.scss\";\n\nfunction BlmAnimation(props) {\n  const {\n    elementId,\n    data,\n    animations,\n    getAnimation,\n    updateAnimation,\n    onChange\n  } = props;\n  const [currentAnimation, setCurrentAnimation] = useState();\n  const [isTranslationOpen, setIsTranslationOpen] = useState(false);\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n  const {\n    translations,\n    options,\n    attachments\n  } = currentAnimation || {};\n  const mediaId = data === null || data === void 0 ? void 0 : data.id;\n  const {\n    t\n  } = useTranslation(\"shared\");\n  useEffect(() => {\n    if (mediaId) {\n      if (animations[mediaId]) {\n        setCurrentAnimation(animations[mediaId]);\n      } else {\n        getAnimation(mediaId);\n      }\n    } else {\n      setCurrentAnimation(undefined);\n    }\n  }, [mediaId, animations, getAnimation]);\n\n  const handlePreviewClick = () => {\n    if (data) {\n      window.open(data.url + \"/\" + data.rootFile, \"_blank\");\n    }\n  };\n\n  const handleTranslateClick = () => {\n    setIsTranslationOpen(true);\n  };\n\n  const handleTranslationSave = newTranslations => {\n    if (mediaId && newTranslations) {\n      updateAnimation(mediaId, {\n        translations: newTranslations\n      });\n    }\n  };\n\n  const handleTranslationClose = () => {\n    setIsTranslationOpen(false);\n  };\n\n  const handleOptionsClick = () => {\n    setIsOptionsOpen(true);\n  };\n\n  const handleOptionsSave = newOptions => {\n    if (mediaId && newOptions) {\n      updateAnimation(mediaId, {\n        options: newOptions\n      });\n    }\n  };\n\n  const handleOptionsClose = () => {\n    setIsOptionsOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animation-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlmMediaPicker, {\n    name: \"media\",\n    elementId: elementId,\n    acceptedFiles: [AcceptedFileTypes.Zip],\n    data: data,\n    replaceZone: \"display\",\n    className: \"zip-picker-1 animation-media-picker\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), data && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animation-preview-btn\",\n    onClick: handlePreviewClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, t(\"animation.preview\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"animation-translate-btn\", {\n      disabled: !translations || translations.length === 0\n    }),\n    onClick: handleTranslateClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, t(\"animation.translate\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"animation-options-btn\", {\n      disabled: !options\n    }),\n    onClick: handleOptionsClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, t(\"animation.option\"))), attachments && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animation-attachments-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animation-attachments-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, t(\"animation.attached_media\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animation-attachments-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, t(\"animation.click_to_replace\")), attachments.map((attachment, ind) => /*#__PURE__*/React.createElement(BlmAnimationAttachment, {\n    key: ind,\n    id: mediaId,\n    data: attachment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }))), translations && isTranslationOpen && /*#__PURE__*/React.createElement(BlmTranslationEditor, {\n    open: isTranslationOpen,\n    data: translations,\n    onSave: handleTranslationSave,\n    onClose: handleTranslationClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), options && isOptionsOpen && /*#__PURE__*/React.createElement(BlmOptionsEditor, {\n    open: isOptionsOpen,\n    data: options,\n    onSave: handleOptionsSave,\n    onClose: handleOptionsClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default BlmAnimation;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/animation/BlmAnimation.tsx"],"names":["React","Fragment","useEffect","useState","clsx","useTranslation","AcceptedFileTypes","BlmMediaPicker","BlmTranslationEditor","BlmOptionsEditor","BlmAnimationAttachment","BlmAnimation","props","elementId","data","animations","getAnimation","updateAnimation","onChange","currentAnimation","setCurrentAnimation","isTranslationOpen","setIsTranslationOpen","isOptionsOpen","setIsOptionsOpen","translations","options","attachments","mediaId","id","t","undefined","handlePreviewClick","window","open","url","rootFile","handleTranslateClick","handleTranslationSave","newTranslations","handleTranslationClose","handleOptionsClick","handleOptionsSave","newOptions","handleOptionsClose","Zip","disabled","length","map","attachment","ind"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { AnimationMedia, AnimationOptions, AnimationTranslation, MediaFile } from \"types\";\r\nimport { AcceptedFileTypes } from \"editor-constants\";\r\nimport { BlmMediaPicker, MediaPickerChangeEvent } from \"components/shared\";\r\nimport BlmTranslationEditor from \"./tranaslation\";\r\nimport BlmOptionsEditor from \"./options\";\r\nimport BlmAnimationAttachment from \"./attachment\";\r\nimport { ContainerProps } from \"./container\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps extends ContainerProps {\r\n  elementId: string;\r\n  data?: MediaFile | null;\r\n  onChange: (event: MediaPickerChangeEvent) => void;\r\n}\r\n\r\nfunction BlmAnimation(props: CompProps) {\r\n  const { elementId, data, animations, getAnimation, updateAnimation, onChange } = props;\r\n  const [currentAnimation, setCurrentAnimation] = useState<AnimationMedia>();\r\n  const [isTranslationOpen, setIsTranslationOpen] = useState(false);\r\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\r\n  const { translations, options, attachments } = currentAnimation || {};\r\n  const mediaId = data?.id;\r\n  const { t } = useTranslation(\"shared\");\r\n\r\n  useEffect(() => {\r\n    if (mediaId) {\r\n      if (animations[mediaId]) {\r\n        setCurrentAnimation(animations[mediaId]);\r\n      } else {\r\n        getAnimation(mediaId);\r\n      }\r\n    } else {\r\n      setCurrentAnimation(undefined);\r\n    }\r\n  }, [mediaId, animations, getAnimation]);\r\n\r\n  const handlePreviewClick = () => {\r\n    if (data) {\r\n      window.open(data.url + \"/\" + data.rootFile, \"_blank\");\r\n    }\r\n  };\r\n\r\n  const handleTranslateClick = () => {\r\n    setIsTranslationOpen(true);\r\n  };\r\n\r\n  const handleTranslationSave = (newTranslations: AnimationTranslation[]) => {\r\n    if (mediaId && newTranslations) {\r\n      updateAnimation(mediaId, { translations: newTranslations });\r\n    }\r\n  };\r\n\r\n  const handleTranslationClose = () => {\r\n    setIsTranslationOpen(false);\r\n  };\r\n\r\n  const handleOptionsClick = () => {\r\n    setIsOptionsOpen(true);\r\n  };\r\n\r\n  const handleOptionsSave = (newOptions: AnimationOptions) => {\r\n    if (mediaId && newOptions) {\r\n      updateAnimation(mediaId, { options: newOptions });\r\n    }\r\n  };\r\n\r\n  const handleOptionsClose = () => {\r\n    setIsOptionsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"animation-wrapper\">\r\n      <BlmMediaPicker\r\n        name=\"media\"\r\n        elementId={elementId}\r\n        acceptedFiles={[AcceptedFileTypes.Zip]}\r\n        data={data}\r\n        replaceZone=\"display\"\r\n        className=\"zip-picker-1 animation-media-picker\"\r\n        onChange={onChange}\r\n      />\r\n      {data && (\r\n        <Fragment>\r\n          <div className=\"animation-preview-btn\" onClick={handlePreviewClick}>\r\n            {t(\"animation.preview\")}\r\n          </div>\r\n          <div\r\n            className={clsx(\"animation-translate-btn\", {\r\n              disabled: !translations || translations.length === 0,\r\n            })}\r\n            onClick={handleTranslateClick}\r\n          >\r\n            {t(\"animation.translate\")}\r\n          </div>\r\n          <div\r\n            className={clsx(\"animation-options-btn\", {\r\n              disabled: !options,\r\n            })}\r\n            onClick={handleOptionsClick}\r\n          >\r\n            {t(\"animation.option\")}\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n      {attachments && (\r\n        <div className=\"animation-attachments-wrapper\">\r\n          <div className=\"animation-attachments-title\">{t(\"animation.attached_media\")}</div>\r\n          <div className=\"animation-attachments-lbl\">{t(\"animation.click_to_replace\")}</div>\r\n          {attachments.map((attachment, ind) => (\r\n            <BlmAnimationAttachment key={ind} id={mediaId!} data={attachment} />\r\n          ))}\r\n        </div>\r\n      )}\r\n      {translations && isTranslationOpen && (\r\n        <BlmTranslationEditor\r\n          open={isTranslationOpen}\r\n          data={translations}\r\n          onSave={handleTranslationSave}\r\n          onClose={handleTranslationClose}\r\n        />\r\n      )}\r\n      {options && isOptionsOpen && (\r\n        <BlmOptionsEditor\r\n          open={isOptionsOpen}\r\n          data={options}\r\n          onSave={handleOptionsSave}\r\n          onClose={handleOptionsClose}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmAnimation;\r\n"]},"metadata":{},"sourceType":"module"}