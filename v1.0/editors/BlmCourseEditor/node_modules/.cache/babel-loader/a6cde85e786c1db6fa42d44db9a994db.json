{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\media\\\\synchro-video\\\\BlmSynchroVideo.tsx\";\nimport React, { Fragment, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { useTranslation } from \"react-i18next\";\nimport { AcceptedFileTypes, MediaTypes } from \"editor-constants\";\nimport { getMediaSynchroVideo, isJSON } from \"utils\";\nimport { BlmToggleButton } from \"shared\";\nimport { BlmBaseMediaEditor, BlmMediaPicker } from \"components/shared\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport { updateMediaComponent } from \"components/content-editor/reducers\";\nimport BlmMediaDashboard from \"../dashboard\";\nimport \"./styles.scss\";\n\nfunction BlmSynchroVideo(props) {\n  const {\n    data\n  } = props;\n  const state = getMediaSynchroVideo(data);\n  const [type, setType] = useState(MediaTypes.Main);\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const {\n    element,\n    dispatch\n  } = useContentEditorCtx();\n  const {\n    value: synchro\n  } = state;\n  const {\n    main,\n    webm,\n    labels,\n    contents,\n    [type]: media\n  } = synchro;\n  const hasMain = Boolean(main);\n  const hasLottie = main ? isJSON(main.type) : false;\n  const hasVideoSelected = main ? true : false;\n  const {\n    t\n  } = useTranslation(\"content-editor\");\n\n  const updateChange = newSynchro => {\n    const newData = { ...state,\n      value: newSynchro\n    };\n\n    if (dispatch) {\n      dispatch(updateMediaComponent(newData));\n    }\n  };\n\n  const handleTypeChange = event => {\n    const target = event.target;\n    const {\n      name\n    } = target;\n    setType(name);\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    const newSynchro = { ...synchro\n    };\n\n    if (name === \"main\" || name === \"webm\") {\n      newSynchro[name] = value;\n    }\n\n    updateChange(newSynchro);\n  };\n\n  const handleEditClick = () => {\n    setIsEditorOpen(true);\n  };\n\n  const handleEditorSave = (newLabels, newContents) => {\n    if (newLabels && newContents) {\n      const newSynchro = { ...synchro,\n        labels: newLabels,\n        contents: newContents\n      };\n      updateChange(newSynchro);\n    }\n\n    setIsEditorOpen(false);\n  };\n\n  const handleEditorClose = () => {\n    setIsEditorOpen(false);\n  };\n\n  const getAcceptedTypes = () => {\n    if (type === MediaTypes.Webm) {\n      return [AcceptedFileTypes.Webm];\n    } else {\n      return [AcceptedFileTypes.Video, AcceptedFileTypes.JSON];\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(BlmMediaDashboard, {\n    data: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-synchro-video-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"synchro-video-params-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, t(\"title.parameters\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"synchro-video-main-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BlmMediaPicker, {\n    name: type,\n    elementId: element.id,\n    acceptedFiles: getAcceptedTypes(),\n    data: media,\n    previewZone: hasLottie ? \"none\" : \"display\",\n    showEdit: false,\n    className: \"media-picker-3\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }), !hasLottie && hasVideoSelected && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: MediaTypes.Main,\n    selected: type === MediaTypes.Main,\n    className: clsx(\"mp4-toggle-btn\", {\n      media: hasMain\n    }),\n    onChange: handleTypeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, \"Mp4\"), /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: MediaTypes.Webm,\n    disabled: !hasMain,\n    selected: type === MediaTypes.Webm,\n    className: clsx(\"webm-toggle-btn\", {\n      media: Boolean(webm)\n    }),\n    onChange: handleTypeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"Webm\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"synchro-video-markers-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, t(\"synchro.synchro\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"synchro-video-edit-btn\", {\n      disabled: !hasMain\n    }),\n    onClick: handleEditClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, t(\"button.edit\")), isEditorOpen && main && /*#__PURE__*/React.createElement(BlmBaseMediaEditor, {\n    open: isEditorOpen,\n    type: \"synchro-video\",\n    elementId: element.id,\n    data: main,\n    peaks: [],\n    cues1: labels,\n    cues2: contents,\n    onSave: handleEditorSave,\n    onClose: handleEditorClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default BlmSynchroVideo;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/media/synchro-video/BlmSynchroVideo.tsx"],"names":["React","Fragment","useState","clsx","useTranslation","AcceptedFileTypes","MediaTypes","getMediaSynchroVideo","isJSON","BlmToggleButton","BlmBaseMediaEditor","BlmMediaPicker","useContentEditorCtx","updateMediaComponent","BlmMediaDashboard","BlmSynchroVideo","props","data","state","type","setType","Main","isEditorOpen","setIsEditorOpen","element","dispatch","value","synchro","main","webm","labels","contents","media","hasMain","Boolean","hasLottie","hasVideoSelected","t","updateChange","newSynchro","newData","handleTypeChange","event","target","name","handleChange","handleEditClick","handleEditorSave","newLabels","newContents","handleEditorClose","getAcceptedTypes","Webm","Video","JSON","id","disabled"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CustomChangeEvent, MediaComponent, MediaFile, MediaTrackCue, SynchroVideo } from \"types\";\r\nimport { AcceptedFileTypes, MediaTypes } from \"editor-constants\";\r\nimport { getMediaSynchroVideo, isJSON } from \"utils\";\r\nimport { BlmToggleButton } from \"shared\";\r\nimport { BlmBaseMediaEditor, BlmMediaPicker } from \"components/shared\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport { updateMediaComponent } from \"components/content-editor/reducers\";\r\nimport BlmMediaDashboard from \"../dashboard\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  label: string;\r\n  data: MediaComponent;\r\n}\r\n\r\ntype SynchroMediaTypes = Exclude<MediaTypes, MediaTypes.Image>;\r\n\r\nfunction BlmSynchroVideo(props: CompProps) {\r\n  const { data } = props;\r\n  const state = getMediaSynchroVideo(data);\r\n  const [type, setType] = useState<SynchroMediaTypes>(MediaTypes.Main);\r\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\r\n  const { element, dispatch } = useContentEditorCtx();\r\n  const { value: synchro } = state;\r\n  const { main, webm, labels, contents, [type]: media } = synchro;\r\n  const hasMain = Boolean(main);\r\n  const hasLottie = main ? isJSON(main.type) : false;\r\n  const hasVideoSelected = main ? true : false;\r\n  const { t } = useTranslation(\"content-editor\");\r\n\r\n  const updateChange = (newSynchro: SynchroVideo) => {\r\n    const newData = { ...state, value: newSynchro };\r\n\r\n    if (dispatch) {\r\n      dispatch(updateMediaComponent(newData));\r\n    }\r\n  };\r\n\r\n  const handleTypeChange = (event: CustomChangeEvent<boolean>) => {\r\n    const target = event.target;\r\n    const { name } = target;\r\n\r\n    setType(name as SynchroMediaTypes);\r\n  };\r\n\r\n  const handleChange = (event: CustomChangeEvent<MediaFile | undefined>) => {\r\n    const { name, value } = event.target;\r\n    const newSynchro = { ...synchro };\r\n\r\n    if (name === \"main\" || name === \"webm\") {\r\n      newSynchro[name] = value;\r\n    }\r\n\r\n    updateChange(newSynchro);\r\n  };\r\n\r\n  const handleEditClick = () => {\r\n    setIsEditorOpen(true);\r\n  };\r\n\r\n  const handleEditorSave = (newLabels?: MediaTrackCue[], newContents?: MediaTrackCue[]) => {\r\n    if (newLabels && newContents) {\r\n      const newSynchro = { ...synchro, labels: newLabels, contents: newContents };\r\n\r\n      updateChange(newSynchro);\r\n    }\r\n\r\n    setIsEditorOpen(false);\r\n  };\r\n\r\n  const handleEditorClose = () => {\r\n    setIsEditorOpen(false);\r\n  };\r\n\r\n  const getAcceptedTypes = () => {\r\n    if (type === MediaTypes.Webm) {\r\n      return [AcceptedFileTypes.Webm];\r\n    } else {\r\n      return [AcceptedFileTypes.Video, AcceptedFileTypes.JSON];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BlmMediaDashboard data={state}>\r\n      <div className=\"content-synchro-video-wrapper\">\r\n        <div className=\"synchro-video-params-title\">{t(\"title.parameters\")}</div>\r\n        <div className=\"synchro-video-main-wrapper\">\r\n          <BlmMediaPicker\r\n            name={type}\r\n            elementId={element!.id}\r\n            acceptedFiles={getAcceptedTypes()}\r\n            data={media}\r\n            previewZone={hasLottie ? \"none\" : \"display\"}\r\n            showEdit={false}\r\n            className=\"media-picker-3\"\r\n            onChange={handleChange}\r\n          />\r\n          {!hasLottie && hasVideoSelected && (\r\n            <Fragment>\r\n              <BlmToggleButton\r\n                name={MediaTypes.Main}\r\n                selected={type === MediaTypes.Main}\r\n                className={clsx(\"mp4-toggle-btn\", { media: hasMain })}\r\n                onChange={handleTypeChange}\r\n              >\r\n                Mp4\r\n              </BlmToggleButton>\r\n              <BlmToggleButton\r\n                name={MediaTypes.Webm}\r\n                disabled={!hasMain}\r\n                selected={type === MediaTypes.Webm}\r\n                className={clsx(\"webm-toggle-btn\", { media: Boolean(webm) })}\r\n                onChange={handleTypeChange}\r\n              >\r\n                Webm\r\n              </BlmToggleButton>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n        <div className=\"synchro-video-markers-title\">{t(\"synchro.synchro\")}</div>\r\n        <div\r\n          className={clsx(\"synchro-video-edit-btn\", { disabled: !hasMain })}\r\n          onClick={handleEditClick}\r\n        >\r\n          {t(\"button.edit\")}\r\n        </div>\r\n        {isEditorOpen && main && (\r\n          <BlmBaseMediaEditor\r\n            open={isEditorOpen}\r\n            type=\"synchro-video\"\r\n            elementId={element!.id}\r\n            data={main}\r\n            peaks={[]}\r\n            cues1={labels}\r\n            cues2={contents}\r\n            onSave={handleEditorSave}\r\n            onClose={handleEditorClose}\r\n          />\r\n        )}\r\n      </div>\r\n    </BlmMediaDashboard>\r\n  );\r\n}\r\n\r\nexport default BlmSynchroVideo;\r\n"]},"metadata":{},"sourceType":"module"}