{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\styles\\\\button\\\\BlmStyleApplyButton.tsx\";\nimport React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { hasSameComponentStyles } from \"utils\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport { applyComponentStyle } from \"components/content-editor/reducers\";\nimport \"./styles.scss\";\n\nfunction BlmStyleApplyButton(props) {\n  const {\n    label,\n    styleName,\n    style,\n    showIcon,\n    onClick\n  } = props;\n  const {\n    template,\n    component,\n    dispatch\n  } = useContentEditorCtx();\n  const showApplyIcon = useMemo(() => {\n    return showIcon !== null && showIcon !== void 0 ? showIcon : hasSameComponentStyles(template, component);\n  }, [showIcon, template, component]);\n\n  const handleClick = () => {\n    if (!showApplyIcon) {\n      if (onClick && styleName) {\n        onClick(styleName);\n      } else if (dispatch) {\n        dispatch(applyComponentStyle(styleName, style));\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"style-picker-apply-btn\", {\n      \"show-icon\": showApplyIcon\n    }),\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, label, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"style-picker-feedback-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default BlmStyleApplyButton;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/styles/button/BlmStyleApplyButton.tsx"],"names":["React","useMemo","clsx","hasSameComponentStyles","useContentEditorCtx","applyComponentStyle","BlmStyleApplyButton","props","label","styleName","style","showIcon","onClick","template","component","dispatch","showApplyIcon","handleClick"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,SAASC,sBAAT,QAAuC,OAAvC;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,OAAO,eAAP;;AAUA,SAASC,mBAAT,CAA6BC,KAA7B,EAA+C;AAC7C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA;AAArC,MAAiDL,KAAvD;AACA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAAoCX,mBAAmB,EAA7D;AAEA,QAAMY,aAAa,GAAGf,OAAO,CAAC,MAAM;AAClC,WAAOU,QAAP,aAAOA,QAAP,cAAOA,QAAP,GAAmBR,sBAAsB,CAACU,QAAD,EAAYC,SAAZ,CAAzC;AACD,GAF4B,EAE1B,CAACH,QAAD,EAAWE,QAAX,EAAqBC,SAArB,CAF0B,CAA7B;;AAIA,QAAMG,WAAW,GAAG,MAAM;AACxB,QAAI,CAACD,aAAL,EAAoB;AAClB,UAAIJ,OAAO,IAAIH,SAAf,EAA0B;AACxBG,QAAAA,OAAO,CAACH,SAAD,CAAP;AACD,OAFD,MAEO,IAAIM,QAAJ,EAAc;AACnBA,QAAAA,QAAQ,CAACV,mBAAmB,CAACI,SAAD,EAAYC,KAAZ,CAApB,CAAR;AACD;AACF;AACF,GARD;;AAUA,sBACE;AACE,IAAA,SAAS,EAAER,IAAI,CAAC,wBAAD,EAA2B;AACxC,mBAAac;AAD2B,KAA3B,CADjB;AAIE,IAAA,OAAO,EAAEC,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGT,KANH,eAOE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD;;AAED,eAAeF,mBAAf","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { ComponentStyle } from \"types\";\r\nimport { hasSameComponentStyles } from \"utils\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport { applyComponentStyle } from \"components/content-editor/reducers\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  label?: string;\r\n  styleName?: string;\r\n  style?: ComponentStyle;\r\n  showIcon?: boolean;\r\n  onClick?: (styleName: string) => void;\r\n}\r\n\r\nfunction BlmStyleApplyButton(props: CompProps) {\r\n  const { label, styleName, style, showIcon, onClick } = props;\r\n  const { template, component, dispatch } = useContentEditorCtx();\r\n\r\n  const showApplyIcon = useMemo(() => {\r\n    return showIcon ?? hasSameComponentStyles(template!, component!);\r\n  }, [showIcon, template, component]);\r\n\r\n  const handleClick = () => {\r\n    if (!showApplyIcon) {\r\n      if (onClick && styleName) {\r\n        onClick(styleName);\r\n      } else if (dispatch) {\r\n        dispatch(applyComponentStyle(styleName, style));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\"style-picker-apply-btn\", {\r\n        \"show-icon\": showApplyIcon,\r\n      })}\r\n      onClick={handleClick}\r\n    >\r\n      {label}\r\n      <div className=\"style-picker-feedback-icon\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmStyleApplyButton;\r\n"]},"metadata":{},"sourceType":"module"}