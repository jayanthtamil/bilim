{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\media-editor\\\\components\\\\player\\\\BlmMediaPlayer.tsx\";\nimport React, { useRef, forwardRef, memo, useImperativeHandle, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { Player } from \"@lottiefiles/react-lottie-player\";\nimport { MediaPlayerTypes } from \"editor-constants\";\nimport { isMediaElement, isMediaPlaying } from \"../../utils\";\nimport { useMediaEditorContext } from \"../context\";\nimport \"./styles.scss\";\n\nconst BlmMediaPlayer = (props, ref) => {\n  const {\n    src,\n    onTimeChange,\n    onDurationChange\n  } = props;\n  const [lottie, setLottie] = useState();\n  const mediaRef = useRef(null);\n  const {\n    playerType\n  } = useMediaEditorContext();\n  useImperativeHandle(ref, () => ({\n    element: mediaRef.current,\n    lottie,\n    isPlaying,\n    pause,\n    seek\n  }), [lottie]);\n\n  const isPlaying = () => {\n    const media = mediaRef.current;\n    return media ? isMediaPlaying(media) : false;\n  };\n\n  const play = () => {\n    var _mediaRef$current;\n\n    (_mediaRef$current = mediaRef.current) === null || _mediaRef$current === void 0 ? void 0 : _mediaRef$current.play();\n  };\n\n  const pause = () => {\n    var _mediaRef$current2;\n\n    (_mediaRef$current2 = mediaRef.current) === null || _mediaRef$current2 === void 0 ? void 0 : _mediaRef$current2.pause();\n  };\n\n  const seek = time => {\n    const media = mediaRef.current;\n\n    if (!media) {\n      return;\n    }\n\n    if (isMediaElement(media)) {\n      media.currentTime = time;\n    } else {\n      media === null || media === void 0 ? void 0 : media.setSeeker(time);\n    }\n  };\n\n  const togglePlay = () => {\n    if (isPlaying()) {\n      pause();\n    } else {\n      play();\n    }\n  };\n\n  const handleTimeUpdate = () => {\n    const media = mediaRef.current;\n\n    if (media && onTimeChange) {\n      onTimeChange(media.currentTime);\n    }\n  };\n\n  const handleDurationChange = () => {\n    const media = mediaRef.current;\n\n    if (media && onDurationChange) {\n      onDurationChange(media.duration);\n    }\n  };\n\n  const handleLottieEvent = event => {\n    if (!lottie) {\n      return;\n    }\n\n    if (event === \"load\" && onDurationChange) {\n      onDurationChange(lottie.totalFrames);\n    } else if (event === \"frame\" && onTimeChange) {\n      onTimeChange(lottie.currentFrame);\n    }\n  };\n\n  const handleClick = () => {\n    togglePlay();\n  };\n\n  const renderChildren = () => {\n    if (playerType === MediaPlayerTypes.Audio) {\n      return /*#__PURE__*/React.createElement(\"audio\", {\n        ref: mediaRef,\n        src: src,\n        onClick: handleClick,\n        onTimeUpdate: handleTimeUpdate,\n        onDurationChange: handleDurationChange,\n        controls: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      });\n    } else if (playerType === MediaPlayerTypes.Video) {\n      return /*#__PURE__*/React.createElement(\"video\", {\n        ref: mediaRef,\n        src: src,\n        onClick: handleClick,\n        onTimeUpdate: handleTimeUpdate,\n        onDurationChange: handleDurationChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      });\n    } else if (playerType === MediaPlayerTypes.Lottie) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"lottie-player-wrapper\",\n        onClick: handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Player, {\n        ref: mediaRef,\n        lottieRef: instance => setLottie(instance),\n        src: src,\n        autoplay: false,\n        loop: false,\n        controls: true,\n        keepLastFrame: false,\n        onEvent: handleLottieEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"media-player\", playerType),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 10\n    }\n  }, renderChildren());\n};\n\nexport default memo(forwardRef(BlmMediaPlayer));","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/media-editor/components/player/BlmMediaPlayer.tsx"],"names":["React","useRef","forwardRef","memo","useImperativeHandle","useState","clsx","Player","MediaPlayerTypes","isMediaElement","isMediaPlaying","useMediaEditorContext","BlmMediaPlayer","props","ref","src","onTimeChange","onDurationChange","lottie","setLottie","mediaRef","playerType","element","current","isPlaying","pause","seek","media","play","time","currentTime","setSeeker","togglePlay","handleTimeUpdate","handleDurationChange","duration","handleLottieEvent","event","totalFrames","currentFrame","handleClick","renderChildren","Audio","Video","Lottie","instance"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  forwardRef,\r\n  memo,\r\n  useImperativeHandle,\r\n  ForwardRefRenderFunction,\r\n  RefObject,\r\n  useState,\r\n} from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { AnimationItem } from \"lottie-web\";\r\nimport { Player, PlayerEvent } from \"@lottiefiles/react-lottie-player\";\r\n\r\nimport { MediaPlayerTypes } from \"editor-constants\";\r\nimport { isMediaElement, isMediaPlaying } from \"../../utils\";\r\nimport { useMediaEditorContext } from \"../context\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  src: string;\r\n  onTimeChange?: (time: number) => void;\r\n  onDurationChange?: (duration: number) => void;\r\n}\r\n\r\nexport interface MediaPlayerRef {\r\n  element: HTMLMediaElement | Player | null;\r\n  lottie?: AnimationItem;\r\n  isPlaying: () => boolean;\r\n  pause: () => void;\r\n  seek: (time: number) => void;\r\n}\r\n\r\nconst BlmMediaPlayer: ForwardRefRenderFunction<MediaPlayerRef, CompProps> = (props, ref) => {\r\n  const { src, onTimeChange, onDurationChange } = props;\r\n  const [lottie, setLottie] = useState<AnimationItem>();\r\n  const mediaRef = useRef<HTMLMediaElement | Player>(null);\r\n  const { playerType } = useMediaEditorContext();\r\n\r\n  useImperativeHandle(\r\n    ref,\r\n    () => ({\r\n      element: mediaRef.current,\r\n      lottie,\r\n      isPlaying,\r\n      pause,\r\n      seek,\r\n    }),\r\n    [lottie]\r\n  );\r\n\r\n  const isPlaying = () => {\r\n    const media = mediaRef.current;\r\n\r\n    return media ? isMediaPlaying(media) : false;\r\n  };\r\n\r\n  const play = () => {\r\n    mediaRef.current?.play();\r\n  };\r\n\r\n  const pause = () => {\r\n    mediaRef.current?.pause();\r\n  };\r\n\r\n  const seek = (time: number) => {\r\n    const media = mediaRef.current;\r\n\r\n    if (!media) {\r\n      return;\r\n    }\r\n\r\n    if (isMediaElement(media)) {\r\n      media.currentTime = time;\r\n    } else {\r\n      media?.setSeeker(time);\r\n    }\r\n  };\r\n\r\n  const togglePlay = () => {\r\n    if (isPlaying()) {\r\n      pause();\r\n    } else {\r\n      play();\r\n    }\r\n  };\r\n\r\n  const handleTimeUpdate = () => {\r\n    const media = mediaRef.current as HTMLMediaElement;\r\n\r\n    if (media && onTimeChange) {\r\n      onTimeChange(media.currentTime);\r\n    }\r\n  };\r\n\r\n  const handleDurationChange = () => {\r\n    const media = mediaRef.current as HTMLMediaElement;\r\n\r\n    if (media && onDurationChange) {\r\n      onDurationChange(media.duration);\r\n    }\r\n  };\r\n\r\n  const handleLottieEvent = (event: PlayerEvent) => {\r\n    if (!lottie) {\r\n      return;\r\n    }\r\n\r\n    if (event === \"load\" && onDurationChange) {\r\n      onDurationChange(lottie.totalFrames);\r\n    } else if (event === \"frame\" && onTimeChange) {\r\n      onTimeChange(lottie.currentFrame);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    togglePlay();\r\n  };\r\n\r\n  const renderChildren = () => {\r\n    if (playerType === MediaPlayerTypes.Audio) {\r\n      return (\r\n        <audio\r\n          ref={mediaRef as RefObject<HTMLAudioElement>}\r\n          src={src}\r\n          onClick={handleClick}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          onDurationChange={handleDurationChange}\r\n          controls\r\n        />\r\n      );\r\n    } else if (playerType === MediaPlayerTypes.Video) {\r\n      return (\r\n        <video\r\n          ref={mediaRef as RefObject<HTMLVideoElement>}\r\n          src={src}\r\n          onClick={handleClick}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          onDurationChange={handleDurationChange}\r\n        />\r\n      );\r\n    } else if (playerType === MediaPlayerTypes.Lottie) {\r\n      return (\r\n        <div className=\"lottie-player-wrapper\" onClick={handleClick}>\r\n          <Player\r\n            ref={mediaRef as RefObject<Player>}\r\n            lottieRef={(instance) => setLottie(instance)}\r\n            src={src}\r\n            autoplay={false}\r\n            loop={false}\r\n            controls={true}\r\n            keepLastFrame={false}\r\n            onEvent={handleLottieEvent}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return <div className={clsx(\"media-player\", playerType)}>{renderChildren()}</div>;\r\n};\r\n\r\nexport default memo(forwardRef(BlmMediaPlayer));\r\n"]},"metadata":{},"sourceType":"module"}