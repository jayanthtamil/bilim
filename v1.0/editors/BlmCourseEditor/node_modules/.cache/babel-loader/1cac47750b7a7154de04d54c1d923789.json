{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\sound\\\\BlmSound.tsx\";\nimport React, { Fragment, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { StyleListTypes, AcceptedFileTypes, MediaTypes, ElementType } from \"editor-constants\";\nimport { BlmToggleButton } from \"shared\";\nimport { BlmMediaPicker, BlmMediaEditor } from \"components/shared\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport { updateSoundComponent } from \"components/content-editor/reducers\";\nimport { BlmStyleTintPicker } from \"../styles\";\nimport \"./styles.scss\";\n\nfunction BlmSound(props) {\n  const {\n    data\n  } = props;\n  const {\n    element,\n    dispatch\n  } = useContentEditorCtx();\n  const [type, setType] = useState(MediaTypes.Main);\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const {\n    value: sound,\n    hasApplyStyle\n  } = data;\n  const {\n    media,\n    image,\n    autoPlay,\n    localPlay,\n    title,\n    description,\n    caption,\n    style\n  } = sound;\n  const hasMedia = Boolean(media);\n  const [name, types, main] = type === MediaTypes.Image ? [\"image\", [AcceptedFileTypes.Image], image] : [\"media\", [AcceptedFileTypes.Audio], media];\n\n  const updateChange = newSound => {\n    const newData = { ...data,\n      value: newSound\n    };\n\n    if (dispatch) {\n      dispatch(updateSoundComponent(newData));\n    }\n  };\n\n  const {\n    t\n  } = useTranslation(\"content-editor\");\n\n  const handleTypeChange = event => {\n    const target = event.target;\n    const {\n      name\n    } = target;\n    setType(name);\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value,\n      checked\n    } = event.target;\n    const newSound = { ...sound\n    };\n\n    if (name === \"media\" || name === \"image\" || name === \"title\" || name === \"description\" || name === \"caption\" || name === \"style\") {\n      newSound[name] = value;\n    } else if (name === \"autoPlay\" || name === \"localPlay\") {\n      newSound[name] = !checked;\n    }\n\n    updateChange(newSound);\n  };\n\n  const handleEditClick = () => {\n    setIsEditorOpen(true);\n  };\n\n  const handleEditorSave = newMedia => {\n    const newSound = { ...sound,\n      media: newMedia\n    };\n    updateChange(newSound);\n    setIsEditorOpen(false);\n  };\n\n  const handleEditorClose = () => {\n    setIsEditorOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-sound-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-params-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-params-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, t(\"title.parameters\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-params-options-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sound-autoplay-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, t(\"label.auto_start\")), /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"autoPlay\",\n    label: t(\"style.click_play\"),\n    checked: !autoPlay,\n    control: /*#__PURE__*/React.createElement(Switch, {\n      className: \"switch-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 22\n      }\n    }),\n    className: \"sound-autoplay-ctrl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-params-main-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-params-media-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BlmMediaPicker, {\n    name: name,\n    elementId: element.id,\n    acceptedFiles: types,\n    data: main,\n    showEdit: false,\n    placeholder: \"Select media\",\n    className: \"sound-picker-3\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: MediaTypes.Main,\n    selected: type === MediaTypes.Main,\n    className: clsx(\"mp3-toggle-btn\", {\n      media: hasMedia\n    }),\n    onChange: handleTypeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, t(\"sound.mp3\")), /*#__PURE__*/React.createElement(BlmToggleButton, {\n    name: MediaTypes.Image,\n    disabled: !hasMedia,\n    selected: type === MediaTypes.Image,\n    className: clsx(\"img-toggle-btn\", {\n      media: Boolean(image)\n    }),\n    onChange: handleTypeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, t(\"button.thumbnail\"))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    placeholder: t(\"label.title\"),\n    value: title,\n    className: \"sound-params-title-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"description\",\n    placeholder: t(\"label.description\"),\n    value: description,\n    className: \"sound-params-desc-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"caption\",\n    placeholder: t(\"label.caption\"),\n    value: caption,\n    className: \"sound-params-caption-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-subtitle-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, t(\"subtitle_marker.sub_marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"sound-subtitle-edit-btn\", {\n      disabled: !hasMedia\n    }),\n    onClick: handleEditClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, t(\"button.edit\")), hasMedia && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BlmMediaEditor, {\n    open: isEditorOpen,\n    data: media,\n    elementId: element.id,\n    onSave: handleEditorSave,\n    onClose: handleEditorClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-styles-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-styles-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, t(\"title.style\")), !(element === null || element === void 0 ? void 0 : element.name.includes(\"snd\")) && ((element === null || element === void 0 ? void 0 : element.type) === ElementType.PartPage || (element === null || element === void 0 ? void 0 : element.type) === ElementType.SimplePartPage) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sound-styles-options-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sound-localplay-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 19\n    }\n  }, t(\"sound.play_partpage\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }), t(\"sound.in_complete\")), /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"localPlay\",\n    label: t(\"sound.play_globally\"),\n    checked: !localPlay,\n    control: /*#__PURE__*/React.createElement(Switch, {\n      className: \"switch-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 30\n      }\n    }),\n    className: \"sound-localplay-ctrl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(BlmStyleTintPicker, {\n    type: StyleListTypes.Sound,\n    name: \"style\",\n    data: style,\n    showBgTint: true,\n    label: t(\"sound.apply_style\"),\n    showApplyStyle: hasApplyStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default BlmSound;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/sound/BlmSound.tsx"],"names":["React","Fragment","useState","clsx","FormControlLabel","Switch","useTranslation","StyleListTypes","AcceptedFileTypes","MediaTypes","ElementType","BlmToggleButton","BlmMediaPicker","BlmMediaEditor","useContentEditorCtx","updateSoundComponent","BlmStyleTintPicker","BlmSound","props","data","element","dispatch","type","setType","Main","isEditorOpen","setIsEditorOpen","value","sound","hasApplyStyle","media","image","autoPlay","localPlay","title","description","caption","style","hasMedia","Boolean","name","types","main","Image","Audio","updateChange","newSound","newData","t","handleTypeChange","event","target","handleChange","checked","handleEditClick","handleEditorSave","newMedia","handleEditorClose","id","disabled","includes","PartPage","SimplePartPage","Sound"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, Fragment, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { ComponentStyle, CustomChangeEvent, MediaFile, SoundComponent, SoundValue } from \"types\";\r\nimport { StyleListTypes, AcceptedFileTypes, MediaTypes, ElementType } from \"editor-constants\";\r\nimport { BlmToggleButton } from \"shared\";\r\nimport { BlmMediaPicker, BlmMediaEditor } from \"components/shared\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport { updateSoundComponent } from \"components/content-editor/reducers\";\r\nimport { BlmStyleTintPicker } from \"../styles\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  data: SoundComponent;\r\n}\r\n\r\nfunction BlmSound(props: CompProps) {\r\n  const { data } = props;\r\n  const { element, dispatch } = useContentEditorCtx();\r\n  const [type, setType] = useState(MediaTypes.Main);\r\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\r\n  const { value: sound, hasApplyStyle } = data;\r\n  const { media, image, autoPlay, localPlay, title, description, caption, style } = sound;\r\n  const hasMedia = Boolean(media);\r\n  const [name, types, main] =\r\n    type === MediaTypes.Image\r\n      ? [\"image\", [AcceptedFileTypes.Image], image]\r\n      : [\"media\", [AcceptedFileTypes.Audio], media];\r\n\r\n  const updateChange = (newSound: SoundValue) => {\r\n    const newData = { ...data, value: newSound };\r\n\r\n    if (dispatch) {\r\n      dispatch(updateSoundComponent(newData));\r\n    }\r\n  };\r\n  const { t } = useTranslation(\"content-editor\");\r\n\r\n  const handleTypeChange = (event: CustomChangeEvent<boolean>) => {\r\n    const target = event.target;\r\n    const { name } = target;\r\n\r\n    setType(name as MediaTypes);\r\n  };\r\n\r\n  const handleChange = (\r\n    event: ChangeEvent<any> | CustomChangeEvent<MediaFile | ComponentStyle | undefined>\r\n  ) => {\r\n    const {\r\n      name,\r\n      value,\r\n      checked,\r\n    }: {\r\n      name: string;\r\n      value: any;\r\n      checked: boolean;\r\n    } = event.target;\r\n    const newSound = { ...sound };\r\n\r\n    if (\r\n      name === \"media\" ||\r\n      name === \"image\" ||\r\n      name === \"title\" ||\r\n      name === \"description\" ||\r\n      name === \"caption\" ||\r\n      name === \"style\"\r\n    ) {\r\n      newSound[name] = value;\r\n    } else if (name === \"autoPlay\" || name === \"localPlay\") {\r\n      newSound[name] = !checked;\r\n    }\r\n\r\n    updateChange(newSound);\r\n  };\r\n\r\n  const handleEditClick = () => {\r\n    setIsEditorOpen(true);\r\n  };\r\n\r\n  const handleEditorSave = (newMedia: MediaFile) => {\r\n    const newSound = { ...sound, media: newMedia };\r\n\r\n    updateChange(newSound);\r\n\r\n    setIsEditorOpen(false);\r\n  };\r\n\r\n  const handleEditorClose = () => {\r\n    setIsEditorOpen(false);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"content-sound-wrapper\">\r\n      <div className=\"sound-params-wrapper\">\r\n        <div className=\"sound-params-title\">{t(\"title.parameters\")}</div>\r\n        <div className=\"sound-params-options-wrapper\">\r\n          <span className=\"sound-autoplay-lbl\">{t(\"label.auto_start\")}</span>\r\n          <FormControlLabel\r\n            name=\"autoPlay\"\r\n            label={t(\"style.click_play\")}\r\n            checked={!autoPlay}\r\n            control={<Switch className=\"switch-1\" />}\r\n            className=\"sound-autoplay-ctrl\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"sound-params-main-wrapper\">\r\n          <div className=\"sound-params-media-wrapper\">\r\n            <BlmMediaPicker\r\n              name={name}\r\n              elementId={element!.id}\r\n              acceptedFiles={types}\r\n              data={main}\r\n              showEdit={false}\r\n              placeholder=\"Select media\"\r\n              className=\"sound-picker-3\"\r\n              onChange={handleChange}\r\n            />\r\n            <BlmToggleButton\r\n              name={MediaTypes.Main}\r\n              selected={type === MediaTypes.Main}\r\n              className={clsx(\"mp3-toggle-btn\", { media: hasMedia })}\r\n              onChange={handleTypeChange}\r\n            >\r\n              {t(\"sound.mp3\")}\r\n            </BlmToggleButton>\r\n            <BlmToggleButton\r\n              name={MediaTypes.Image}\r\n              disabled={!hasMedia}\r\n              selected={type === MediaTypes.Image}\r\n              className={clsx(\"img-toggle-btn\", { media: Boolean(image) })}\r\n              onChange={handleTypeChange}\r\n            >\r\n              {t(\"button.thumbnail\")}\r\n            </BlmToggleButton>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            placeholder={t(\"label.title\")}\r\n            value={title}\r\n            className=\"sound-params-title-txt\"\r\n            onChange={handleChange}\r\n          />\r\n          <textarea\r\n            name=\"description\"\r\n            placeholder={t(\"label.description\")}\r\n            value={description}\r\n            className=\"sound-params-desc-txt\"\r\n            onChange={handleChange}\r\n          />\r\n          <textarea\r\n            name=\"caption\"\r\n            placeholder={t(\"label.caption\")}\r\n            value={caption}\r\n            className=\"sound-params-caption-txt\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"sound-subtitle-title\">{t(\"subtitle_marker.sub_marker\")}</div>\r\n      <div\r\n        className={clsx(\"sound-subtitle-edit-btn\", { disabled: !hasMedia })}\r\n        onClick={handleEditClick}\r\n      >\r\n        {t(\"button.edit\")}\r\n      </div>\r\n      {hasMedia && (\r\n        <Fragment>\r\n          <BlmMediaEditor\r\n            open={isEditorOpen}\r\n            data={media!}\r\n            elementId={element!.id}\r\n            onSave={handleEditorSave}\r\n            onClose={handleEditorClose}\r\n          />\r\n          <div className=\"sound-styles-wrapper\">\r\n            <div className=\"sound-styles-title\">{t(\"title.style\")}</div>\r\n            {!element?.name.includes(\"snd\") &&\r\n              (element?.type === ElementType.PartPage ||\r\n                element?.type === ElementType.SimplePartPage) && (\r\n                <div className=\"sound-styles-options-wrapper\">\r\n                  <span className=\"sound-localplay-lbl\">\r\n                    {t(\"sound.play_partpage\")}\r\n                    <br />\r\n                    {t(\"sound.in_complete\")}\r\n                  </span>\r\n                  <FormControlLabel\r\n                    name=\"localPlay\"\r\n                    label={t(\"sound.play_globally\")}\r\n                    checked={!localPlay}\r\n                    control={<Switch className=\"switch-1\" />}\r\n                    className=\"sound-localplay-ctrl\"\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n              )}\r\n            <BlmStyleTintPicker\r\n              type={StyleListTypes.Sound}\r\n              name=\"style\"\r\n              data={style}\r\n              showBgTint={true}\r\n              label={t(\"sound.apply_style\")}\r\n              showApplyStyle={hasApplyStyle}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmSound;\r\n"]},"metadata":{},"sourceType":"module"}