{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\question-editor\\\\panels\\\\feedback\\\\BlmQuestionFeedback.tsx\";\nimport React from \"react\";\nimport { Select, MenuItem } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { QuestionFeedbackTypes } from \"editor-constants\";\nimport { isQuestionPropositions } from \"utils\";\nimport { Tabs } from \"shared/material-ui\";\nimport { BlmGlobalFeedback, BlmDetailedFeedback, BlmFeedbackDashboard } from \"components/question-editor/components\";\nimport { updateQuestionFeedback } from \"components/question-editor/reducers\";\nimport \"./styles.scss\";\n\nconst getFeedbackType = (data, isSCQ) => {\n  switch (data.type) {\n    case QuestionFeedbackTypes.Basic:\n    case QuestionFeedbackTypes.Embedded:\n    case QuestionFeedbackTypes.Flap:\n    case QuestionFeedbackTypes.Detailed:\n      return QuestionFeedbackTypes.Global;\n\n    default:\n      return isSCQ ? data.type : QuestionFeedbackTypes.None;\n  }\n};\n\nconst tabs = [QuestionFeedbackTypes.Basic, QuestionFeedbackTypes.Embedded, QuestionFeedbackTypes.Flap, QuestionFeedbackTypes.Detailed];\n\nconst getTabPanelIndex = data => {\n  const ind = tabs.findIndex(item => item === data.tabType);\n  return ind !== -1 ? ind : 0;\n};\n\nfunction BlmQuestionFeedback(props) {\n  var _main$content$value;\n\n  const {\n    data,\n    main,\n    dispatch\n  } = props;\n  const {\n    disableEmbedded\n  } = data;\n  const isSCQ = isQuestionPropositions(main.content) && ((_main$content$value = main.content.value) === null || _main$content$value === void 0 ? void 0 : _main$content$value.isMCQ) || false;\n  const type = getFeedbackType(data, !isSCQ);\n  const {\n    t\n  } = useTranslation(\"question-editor\");\n\n  const updateChange = newData => {\n    if (dispatch) {\n      dispatch(updateQuestionFeedback(newData));\n    }\n  };\n\n  const handleChange = event => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    const newData = { ...data\n    };\n\n    if (name === \"type\") {\n      if (value === QuestionFeedbackTypes.Global) {\n        newData.type = QuestionFeedbackTypes.Basic;\n      } else {\n        newData.type = value;\n      }\n    }\n\n    updateChange(newData);\n  };\n\n  const handleTabChange = index => {\n    const newData = { ...data\n    };\n    newData.type = tabs[index];\n    newData.tabType = newData.type;\n    updateChange(newData);\n  };\n\n  const handleGlobalChange = global => {\n    const newData = { ...data\n    };\n    newData.global = global;\n    updateChange(newData);\n  };\n\n  const handleDetailedChange = detailed => {\n    const newData = { ...data\n    };\n    newData.detailed = detailed;\n    updateChange(newData);\n  };\n\n  const renderTabPanel = () => {\n    const selectedIndex = getTabPanelIndex(data);\n    const {\n      global,\n      detailed\n    } = data;\n    return /*#__PURE__*/React.createElement(Tabs, {\n      selectedIndex: selectedIndex,\n      className: \"question-feedback-tab-panel\",\n      onTabChange: handleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(BlmFeedbackDashboard, {\n      label: t(\"feedback.tabs.basic\"),\n      type: QuestionFeedbackTypes.Basic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BlmGlobalFeedback, {\n      data: global,\n      type: QuestionFeedbackTypes.Basic,\n      onChange: handleGlobalChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(BlmFeedbackDashboard, {\n      label: t(\"feedback.tabs.embedded\"),\n      type: QuestionFeedbackTypes.Embedded,\n      disabled: disableEmbedded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BlmGlobalFeedback, {\n      type: QuestionFeedbackTypes.Embedded,\n      data: global,\n      onChange: handleGlobalChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(BlmFeedbackDashboard, {\n      label: t(\"feedback.tabs.flap\"),\n      type: QuestionFeedbackTypes.Flap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BlmGlobalFeedback, {\n      type: QuestionFeedbackTypes.Flap,\n      data: global,\n      onChange: handleGlobalChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(BlmFeedbackDashboard, {\n      label: t(\"feedback.tabs.detailed\"),\n      type: QuestionFeedbackTypes.Detailed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BlmDetailedFeedback, {\n      data: detailed,\n      onChange: handleDetailedChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-feedback-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"type\",\n    value: type,\n    className: \"question-feedback-dropdown\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: QuestionFeedbackTypes.None,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, t(\"feedback.feedback_opt.none\")), !isSCQ && /*#__PURE__*/React.createElement(MenuItem, {\n    value: QuestionFeedbackTypes.Propositions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, t(\"feedback.feedback_opt.per_posiotion\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: QuestionFeedbackTypes.Global,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, t(\"feedback.feedback_opt.global_feedback\"))), type === QuestionFeedbackTypes.Propositions && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-feedback-proposition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-feedback-proposition-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-feedback-proposition-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, t(\"feedback.feedback_opt.fill_up\"))), type === QuestionFeedbackTypes.Global && renderTabPanel());\n}\n\nexport default BlmQuestionFeedback;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/question-editor/panels/feedback/BlmQuestionFeedback.tsx"],"names":["React","Select","MenuItem","useTranslation","QuestionFeedbackTypes","isQuestionPropositions","Tabs","BlmGlobalFeedback","BlmDetailedFeedback","BlmFeedbackDashboard","updateQuestionFeedback","getFeedbackType","data","isSCQ","type","Basic","Embedded","Flap","Detailed","Global","None","tabs","getTabPanelIndex","ind","findIndex","item","tabType","BlmQuestionFeedback","props","main","dispatch","disableEmbedded","content","value","isMCQ","t","updateChange","newData","handleChange","event","target","name","handleTabChange","index","handleGlobalChange","global","handleDetailedChange","detailed","renderTabPanel","selectedIndex","Propositions"],"mappings":"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","sourcesContent":["import React, { ChangeEvent } from \"react\";\r\nimport { Select, MenuItem } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport {\r\n  QuestionFeedback,\r\n  QuestionGlobalFeedback,\r\n  QuestionMain,\r\n  QuestionDetailedFeedback,\r\n} from \"types\";\r\nimport { QuestionFeedbackTypes } from \"editor-constants\";\r\nimport { isQuestionPropositions } from \"utils\";\r\nimport { Tabs } from \"shared/material-ui\";\r\nimport {\r\n  BlmGlobalFeedback,\r\n  BlmDetailedFeedback,\r\n  BlmFeedbackDashboard,\r\n} from \"components/question-editor/components\";\r\nimport {\r\n  QuestionEditorDispatch,\r\n  updateQuestionFeedback,\r\n} from \"components/question-editor/reducers\";\r\nimport \"./styles.scss\";\r\n\r\ninterface CompProps {\r\n  data: QuestionFeedback;\r\n  main: QuestionMain;\r\n  dispatch: QuestionEditorDispatch;\r\n}\r\n\r\nconst getFeedbackType = (data: QuestionFeedback, isSCQ: boolean) => {\r\n  switch (data.type) {\r\n    case QuestionFeedbackTypes.Basic:\r\n    case QuestionFeedbackTypes.Embedded:\r\n    case QuestionFeedbackTypes.Flap:\r\n    case QuestionFeedbackTypes.Detailed:\r\n      return QuestionFeedbackTypes.Global;\r\n    default:\r\n      return isSCQ ? data.type : QuestionFeedbackTypes.None;\r\n  }\r\n};\r\n\r\nconst tabs = [\r\n  QuestionFeedbackTypes.Basic,\r\n  QuestionFeedbackTypes.Embedded,\r\n  QuestionFeedbackTypes.Flap,\r\n  QuestionFeedbackTypes.Detailed,\r\n];\r\n\r\nconst getTabPanelIndex = (data: QuestionFeedback) => {\r\n  const ind = tabs.findIndex((item) => item === data.tabType);\r\n\r\n  return ind !== -1 ? ind : 0;\r\n};\r\n\r\nfunction BlmQuestionFeedback(props: CompProps) {\r\n  const { data, main, dispatch } = props;\r\n  const { disableEmbedded } = data;\r\n  const isSCQ = (isQuestionPropositions(main.content) && main.content.value?.isMCQ) || false;\r\n  const type = getFeedbackType(data, !isSCQ);\r\n  const { t } = useTranslation(\"question-editor\");\r\n\r\n  const updateChange = (newData: QuestionFeedback) => {\r\n    if (dispatch) {\r\n      dispatch(updateQuestionFeedback(newData));\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<any>) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    const newData: QuestionFeedback = { ...data };\r\n\r\n    if (name === \"type\") {\r\n      if (value === QuestionFeedbackTypes.Global) {\r\n        newData.type = QuestionFeedbackTypes.Basic;\r\n      } else {\r\n        newData.type = value;\r\n      }\r\n    }\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const handleTabChange = (index: number) => {\r\n    const newData = { ...data };\r\n\r\n    newData.type = tabs[index];\r\n    newData.tabType = newData.type;\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const handleGlobalChange = (global: QuestionGlobalFeedback) => {\r\n    const newData = { ...data };\r\n\r\n    newData.global = global;\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const handleDetailedChange = (detailed: QuestionDetailedFeedback) => {\r\n    const newData = { ...data };\r\n\r\n    newData.detailed = detailed;\r\n\r\n    updateChange(newData);\r\n  };\r\n\r\n  const renderTabPanel = () => {\r\n    const selectedIndex = getTabPanelIndex(data);\r\n    const { global, detailed } = data;\r\n\r\n    return (\r\n      <Tabs\r\n        selectedIndex={selectedIndex}\r\n        className=\"question-feedback-tab-panel\"\r\n        onTabChange={handleTabChange}\r\n      >\r\n        <BlmFeedbackDashboard label={t(\"feedback.tabs.basic\")} type={QuestionFeedbackTypes.Basic}>\r\n          <BlmGlobalFeedback\r\n            data={global}\r\n            type={QuestionFeedbackTypes.Basic}\r\n            onChange={handleGlobalChange}\r\n          />\r\n        </BlmFeedbackDashboard>\r\n        <BlmFeedbackDashboard\r\n          label={t(\"feedback.tabs.embedded\")}\r\n          type={QuestionFeedbackTypes.Embedded}\r\n          disabled={disableEmbedded}\r\n        >\r\n          <BlmGlobalFeedback\r\n            type={QuestionFeedbackTypes.Embedded}\r\n            data={global}\r\n            onChange={handleGlobalChange}\r\n          />\r\n        </BlmFeedbackDashboard>\r\n        <BlmFeedbackDashboard label={t(\"feedback.tabs.flap\")} type={QuestionFeedbackTypes.Flap}>\r\n          <BlmGlobalFeedback\r\n            type={QuestionFeedbackTypes.Flap}\r\n            data={global}\r\n            onChange={handleGlobalChange}\r\n          />\r\n        </BlmFeedbackDashboard>\r\n        <BlmFeedbackDashboard\r\n          label={t(\"feedback.tabs.detailed\")}\r\n          type={QuestionFeedbackTypes.Detailed}\r\n        >\r\n          <BlmDetailedFeedback data={detailed} onChange={handleDetailedChange} />\r\n        </BlmFeedbackDashboard>\r\n      </Tabs>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-feedback-wrapper\">\r\n      <Select\r\n        name=\"type\"\r\n        value={type}\r\n        className=\"question-feedback-dropdown\"\r\n        onChange={handleChange}\r\n      >\r\n        <MenuItem value={QuestionFeedbackTypes.None}>{t(\"feedback.feedback_opt.none\")}</MenuItem>\r\n        {!isSCQ && (\r\n          <MenuItem value={QuestionFeedbackTypes.Propositions}>\r\n            {t(\"feedback.feedback_opt.per_posiotion\")}\r\n          </MenuItem>\r\n         )} \r\n        <MenuItem value={QuestionFeedbackTypes.Global}>\r\n          {t(\"feedback.feedback_opt.global_feedback\")}\r\n        </MenuItem>\r\n      </Select>\r\n      {type === QuestionFeedbackTypes.Propositions && (\r\n        <div className=\"question-feedback-proposition\">\r\n          <div className=\"question-feedback-proposition-icon\" />\r\n          <div className=\"question-feedback-proposition-text\">\r\n            {t(\"feedback.feedback_opt.fill_up\")}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {type === QuestionFeedbackTypes.Global && renderTabPanel()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmQuestionFeedback;\r\n"]},"metadata":{},"sourceType":"module"}