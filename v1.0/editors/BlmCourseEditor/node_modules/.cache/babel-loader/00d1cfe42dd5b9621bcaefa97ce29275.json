{"ast":null,"code":"import { getStyleSheet, getStyleSheetRule } from \"utils\";\nimport { createTint } from \"../core\";\nexport const GlTemplateBuilderStore = (() => {\n  let template;\n  let styles;\n  let isUpdated = false;\n  const store = {\n    setTemplate: pTemplate => template = pTemplate,\n    getTemplate: () => template,\n    setStyles: pStyles => styles = pStyles,\n    getStyles: () => styles,\n    updateStyles: (element, filename) => {\n      if (!isUpdated && styles) {\n        const sheet = getStyleSheet(element.ownerDocument, filename);\n\n        if (sheet) {\n          for (const key in styles) {\n            const style = styles[key];\n\n            if (style) {\n              const updateItems = items => {\n                items.forEach(item => {\n                  if (\"items\" in item) {\n                    updateItems(item.items);\n                  } else {\n                    const rule = getStyleSheetRule(sheet, item.className);\n\n                    if (rule) {\n                      item.tint = createTint(rule.style, \"--blm_tint_color\", \"--blm_tint_opacity\");\n                      item.bgTint = createTint(rule.style, \"--blm_undertext_color\", \"--blm_undertext_opacity\");\n                      item.tintOut = createTint(rule.style, \"--tintout\", \"--opacityout\");\n                      item.tintOver = createTint(rule.style, \"--tintover\", \"--opacityover\");\n                    }\n                  }\n                });\n              };\n\n              updateItems(style.items);\n            }\n          }\n\n          isUpdated = true;\n        }\n      }\n    },\n    getStyleItem: styleName => {\n      if (styles) {\n        for (const key in styles) {\n          const style = styles[key];\n\n          if (style) {\n            if (style.classNames.includes(styleName)) {\n              return style.map[styleName];\n            }\n          }\n        }\n      }\n    }\n  };\n  return Object.freeze(store);\n})();","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/store/index.ts"],"names":["getStyleSheet","getStyleSheetRule","createTint","GlTemplateBuilderStore","template","styles","isUpdated","store","setTemplate","pTemplate","getTemplate","setStyles","pStyles","getStyles","updateStyles","element","filename","sheet","ownerDocument","key","style","updateItems","items","forEach","item","rule","className","tint","bgTint","tintOut","tintOver","getStyleItem","styleName","classNames","includes","map","Object","freeze"],"mappings":"AAQA,SAASA,aAAT,EAAwBC,iBAAxB,QAAiD,OAAjD;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,OAAO,MAAMC,sBAAsB,GAAG,CAAC,MAAM;AAC3C,MAAIC,QAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,SAAS,GAAG,KAAhB;AAEA,QAAMC,KAAK,GAAG;AACZC,IAAAA,WAAW,EAAGC,SAAD,IAAwCL,QAAQ,GAAGK,SADpD;AAEZC,IAAAA,WAAW,EAAE,MAAMN,QAFP;AAGZO,IAAAA,SAAS,EAAGC,OAAD,IAAyBP,MAAM,GAAGO,OAHjC;AAIZC,IAAAA,SAAS,EAAE,MAAMR,MAJL;AAKZS,IAAAA,YAAY,EAAE,CAACC,OAAD,EAAuBC,QAAvB,KAA4C;AACxD,UAAI,CAACV,SAAD,IAAcD,MAAlB,EAA0B;AACxB,cAAMY,KAAK,GAAGjB,aAAa,CAACe,OAAO,CAACG,aAAT,EAAwBF,QAAxB,CAA3B;;AAEA,YAAIC,KAAJ,EAAW;AACT,eAAK,MAAME,GAAX,IAAkBd,MAAlB,EAA0B;AACxB,kBAAMe,KAAK,GAAGf,MAAM,CAACc,GAAD,CAApB;;AAEA,gBAAIC,KAAJ,EAAW;AACT,oBAAMC,WAAW,GAAIC,KAAD,IAA2B;AAC7CA,gBAAAA,KAAK,CAACC,OAAN,CAAeC,IAAD,IAA6C;AACzD,sBAAI,WAAWA,IAAf,EAAqB;AACnBH,oBAAAA,WAAW,CAACG,IAAI,CAACF,KAAN,CAAX;AACD,mBAFD,MAEO;AACL,0BAAMG,IAAI,GAAGxB,iBAAiB,CAACgB,KAAD,EAAQO,IAAI,CAACE,SAAb,CAA9B;;AAEA,wBAAID,IAAJ,EAAU;AACRD,sBAAAA,IAAI,CAACG,IAAL,GAAYzB,UAAU,CAACuB,IAAI,CAACL,KAAN,EAAa,kBAAb,EAAiC,oBAAjC,CAAtB;AACAI,sBAAAA,IAAI,CAACI,MAAL,GAAc1B,UAAU,CACtBuB,IAAI,CAACL,KADiB,EAEtB,uBAFsB,EAGtB,yBAHsB,CAAxB;AAKAI,sBAAAA,IAAI,CAACK,OAAL,GAAe3B,UAAU,CAACuB,IAAI,CAACL,KAAN,EAAa,WAAb,EAA0B,cAA1B,CAAzB;AACAI,sBAAAA,IAAI,CAACM,QAAL,GAAgB5B,UAAU,CAACuB,IAAI,CAACL,KAAN,EAAa,YAAb,EAA2B,eAA3B,CAA1B;AACD;AACF;AACF,iBAjBD;AAkBD,eAnBD;;AAqBAC,cAAAA,WAAW,CAACD,KAAK,CAACE,KAAP,CAAX;AACD;AACF;;AAEDhB,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF;AACF,KA1CW;AA2CZyB,IAAAA,YAAY,EAAGC,SAAD,IAAuB;AACnC,UAAI3B,MAAJ,EAAY;AACV,aAAK,MAAMc,GAAX,IAAkBd,MAAlB,EAA0B;AACxB,gBAAMe,KAAK,GAAGf,MAAM,CAACc,GAAD,CAApB;;AAEA,cAAIC,KAAJ,EAAW;AACT,gBAAIA,KAAK,CAACa,UAAN,CAAiBC,QAAjB,CAA0BF,SAA1B,CAAJ,EAA0C;AACxC,qBAAOZ,KAAK,CAACe,GAAN,CAAUH,SAAV,CAAP;AACD;AACF;AACF;AACF;AACF;AAvDW,GAAd;AA0DA,SAAOI,MAAM,CAACC,MAAP,CAAc9B,KAAd,CAAP;AACD,CAhEqC,GAA/B","sourcesContent":["import {\r\n  CourseElementTemplate,\r\n  StyleList,\r\n  StyleListCategory,\r\n  StyleListItem,\r\n  StyleListItems,\r\n} from \"types\";\r\nimport { StyleListTypes } from \"editor-constants\";\r\nimport { getStyleSheet, getStyleSheetRule } from \"utils\";\r\nimport { createTint } from \"../core\";\r\n\r\nexport const GlTemplateBuilderStore = (() => {\r\n  let template: CourseElementTemplate | undefined;\r\n  let styles: StyleList | undefined;\r\n  let isUpdated = false;\r\n\r\n  const store = {\r\n    setTemplate: (pTemplate?: CourseElementTemplate) => (template = pTemplate),\r\n    getTemplate: () => template,\r\n    setStyles: (pStyles: StyleList) => (styles = pStyles),\r\n    getStyles: () => styles,\r\n    updateStyles: (element: HTMLElement, filename: string) => {\r\n      if (!isUpdated && styles) {\r\n        const sheet = getStyleSheet(element.ownerDocument, filename);\r\n\r\n        if (sheet) {\r\n          for (const key in styles) {\r\n            const style = styles[key as StyleListTypes];\r\n\r\n            if (style) {\r\n              const updateItems = (items: StyleListItems) => {\r\n                items.forEach((item: StyleListCategory | StyleListItem) => {\r\n                  if (\"items\" in item) {\r\n                    updateItems(item.items);\r\n                  } else {\r\n                    const rule = getStyleSheetRule(sheet, item.className) as CSSStyleRule;\r\n\r\n                    if (rule) {\r\n                      item.tint = createTint(rule.style, \"--blm_tint_color\", \"--blm_tint_opacity\");\r\n                      item.bgTint = createTint(\r\n                        rule.style,\r\n                        \"--blm_undertext_color\",\r\n                        \"--blm_undertext_opacity\"\r\n                      );\r\n                      item.tintOut = createTint(rule.style, \"--tintout\", \"--opacityout\");\r\n                      item.tintOver = createTint(rule.style, \"--tintover\", \"--opacityover\");\r\n                    }\r\n                  }\r\n                });\r\n              };\r\n\r\n              updateItems(style.items);\r\n            }\r\n          }\r\n\r\n          isUpdated = true;\r\n        }\r\n      }\r\n    },\r\n    getStyleItem: (styleName: string) => {\r\n      if (styles) {\r\n        for (const key in styles) {\r\n          const style = styles[key as StyleListTypes];\r\n\r\n          if (style) {\r\n            if (style.classNames.includes(styleName)) {\r\n              return style.map[styleName];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  return Object.freeze(store);\r\n})();\r\n"]},"metadata":{},"sourceType":"module"}