{"ast":null,"code":"export class DragGeometry {\n  constructor(x = 0, y = 0, width = 0, height = 0, rotation = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.rotation = rotation;\n  }\n\n}\nexport class HandleRoles {\n  static isResize(val) {\n    return HandleRoles.isResizeDown(val) || HandleRoles.isResizeLeft(val) || HandleRoles.isResizeRight(val) || HandleRoles.isResizeUp(val);\n  }\n\n  static isResizeUp(val) {\n    return (val & HandleRoles.RESIZE_UP) === HandleRoles.RESIZE_UP;\n  }\n\n  static isResizeDown(val) {\n    return (val & HandleRoles.RESIZE_DOWN) === HandleRoles.RESIZE_DOWN;\n  }\n\n  static isResizeLeft(val) {\n    return (val & HandleRoles.RESIZE_LEFT) === HandleRoles.RESIZE_LEFT;\n  }\n\n  static isResizeRight(val) {\n    return (val & HandleRoles.RESIZE_RIGHT) === HandleRoles.RESIZE_RIGHT;\n  }\n\n  static isRotate(val) {\n    return (val & HandleRoles.ROTATE) === HandleRoles.ROTATE;\n  }\n\n  static isMove(val) {\n    return (val & HandleRoles.MOVE) === HandleRoles.MOVE;\n  }\n\n}\nHandleRoles.NO_ROLE = 0;\nHandleRoles.RESIZE_UP = 1;\nHandleRoles.RESIZE_DOWN = 2;\nHandleRoles.RESIZE_LEFT = 4;\nHandleRoles.RESIZE_RIGHT = 8;\nHandleRoles.ROTATE = 16;\nHandleRoles.MOVE = 32;\nexport class Point {\n  static distance(point1, point2) {\n    const x = point2.x - point1.x;\n    const y = point2.y - point1.y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  getLength() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  add(point) {\n    return new Point(this.x + point.x, this.y + point.y);\n  }\n\n  clone() {\n    return new Point(this.x, this.y);\n  }\n\n  copyFrom(point) {\n    this.x = point.x;\n    this.y = point.y;\n  }\n\n  equals(point) {\n    return this === point || point && this.x === point.x && this.y === point.y;\n  }\n\n  normalize(thickness = 1) {\n    const current = this.getLength(),\n          scale = current !== 0 ? thickness / current : 0;\n    this.x *= scale;\n    this.y *= scale;\n  }\n\n  offset(dx, dy) {\n    this.x += dx;\n    this.y += dy;\n  }\n\n  subtract(point) {\n    return new Point(this.x - point.x, this.y - point.y);\n  }\n\n  toString() {\n    return \"(x=\" + this.x + \" , y=\" + this.y + \")\";\n  }\n\n}\nexport class Matrix {\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n\n  clone() {\n    return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\n  }\n\n  equals(matrix) {\n    return this === matrix || matrix && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d && this.tx === matrix.tx && this.ty === matrix.ty;\n  }\n\n  identity() {\n    this.a = this.d = 1;\n    this.b = this.c = this.tx = this.ty = 0;\n    return this;\n  } // Concat with this matrix (cos(q) -sin(q) 0, sin(q) cos(q) 0, 0 0 1)\n\n\n  rotate(angle) {\n    angle *= Math.PI / 180;\n    const cos = Math.cos(angle),\n          sin = Math.sin(angle),\n          a = this.a,\n          b = this.b,\n          c = this.c,\n          d = this.d,\n          tx = this.tx,\n          ty = this.ty;\n    this.a = cos * a + sin * c;\n    this.c = -sin * a + cos * c;\n    this.b = cos * b + sin * d;\n    this.d = -sin * b + cos * d;\n    this.tx = tx * cos + ty * -sin;\n    this.ty = tx * sin + ty * cos;\n    return this;\n  } // Concat with this matrix (sx 0 0, 0 sy 0, 0 0 1)\n\n\n  scale(sx, sy) {\n    this.a *= sx;\n    this.c *= sy;\n    this.b *= sx;\n    this.d *= sy;\n    this.tx *= sx;\n    this.ty *= sy;\n    return this;\n  }\n\n  translate(dx, dy) {\n    this.tx += dx;\n    this.ty += dy;\n    return this;\n  }\n\n  concat(mx) {\n    // Not tested\n    const a1 = this.a,\n          b1 = this.b,\n          c1 = this.c,\n          d1 = this.d,\n          a2 = mx.a,\n          b2 = mx.b,\n          c2 = mx.c,\n          d2 = mx.d,\n          tx2 = mx.tx,\n          ty2 = mx.ty;\n    this.a = a2 * a1 + c2 * b1;\n    this.b = b2 * a1 + d2 * b1;\n    this.c = a2 * c1 + c2 * d1;\n    this.d = b2 * c1 + d2 * d1;\n    this.tx += tx2 * a1 + ty2 * b1;\n    this.ty += tx2 * c1 + ty2 * d1;\n    return this;\n  }\n\n  transformPoint(point) {\n    const x = point.x,\n          y = point.y;\n    const res = new Point();\n    res.x = x * this.a + y * this.c + this.tx;\n    res.y = x * this.b + y * this.d + this.ty;\n    return res;\n  }\n\n  invert() {\n    const det = this.a * this.d - this.b * this.c;\n    const a = this.a,\n          b = this.b,\n          c = this.c,\n          d = this.d,\n          tx = this.tx,\n          ty = this.ty;\n    this.a = d / det;\n    this.b = -b / det;\n    this.c = -c / det;\n    this.d = a / det;\n    this.tx = (c * ty - d * tx) / det;\n    this.ty = (b * tx - a * ty) / det;\n    return this;\n  }\n\n  toString() {\n    return \"(a=\" + this.a + \", b=\" + this.b + \", c=\" + this.c + \", d=\" + this.d + \", tx=\" + this.tx + \", ty=\" + this.ty + \")\";\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/shared/transform/types.ts"],"names":["DragGeometry","constructor","x","y","width","height","rotation","HandleRoles","isResize","val","isResizeDown","isResizeLeft","isResizeRight","isResizeUp","RESIZE_UP","RESIZE_DOWN","RESIZE_LEFT","RESIZE_RIGHT","isRotate","ROTATE","isMove","MOVE","NO_ROLE","Point","distance","point1","point2","Math","sqrt","getLength","add","point","clone","copyFrom","equals","normalize","thickness","current","scale","offset","dx","dy","subtract","toString","Matrix","a","b","c","d","tx","ty","matrix","identity","rotate","angle","PI","cos","sin","sx","sy","translate","concat","mx","a1","b1","c1","d1","a2","b2","c2","d2","tx2","ty2","transformPoint","res","invert","det"],"mappings":"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","sourcesContent":["export class DragGeometry {\r\n  constructor(\r\n    public x: number = 0,\r\n    public y: number = 0,\r\n    public width: number = 0,\r\n    public height: number = 0,\r\n    public rotation: number = 0\r\n  ) {}\r\n}\r\n\r\nexport class HandleRoles {\r\n  public static NO_ROLE = 0;\r\n  public static RESIZE_UP = 1;\r\n  public static RESIZE_DOWN = 2;\r\n  public static RESIZE_LEFT = 4;\r\n  public static RESIZE_RIGHT = 8;\r\n  public static ROTATE = 16;\r\n  public static MOVE = 32;\r\n\r\n  public static isResize(val: number) {\r\n    return (\r\n      HandleRoles.isResizeDown(val) ||\r\n      HandleRoles.isResizeLeft(val) ||\r\n      HandleRoles.isResizeRight(val) ||\r\n      HandleRoles.isResizeUp(val)\r\n    );\r\n  }\r\n\r\n  public static isResizeUp(val: number) {\r\n    return (val & HandleRoles.RESIZE_UP) === HandleRoles.RESIZE_UP;\r\n  }\r\n\r\n  public static isResizeDown(val: number) {\r\n    return (val & HandleRoles.RESIZE_DOWN) === HandleRoles.RESIZE_DOWN;\r\n  }\r\n\r\n  public static isResizeLeft(val: number) {\r\n    return (val & HandleRoles.RESIZE_LEFT) === HandleRoles.RESIZE_LEFT;\r\n  }\r\n\r\n  public static isResizeRight(val: number) {\r\n    return (val & HandleRoles.RESIZE_RIGHT) === HandleRoles.RESIZE_RIGHT;\r\n  }\r\n\r\n  public static isRotate(val: number) {\r\n    return (val & HandleRoles.ROTATE) === HandleRoles.ROTATE;\r\n  }\r\n\r\n  public static isMove(val: number) {\r\n    return (val & HandleRoles.MOVE) === HandleRoles.MOVE;\r\n  }\r\n}\r\n\r\nexport class Point {\r\n  public static distance(point1: Point, point2: Point): number {\r\n    const x = point2.x - point1.x;\r\n    const y = point2.y - point1.y;\r\n\r\n    return Math.sqrt(x * x + y * y);\r\n  }\r\n\r\n  constructor(public x: number = 0, public y: number = 0) {}\r\n\r\n  getLength(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  add(point: Point): Point {\r\n    return new Point(this.x + point.x, this.y + point.y);\r\n  }\r\n\r\n  clone(): Point {\r\n    return new Point(this.x, this.y);\r\n  }\r\n\r\n  copyFrom(point: Point) {\r\n    this.x = point.x;\r\n    this.y = point.y;\r\n  }\r\n\r\n  equals(point: Point): boolean {\r\n    return this === point || (point && this.x === point.x && this.y === point.y);\r\n  }\r\n\r\n  normalize(thickness: number = 1) {\r\n    const current = this.getLength(),\r\n      scale = current !== 0 ? thickness / current : 0;\r\n\r\n    this.x *= scale;\r\n    this.y *= scale;\r\n  }\r\n\r\n  offset(dx: number, dy: number) {\r\n    this.x += dx;\r\n    this.y += dy;\r\n  }\r\n\r\n  subtract(point: Point): Point {\r\n    return new Point(this.x - point.x, this.y - point.y);\r\n  }\r\n\r\n  toString(): string {\r\n    return \"(x=\" + this.x + \" , y=\" + this.y + \")\";\r\n  }\r\n}\r\n\r\nexport class Matrix {\r\n  constructor(\r\n    public a: number = 1,\r\n    public b: number = 0,\r\n    public c: number = 0,\r\n    public d: number = 1,\r\n    public tx: number = 0,\r\n    public ty: number = 0\r\n  ) {}\r\n\r\n  clone(): Matrix {\r\n    return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\r\n  }\r\n\r\n  equals(matrix: Matrix): boolean {\r\n    return (\r\n      this === matrix ||\r\n      (matrix &&\r\n        this.a === matrix.a &&\r\n        this.b === matrix.b &&\r\n        this.c === matrix.c &&\r\n        this.d === matrix.d &&\r\n        this.tx === matrix.tx &&\r\n        this.ty === matrix.ty)\r\n    );\r\n  }\r\n\r\n  identity(): Matrix {\r\n    this.a = this.d = 1;\r\n    this.b = this.c = this.tx = this.ty = 0;\r\n    return this;\r\n  }\r\n\r\n  // Concat with this matrix (cos(q) -sin(q) 0, sin(q) cos(q) 0, 0 0 1)\r\n  rotate(angle: number): Matrix {\r\n    angle *= Math.PI / 180;\r\n    const cos = Math.cos(angle),\r\n      sin = Math.sin(angle),\r\n      a = this.a,\r\n      b = this.b,\r\n      c = this.c,\r\n      d = this.d,\r\n      tx = this.tx,\r\n      ty = this.ty;\r\n\r\n    this.a = cos * a + sin * c;\r\n    this.c = -sin * a + cos * c;\r\n    this.b = cos * b + sin * d;\r\n    this.d = -sin * b + cos * d;\r\n    this.tx = tx * cos + ty * -sin;\r\n    this.ty = tx * sin + ty * cos;\r\n    return this;\r\n  }\r\n\r\n  // Concat with this matrix (sx 0 0, 0 sy 0, 0 0 1)\r\n  scale(sx: number, sy: number): Matrix {\r\n    this.a *= sx;\r\n    this.c *= sy;\r\n    this.b *= sx;\r\n    this.d *= sy;\r\n    this.tx *= sx;\r\n    this.ty *= sy;\r\n\r\n    return this;\r\n  }\r\n\r\n  translate(dx: number, dy: number): Matrix {\r\n    this.tx += dx;\r\n    this.ty += dy;\r\n\r\n    return this;\r\n  }\r\n\r\n  concat(mx: Matrix): Matrix {\r\n    // Not tested\r\n    const a1 = this.a,\r\n      b1 = this.b,\r\n      c1 = this.c,\r\n      d1 = this.d,\r\n      a2 = mx.a,\r\n      b2 = mx.b,\r\n      c2 = mx.c,\r\n      d2 = mx.d,\r\n      tx2 = mx.tx,\r\n      ty2 = mx.ty;\r\n\r\n    this.a = a2 * a1 + c2 * b1;\r\n    this.b = b2 * a1 + d2 * b1;\r\n    this.c = a2 * c1 + c2 * d1;\r\n    this.d = b2 * c1 + d2 * d1;\r\n    this.tx += tx2 * a1 + ty2 * b1;\r\n    this.ty += tx2 * c1 + ty2 * d1;\r\n\r\n    return this;\r\n  }\r\n\r\n  transformPoint(point: Point): Point {\r\n    const x = point.x,\r\n      y = point.y;\r\n    const res = new Point();\r\n\r\n    res.x = x * this.a + y * this.c + this.tx;\r\n    res.y = x * this.b + y * this.d + this.ty;\r\n\r\n    return res;\r\n  }\r\n\r\n  invert(): Matrix {\r\n    const det = this.a * this.d - this.b * this.c;\r\n    const a = this.a,\r\n      b = this.b,\r\n      c = this.c,\r\n      d = this.d,\r\n      tx = this.tx,\r\n      ty = this.ty;\r\n\r\n    this.a = d / det;\r\n    this.b = -b / det;\r\n    this.c = -c / det;\r\n    this.d = a / det;\r\n    this.tx = (c * ty - d * tx) / det;\r\n    this.ty = (b * tx - a * ty) / det;\r\n\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    return (\r\n      \"(a=\" +\r\n      this.a +\r\n      \", b=\" +\r\n      this.b +\r\n      \", c=\" +\r\n      this.c +\r\n      \", d=\" +\r\n      this.d +\r\n      \", tx=\" +\r\n      this.tx +\r\n      \", ty=\" +\r\n      this.ty +\r\n      \")\"\r\n    );\r\n  }\r\n}\r\n\r\nexport interface IConstraint {\r\n  applyConstraint: (\r\n    original: DragGeometry,\r\n    translation: DragGeometry,\r\n    resizeHandleRole: number\r\n  ) => void;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}