{"ast":null,"code":"import { CourseStyle, StyleCSSFiles, CMSFile, StyleConfig, StylePropertiesConfig, StyleMetadataConfig, StyleList, StyleListItem, StyleListCategory, StyleListConfig, StyleListMap, ColorList, ColorListItem, FontList, FontListItem } from \"types\";\nimport { ColorListTypes, FontListTypes, StyleListTypes } from \"editor-constants\";\nimport { findObject, toNumber } from \"utils\";\nexport const convertToStyleModel = response => {\n  const result = new CourseStyle(response.id, response.name);\n  result.children = getFiles(response.styles);\n  result.config = getConfig(result);\n  result.cssFiles = getCSSFiles(result);\n  result.styles = getStyleList(result);\n  result.colors = getColorList(result);\n  result.fonts = getFontList(result);\n  return result;\n};\n\nconst getFiles = files => {\n  const arr = [];\n\n  if (files) {\n    for (let file of files) {\n      const {\n        name,\n        isFolder,\n        path,\n        content,\n        children\n      } = file;\n      const item = new CMSFile(name, path);\n      item.isFolder = isFolder;\n      item.content = content;\n\n      if (isFolder && children) {\n        item.children = getFiles(children);\n      }\n\n      arr.push(item);\n    }\n  }\n\n  return arr;\n};\n\nconst getConfig = style => {\n  const config = new StyleConfig();\n\n  if (style.children) {\n    const file = findObject(style.children, \"blmconfig.json\", \"name\");\n    const obj = JSON.parse((file === null || file === void 0 ? void 0 : file.content) || \"{}\");\n\n    if (obj) {\n      const {\n        name,\n        framework,\n        display,\n        properties,\n        metadatas,\n        navigation\n      } = obj;\n      config.name = name;\n      config.framework = framework;\n      config.display = display;\n      config.navigation = navigation;\n\n      if (properties) {\n        const props = new StylePropertiesConfig();\n\n        for (let key in properties) {\n          props[key] = properties[key];\n        }\n\n        config.properties = props;\n      }\n\n      if (metadatas) {\n        const metadata = new StyleMetadataConfig();\n\n        for (let key in metadatas) {\n          metadata[key] = metadatas[key];\n        }\n\n        config.metadatas = metadata;\n      }\n    }\n  }\n\n  return config;\n};\n\nconst getCSSFiles = style => {\n  const files = new StyleCSSFiles();\n\n  if (style.children) {\n    const folder = findObject(style.children, \"css\", \"name\");\n\n    if (folder && folder.children) {\n      var _findObject, _findObject2, _findObject3;\n\n      files.fonts = (_findObject = findObject(folder.children, \"fontfaces.css\", \"name\")) === null || _findObject === void 0 ? void 0 : _findObject.path;\n      files.template = (_findObject2 = findObject(folder.children, \"templates.css\", \"name\")) === null || _findObject2 === void 0 ? void 0 : _findObject2.path;\n      files.bootstrap = (_findObject3 = findObject(folder.children, \"custom-bootstrap.css\", \"name\")) === null || _findObject3 === void 0 ? void 0 : _findObject3.path;\n    }\n  }\n\n  return files;\n};\n\nconst getStyleList = style => {\n  const styles = new StyleList();\n  const types = Object.values(StyleListTypes);\n\n  if (style.children) {\n    const folder = findObject(style.children, \"css\", \"name\");\n    const thumbnail = findObject((folder === null || folder === void 0 ? void 0 : folder.children) || [], \"thumbnail\", \"name\");\n\n    if (folder && folder.children) {\n      const file = findObject(folder.children, \"componentstyles.json\", \"name\");\n      const obj = JSON.parse((file === null || file === void 0 ? void 0 : file.content) || \"{}\");\n\n      for (const prop in obj) {\n        if (types.includes(prop)) {\n          styles[prop] = createStyleListConfig(obj[prop], thumbnail);\n        }\n      }\n    }\n  }\n\n  return styles;\n};\n\nconst createStyleListConfig = (obj, folder) => {\n  const config = new StyleListConfig();\n  const items = createStyleListItems(obj, folder);\n  const {\n    map,\n    classNames\n  } = createStyleListMap(items);\n  config.items = items;\n  config.map = map;\n  config.classNames = classNames;\n  return config;\n};\n\nconst createStyleListItems = (obj, folder) => {\n  const items = [];\n  const files = (folder === null || folder === void 0 ? void 0 : folder.children) || [];\n\n  for (const prop in obj) {\n    const val = obj[prop];\n\n    if (typeof val === \"string\") {\n      var _findObject4, _findObject5;\n\n      const item = new StyleListItem();\n      item.name = prop;\n      item.className = val;\n      item.url = (_findObject4 = findObject(files, val + \".png\", \"name\")) === null || _findObject4 === void 0 ? void 0 : _findObject4.path;\n      item.overUrl = (_findObject5 = findObject(files, val + \"_over.png\", \"name\")) === null || _findObject5 === void 0 ? void 0 : _findObject5.path;\n      items.push(item);\n    } else {\n      const category = new StyleListCategory();\n      category.name = prop;\n      category.items = createStyleListItems(val, folder);\n      items.push(category);\n    }\n  }\n\n  return items;\n};\n\nconst createStyleListMap = items => {\n  const result = {\n    map: new StyleListMap(),\n    classNames: []\n  };\n\n  const reducer = (init, item) => {\n    const {\n      map,\n      classNames\n    } = init;\n\n    if (item instanceof StyleListCategory) {\n      item.items.reduce(reducer, init);\n    } else {\n      const {\n        className\n      } = item;\n      map[className] = item;\n      classNames.push(className);\n    }\n\n    return init;\n  };\n\n  return items.reduce(reducer, result);\n};\n\nconst getColorList = style => {\n  const colors = new ColorList();\n  const types = Object.values(ColorListTypes);\n\n  if (style.children) {\n    const folder = findObject(style.children, \"css\", \"name\");\n\n    if (folder && folder.children) {\n      const file = findObject(folder.children, \"componentstyles.json\", \"name\");\n      const obj = JSON.parse((file === null || file === void 0 ? void 0 : file.content) || \"{}\");\n\n      for (const prop in obj.colors) {\n        if (types.includes(prop)) {\n          colors[prop] = createColorListItems(obj.colors[prop]);\n        }\n      }\n    }\n  }\n\n  return colors;\n};\n\nconst createColorListItems = obj => {\n  const items = [];\n\n  for (const prop in obj) {\n    const val = obj[prop];\n\n    if (Array.isArray(val) && val.length > 1) {\n      var _toNumber;\n\n      const item = new ColorListItem();\n      item.name = prop;\n      item.color = val[0];\n      item.alpha = (_toNumber = toNumber(val[1])) !== null && _toNumber !== void 0 ? _toNumber : 100;\n      items.push(item);\n    }\n  }\n\n  return items;\n};\n\nconst getFontList = style => {\n  const fonts = new FontList();\n  const types = Object.values(FontListTypes);\n\n  if (style.children) {\n    const folder = findObject(style.children, \"css\", \"name\");\n\n    if (folder && folder.children) {\n      const file = findObject(folder.children, \"componentstyles.json\", \"name\");\n      const obj = JSON.parse((file === null || file === void 0 ? void 0 : file.content) || \"{}\");\n\n      for (const prop in obj.font) {\n        if (types.includes(prop)) {\n          fonts[prop] = createFontListItems(obj.font[prop]);\n        }\n      }\n    }\n  }\n\n  return fonts;\n};\n\nconst createFontListItems = obj => {\n  const items = [];\n\n  for (const prop in obj) {\n    const val = obj[prop];\n    const item = new FontListItem();\n    item.name = prop;\n    item.fontFamily = val;\n    items.push(item);\n  }\n\n  return items;\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/course/style/utils/index.ts"],"names":["CourseStyle","StyleCSSFiles","CMSFile","StyleConfig","StylePropertiesConfig","StyleMetadataConfig","StyleList","StyleListItem","StyleListCategory","StyleListConfig","StyleListMap","ColorList","ColorListItem","FontList","FontListItem","ColorListTypes","FontListTypes","StyleListTypes","findObject","toNumber","convertToStyleModel","response","result","id","name","children","getFiles","styles","config","getConfig","cssFiles","getCSSFiles","getStyleList","colors","getColorList","fonts","getFontList","files","arr","file","isFolder","path","content","item","push","style","obj","JSON","parse","framework","display","properties","metadatas","navigation","props","key","metadata","folder","template","bootstrap","types","Object","values","thumbnail","prop","includes","createStyleListConfig","items","createStyleListItems","map","classNames","createStyleListMap","val","className","url","overUrl","category","reducer","init","reduce","createColorListItems","Array","isArray","length","color","alpha","font","createFontListItems","fontFamily"],"mappings":"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","sourcesContent":["import {\r\n  CourseStyle,\r\n  StyleCSSFiles,\r\n  CMSFile,\r\n  StyleConfig,\r\n  StylePropertiesConfig,\r\n  StyleMetadataConfig,\r\n  StyleList,\r\n  StyleListItems,\r\n  StyleListItem,\r\n  StyleListCategory,\r\n  SimpleObject,\r\n  StyleListConfig,\r\n  StyleListMap,\r\n  ColorList,\r\n  ColorListItem,\r\n  FontList,\r\n  FontListItem,\r\n} from \"types\";\r\nimport { ColorListTypes, FontListTypes, StyleListTypes } from \"editor-constants\";\r\nimport { findObject, toNumber } from \"utils\";\r\nimport { CourseStyleResponse, StyleFileResponse } from \"../types\";\r\n\r\nexport const convertToStyleModel = (response: CourseStyleResponse) => {\r\n  const result = new CourseStyle(response.id, response.name);\r\n  result.children = getFiles(response.styles);\r\n  result.config = getConfig(result);\r\n  result.cssFiles = getCSSFiles(result);\r\n  result.styles = getStyleList(result);\r\n  result.colors = getColorList(result);\r\n  result.fonts = getFontList(result);\r\n\r\n  return result;\r\n};\r\n\r\nconst getFiles = (files: StyleFileResponse[]) => {\r\n  const arr = [];\r\n\r\n  if (files) {\r\n    for (let file of files) {\r\n      const { name, isFolder, path, content, children } = file;\r\n      const item = new CMSFile(name, path);\r\n\r\n      item.isFolder = isFolder;\r\n      item.content = content;\r\n\r\n      if (isFolder && children) {\r\n        item.children = getFiles(children);\r\n      }\r\n\r\n      arr.push(item);\r\n    }\r\n  }\r\n\r\n  return arr;\r\n};\r\n\r\nconst getConfig = (style: CourseStyle) => {\r\n  const config = new StyleConfig();\r\n\r\n  if (style.children) {\r\n    const file = findObject(style.children, \"blmconfig.json\", \"name\");\r\n    const obj = JSON.parse(file?.content || \"{}\");\r\n\r\n    if (obj) {\r\n      const { name, framework, display, properties, metadatas, navigation } = obj;\r\n      config.name = name;\r\n      config.framework = framework;\r\n      config.display = display;\r\n      config.navigation = navigation;\r\n\r\n      if (properties) {\r\n        const props = new StylePropertiesConfig();\r\n\r\n        for (let key in properties) {\r\n          props[key] = properties[key];\r\n        }\r\n\r\n        config.properties = props;\r\n      }\r\n\r\n      if (metadatas) {\r\n        const metadata = new StyleMetadataConfig();\r\n\r\n        for (let key in metadatas) {\r\n          metadata[key] = metadatas[key];\r\n        }\r\n\r\n        config.metadatas = metadata;\r\n      }\r\n    }\r\n  }\r\n\r\n  return config;\r\n};\r\n\r\nconst getCSSFiles = (style: CourseStyle) => {\r\n  const files = new StyleCSSFiles();\r\n\r\n  if (style.children) {\r\n    const folder = findObject(style.children, \"css\", \"name\");\r\n\r\n    if (folder && folder.children) {\r\n      files.fonts = findObject(folder.children, \"fontfaces.css\", \"name\")?.path;\r\n      files.template = findObject(folder.children, \"templates.css\", \"name\")?.path;\r\n      files.bootstrap = findObject(folder.children, \"custom-bootstrap.css\", \"name\")?.path;\r\n    }\r\n  }\r\n\r\n  return files;\r\n};\r\n\r\nconst getStyleList = (style: CourseStyle) => {\r\n  const styles = new StyleList();\r\n  const types = Object.values(StyleListTypes);\r\n\r\n  if (style.children) {\r\n    const folder = findObject(style.children, \"css\", \"name\");\r\n    const thumbnail = findObject(folder?.children || [], \"thumbnail\", \"name\");\r\n\r\n    if (folder && folder.children) {\r\n      const file = findObject(folder.children, \"componentstyles.json\", \"name\");\r\n      const obj = JSON.parse(file?.content || \"{}\");\r\n\r\n      for (const prop in obj) {\r\n        if (types.includes(prop as StyleListTypes)) {\r\n          styles[prop as StyleListTypes] = createStyleListConfig(obj[prop], thumbnail);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return styles;\r\n};\r\n\r\nconst createStyleListConfig = (obj: SimpleObject, folder?: CMSFile) => {\r\n  const config = new StyleListConfig();\r\n  const items = createStyleListItems(obj, folder);\r\n  const { map, classNames } = createStyleListMap(items);\r\n\r\n  config.items = items;\r\n  config.map = map;\r\n  config.classNames = classNames;\r\n\r\n  return config;\r\n};\r\n\r\nconst createStyleListItems = (obj: SimpleObject, folder?: CMSFile) => {\r\n  const items = [];\r\n  const files = folder?.children || [];\r\n\r\n  for (const prop in obj) {\r\n    const val = obj[prop];\r\n\r\n    if (typeof val === \"string\") {\r\n      const item = new StyleListItem();\r\n      item.name = prop;\r\n      item.className = val;\r\n      item.url = findObject(files, val + \".png\", \"name\")?.path;\r\n      item.overUrl = findObject(files, val + \"_over.png\", \"name\")?.path;\r\n\r\n      items.push(item);\r\n    } else {\r\n      const category = new StyleListCategory();\r\n      category.name = prop;\r\n      category.items = createStyleListItems(val, folder) as StyleListItem[];\r\n\r\n      items.push(category);\r\n    }\r\n  }\r\n\r\n  return items as StyleListItems;\r\n};\r\n\r\nconst createStyleListMap = (items: StyleListItems) => {\r\n  const result = { map: new StyleListMap(), classNames: [] as string[] };\r\n  const reducer = (init: typeof result, item: StyleListCategory | StyleListItem) => {\r\n    const { map, classNames } = init;\r\n\r\n    if (item instanceof StyleListCategory) {\r\n      item.items.reduce(reducer, init);\r\n    } else {\r\n      const { className } = item;\r\n\r\n      map[className] = item;\r\n      classNames.push(className);\r\n    }\r\n\r\n    return init;\r\n  };\r\n\r\n  return (items as StyleListCategory[]).reduce(reducer, result);\r\n};\r\n\r\nconst getColorList = (style: CourseStyle) => {\r\n  const colors = new ColorList();\r\n  const types = Object.values(ColorListTypes);\r\n\r\n  if (style.children) {\r\n    const folder = findObject(style.children, \"css\", \"name\");\r\n\r\n    if (folder && folder.children) {\r\n      const file = findObject(folder.children, \"componentstyles.json\", \"name\");\r\n      const obj = JSON.parse(file?.content || \"{}\");\r\n\r\n      for (const prop in obj.colors) {\r\n        if (types.includes(prop as ColorListTypes)) {\r\n          colors[prop as ColorListTypes] = createColorListItems(obj.colors[prop]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return colors;\r\n};\r\n\r\nconst createColorListItems = (obj: SimpleObject) => {\r\n  const items = [];\r\n\r\n  for (const prop in obj) {\r\n    const val = obj[prop];\r\n\r\n    if (Array.isArray(val) && val.length > 1) {\r\n      const item = new ColorListItem();\r\n      item.name = prop;\r\n      item.color = val[0];\r\n      item.alpha = toNumber(val[1]) ?? 100;\r\n\r\n      items.push(item);\r\n    }\r\n  }\r\n\r\n  return items;\r\n};\r\n\r\nconst getFontList = (style: CourseStyle) => {\r\n  const fonts = new FontList();\r\n  const types = Object.values(FontListTypes);\r\n\r\n  if (style.children) {\r\n    const folder = findObject(style.children, \"css\", \"name\");\r\n\r\n    if (folder && folder.children) {\r\n      const file = findObject(folder.children, \"componentstyles.json\", \"name\");\r\n      const obj = JSON.parse(file?.content || \"{}\");\r\n\r\n      for (const prop in obj.font) {\r\n        if (types.includes(prop as FontListTypes)) {\r\n          fonts[prop as FontListTypes] = createFontListItems(obj.font[prop]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return fonts;\r\n};\r\n\r\nconst createFontListItems = (obj: SimpleObject) => {\r\n  const items = [];\r\n\r\n  for (const prop in obj) {\r\n    const val = obj[prop];\r\n    const item = new FontListItem();\r\n    item.name = prop;\r\n    item.fontFamily = val;\r\n\r\n    items.push(item);\r\n  }\r\n\r\n  return items;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}