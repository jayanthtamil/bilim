{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\domain\\\\themes\\\\BlmThemes.tsx\";\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { Button, Tooltip } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { ElementType } from \"editor-constants\";\nimport { filterElements, getEvaluationChildren } from \"utils\";\nimport BlmThemeListItem from \"./theme-list-item\";\nimport \"./themes-styles.scss\";\n\nfunction BlmThemes(props) {\n  const {\n    element,\n    theme,\n    themes,\n    onChange\n  } = props;\n  const [selectedItem, setSelectedItem] = useState();\n  const [showList, setShowList] = useState(false);\n  const evaluations = useMemo(() => getEvaluationChildren(element).length, [element]);\n  const {\n    t\n  } = useTranslation(\"domain\");\n  const questions = useMemo(() => {\n    const arr = filterElements(element.children, [ElementType.Question]);\n    return arr.reduce((arr, question) => {\n      var _question$template;\n\n      const name = (_question$template = question.template) === null || _question$template === void 0 ? void 0 : _question$template.theme;\n\n      if (name && !arr.includes(name)) {\n        arr.push(name);\n      }\n\n      return arr;\n    }, []);\n  }, [element]);\n  const isEditable = theme && (theme !== \"None\" || evaluations === 0 && questions.length <= 1 && questions[0] !== \"None\");\n  useEffect(() => {\n    if (!theme && evaluations !== 0) {\n      updateChange(\"None\");\n    }\n  });\n\n  const updateChange = value => {\n    if (onChange) {\n      onChange({\n        target: {\n          name: \"theme\",\n          value\n        }\n      });\n    }\n  };\n\n  const handleItemClick = item => {\n    setSelectedItem(item);\n  };\n\n  const handleThemeClick = () => {\n    if (isEditable) {\n      setShowList(true);\n    }\n  };\n\n  const handleValidateBtnClick = event => {\n    if (selectedItem) {\n      updateChange(selectedItem.name);\n      setShowList(false);\n    }\n  };\n\n  const getCurrentThemes = () => {\n    if (themes) {\n      const allowed = [];\n\n      if (theme) {\n        if (theme !== \"None\" && evaluations !== 0) {\n          allowed.push(\"None\", theme);\n        } else if (questions.length === 1) {\n          allowed.push(\"None\", questions[0]);\n        }\n      }\n\n      return themes.filter(item => allowed.length === 0 || allowed.includes(item.name));\n    } else {\n      return [];\n    }\n  };\n\n  if (!showList && theme) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"theme-name-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, t(\"themes.theme\"), \" : \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"theme-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, theme), /*#__PURE__*/React.createElement(\"span\", {\n      className: clsx(\"theme-edit-btn\", {\n        disabled: !isEditable\n      }),\n      onClick: handleThemeClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }));\n  } else if (themes) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"themes-list-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"themes-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, t(\"themes.select\")), /*#__PURE__*/React.createElement(Tooltip, {\n      interactive: true,\n      placement: \"right-start\",\n      title: `${t(\"themes.tooltip\")}`,\n      classes: {\n        popper: \"evaluation-tooltip-popper\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"alert-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"themes-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, getCurrentThemes().map(theme => {\n      return /*#__PURE__*/React.createElement(BlmThemeListItem, {\n        key: theme.id,\n        data: theme,\n        selected: theme === selectedItem,\n        onClick: handleItemClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      });\n    })), /*#__PURE__*/React.createElement(Button, {\n      disableRipple: true,\n      disabled: !Boolean(selectedItem),\n      className: \"theme-validate-btn\",\n      onClick: handleValidateBtnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, t(\"themes.validate\")));\n  } else {\n    return null;\n  }\n}\n\nexport default BlmThemes;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/domain/themes/BlmThemes.tsx"],"names":["React","useState","useEffect","useMemo","clsx","Button","Tooltip","useTranslation","ElementType","filterElements","getEvaluationChildren","BlmThemeListItem","BlmThemes","props","element","theme","themes","onChange","selectedItem","setSelectedItem","showList","setShowList","evaluations","length","t","questions","arr","children","Question","reduce","question","name","template","includes","push","isEditable","updateChange","value","target","handleItemClick","item","handleThemeClick","handleValidateBtnClick","event","getCurrentThemes","allowed","filter","disabled","popper","map","id","Boolean"],"mappings":"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","sourcesContent":["import React, { useState, MouseEvent, useEffect, useMemo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { Button, Tooltip } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CourseElement, CustomChangeEvent, Theme } from \"types\";\r\nimport { ElementType } from \"editor-constants\";\r\nimport { filterElements, getEvaluationChildren } from \"utils\";\r\nimport BlmThemeListItem from \"./theme-list-item\";\r\nimport { ContainerProps } from \"./themes-container\";\r\nimport \"./themes-styles.scss\";\r\n\r\nexport type ThemeChangeEvent = CustomChangeEvent<string>;\r\n\r\nexport interface CompProps extends ContainerProps {\r\n  element: CourseElement;\r\n  theme: string | null;\r\n  onChange: (event: ThemeChangeEvent) => void;\r\n}\r\n\r\nfunction BlmThemes(props: CompProps) {\r\n  const { element, theme, themes, onChange } = props;\r\n  const [selectedItem, setSelectedItem] = useState<Theme | undefined>();\r\n  const [showList, setShowList] = useState(false);\r\n  const evaluations = useMemo(() => getEvaluationChildren(element).length, [element]);\r\n  const { t } = useTranslation(\"domain\");\r\n  const questions = useMemo(() => {\r\n    const arr = filterElements(element.children, [ElementType.Question]);\r\n\r\n    return arr.reduce((arr, question) => {\r\n      const name = question.template?.theme;\r\n\r\n      if (name && !arr.includes(name)) {\r\n        arr.push(name);\r\n      }\r\n\r\n      return arr;\r\n    }, [] as string[]);\r\n  }, [element]);\r\n  const isEditable =\r\n    theme &&\r\n    (theme !== \"None\" || (evaluations === 0 && questions.length <= 1 && questions[0] !== \"None\"));\r\n\r\n  useEffect(() => {\r\n    if (!theme && evaluations !== 0) {\r\n      updateChange(\"None\");\r\n    }\r\n  });\r\n\r\n  const updateChange = (value: string) => {\r\n    if (onChange) {\r\n      onChange({ target: { name: \"theme\", value } });\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (item: Theme) => {\r\n    setSelectedItem(item);\r\n  };\r\n\r\n  const handleThemeClick = () => {\r\n    if (isEditable) {\r\n      setShowList(true);\r\n    }\r\n  };\r\n\r\n  const handleValidateBtnClick = (event: MouseEvent) => {\r\n    if (selectedItem) {\r\n      updateChange(selectedItem.name);\r\n      setShowList(false);\r\n    }\r\n  };\r\n\r\n  const getCurrentThemes = () => {\r\n    if (themes) {\r\n      const allowed: string[] = [];\r\n\r\n      if (theme) {\r\n        if (theme !== \"None\" && evaluations !== 0) {\r\n          allowed.push(\"None\", theme);\r\n        } else if (questions.length === 1) {\r\n          allowed.push(\"None\", questions[0]);\r\n        }\r\n      }\r\n\r\n      return themes.filter((item) => allowed.length === 0 || allowed.includes(item.name));\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  if (!showList && theme) {\r\n    return (\r\n      <div className=\"theme-name-container\">\r\n        <span>{t(\"themes.theme\")} : </span>\r\n        <span className=\"theme-name\">{theme}</span>\r\n        <span\r\n          className={clsx(\"theme-edit-btn\", { disabled: !isEditable })}\r\n          onClick={handleThemeClick}\r\n        />\r\n      </div>\r\n    );\r\n  } else if (themes) {\r\n    return (\r\n      <div className=\"themes-list-container\">\r\n        <div className=\"themes-list-title\">\r\n          <span>{t(\"themes.select\")}</span>\r\n          <Tooltip\r\n            interactive\r\n            placement=\"right-start\"\r\n            title={`${t(\"themes.tooltip\")}`}\r\n            classes={{ popper: \"evaluation-tooltip-popper\" }}\r\n          >\r\n            <span className=\"alert-icon\" />\r\n          </Tooltip>\r\n        </div>\r\n        <div className=\"themes-list\">\r\n          {getCurrentThemes().map((theme) => {\r\n            return (\r\n              <BlmThemeListItem\r\n                key={theme.id}\r\n                data={theme}\r\n                selected={theme === selectedItem}\r\n                onClick={handleItemClick}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <Button\r\n          disableRipple={true}\r\n          disabled={!Boolean(selectedItem)}\r\n          className=\"theme-validate-btn\"\r\n          onClick={handleValidateBtnClick}\r\n        >\r\n          {t(\"themes.validate\")}\r\n        </Button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default BlmThemes;\r\n"]},"metadata":{},"sourceType":"module"}