{"ast":null,"code":"import { BLMElement } from \"types\";\nimport { MediaOptionTypes } from \"editor-constants\";\nimport { isVideo } from \"utils\";\nimport { getHTMLElement, setBLMElementBy } from \"../../core\";\nexport function setQuestionMediaComponent(parent, selector, media) {\n  const {\n    value,\n    isEditable\n  } = media;\n\n  if (isEditable) {\n    const model = createQuestionMedia(value);\n    const element = getHTMLElement(parent, selector);\n\n    if (element) {\n      setBLMElementBy(parent, selector, model);\n      setMediaHTML(element, value);\n    }\n  }\n}\n\nfunction createQuestionMedia(media) {\n  const model = new BLMElement();\n\n  if (media) {\n    model.option = MediaOptionTypes.Media;\n    model.editorOptions = media;\n  } else {\n    model.option = MediaOptionTypes.None;\n    model.editorOptions = null;\n  }\n\n  return model;\n}\n\nexport function setLinkMediaComponent(parent, selector, component, source, classAttr) {\n  const {\n    value,\n    isEditable\n  } = component;\n\n  if (isEditable && value) {\n    const file = value.option !== MediaOptionTypes.None ? value.media || source : undefined;\n    const isLinked = file === source;\n    const media = createLinkMedia(value, isLinked, file);\n    const element = getHTMLElement(parent, selector);\n    media.classAttr = classAttr;\n\n    if (element) {\n      setBLMElementBy(parent, selector, media);\n      setMediaHTML(element, file);\n    }\n  }\n}\n\nfunction createLinkMedia(data, isLinked, media) {\n  const model = new BLMElement();\n\n  if (media) {\n    model.option = isLinked ? MediaOptionTypes.Linked : MediaOptionTypes.Media;\n    model.editorOptions = data;\n  } else {\n    model.option = data.option;\n    model.editorOptions = data;\n  }\n\n  return model;\n}\n\nfunction setMediaHTML(element, file) {\n  if (file) {\n    const {\n      name,\n      type,\n      url\n    } = file;\n\n    if (isVideo(type)) {\n      element.innerHTML = `\n          <video>\n            <source src=\"${url}\" type=\"${type}\"></source>\n            Your browser does not support the video tag.\n          </video>\n          `;\n    } else {\n      element.innerHTML = `\n            <img src=\"${url}\" blm-originalfilename=\"${name}\"></img>\n          `;\n    }\n  } else {\n    element.innerHTML = `\n        <img src=\"\"></img>\n      `;\n  }\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/html/component/quiz-media.ts"],"names":["BLMElement","MediaOptionTypes","isVideo","getHTMLElement","setBLMElementBy","setQuestionMediaComponent","parent","selector","media","value","isEditable","model","createQuestionMedia","element","setMediaHTML","option","Media","editorOptions","None","setLinkMediaComponent","component","source","classAttr","file","undefined","isLinked","createLinkMedia","data","Linked","name","type","url","innerHTML"],"mappings":"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","sourcesContent":["import { ClassAttribute, BLMElement, LinkMedia, QuestionMediaComponent, MediaFile } from \"types\";\r\nimport { MediaOptionTypes } from \"editor-constants\";\r\nimport { isVideo } from \"utils\";\r\nimport { getHTMLElement, setBLMElementBy } from \"../../core\";\r\n\r\nexport function setQuestionMediaComponent(\r\n  parent: HTMLElement,\r\n  selector: string,\r\n  media: QuestionMediaComponent<MediaFile>\r\n) {\r\n  const { value, isEditable } = media;\r\n\r\n  if (isEditable) {\r\n    const model = createQuestionMedia(value);\r\n    const element = getHTMLElement(parent, selector);\r\n\r\n    if (element) {\r\n      setBLMElementBy(parent, selector, model);\r\n      setMediaHTML(element, value);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createQuestionMedia(media?: MediaFile) {\r\n  const model = new BLMElement();\r\n\r\n  if (media) {\r\n    model.option = MediaOptionTypes.Media;\r\n    model.editorOptions = media;\r\n  } else {\r\n    model.option = MediaOptionTypes.None;\r\n    model.editorOptions = null;\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\nexport function setLinkMediaComponent(\r\n  parent: HTMLElement,\r\n  selector: string,\r\n  component: QuestionMediaComponent<LinkMedia>,\r\n  source?: MediaFile,\r\n  classAttr?: ClassAttribute\r\n) {\r\n  const { value, isEditable } = component;\r\n\r\n  if (isEditable && value) {\r\n    const file = value.option !== MediaOptionTypes.None ? value.media || source : undefined;\r\n    const isLinked = file === source;\r\n    const media = createLinkMedia(value, isLinked, file);\r\n    const element = getHTMLElement(parent, selector);\r\n\r\n    media.classAttr = classAttr;\r\n\r\n    if (element) {\r\n      setBLMElementBy(parent, selector, media);\r\n      setMediaHTML(element, file);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createLinkMedia(data: LinkMedia, isLinked: boolean, media?: MediaFile | null) {\r\n  const model = new BLMElement();\r\n\r\n  if (media) {\r\n    model.option = isLinked ? MediaOptionTypes.Linked : MediaOptionTypes.Media;\r\n    model.editorOptions = data;\r\n  } else {\r\n    model.option = data.option;\r\n    model.editorOptions = data;\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\nfunction setMediaHTML(element: HTMLElement, file?: MediaFile) {\r\n  if (file) {\r\n    const { name, type, url } = file;\r\n\r\n    if (isVideo(type)) {\r\n      element.innerHTML = `\r\n          <video>\r\n            <source src=\"${url}\" type=\"${type}\"></source>\r\n            Your browser does not support the video tag.\r\n          </video>\r\n          `;\r\n    } else {\r\n      element.innerHTML = `\r\n            <img src=\"${url}\" blm-originalfilename=\"${name}\"></img>\r\n          `;\r\n    }\r\n  } else {\r\n    element.innerHTML = `\r\n        <img src=\"\"></img>\r\n      `;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}