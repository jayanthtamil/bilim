{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\shared\\\\evaluation-feedback\\\\BlmEvaluationFeedback.tsx\";\nimport React from \"react\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { BlmSubscriptInput } from \"shared\";\nimport BlmFeedbackSlider from \"../feedback-slider\";\nimport BlmFeedbackDisplay from \"../feedback-display\";\nimport { getScoreThreshold } from \"./utils\";\nimport \"./styles.scss\";\n\nfunction BlmEvaluationFeedback(props) {\n  const {\n    element,\n    score,\n    feedback,\n    display,\n    onChange\n  } = props;\n  const {\n    checked,\n    thresholds\n  } = feedback;\n  const {\n    t\n  } = useTranslation(\"shared\");\n\n  const updateChange = event => {\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  const handleChange = event => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    let newEvent;\n\n    if (name === \"score\") {\n      let successThresold = getScoreThreshold(thresholds);\n      let newThresholds = [...thresholds];\n      const ind = successThresold ? newThresholds.indexOf(successThresold) : -1;\n\n      if (ind !== -1) {\n        successThresold = { ...successThresold,\n          threshold: value\n        };\n        newThresholds.splice(ind, 1, successThresold); //BIL-467:[React] Evaluation - Success score overlap intermediare feedback\n        //BILIM-30[React] Evaluation - Success score overlap intermediary feedback\n\n        newEvent = updateIntermediateThresholds(ind - 1, successThresold.threshold, newThresholds);\n      }\n    } else if (name === \"feedback\") {\n      newEvent = {\n        target: {\n          name,\n          value: {\n            score,\n            feedback: { ...feedback,\n              checked: value\n            }\n          }\n        }\n      };\n    } else {\n      newEvent = {\n        target: {\n          name,\n          value\n        }\n      };\n    }\n\n    if (newEvent) {\n      updateChange(newEvent);\n    }\n  };\n\n  const handleSliderChange = thresholds => {\n    const successThreshold = getScoreThreshold(thresholds);\n    const newEvent = createEvent(thresholds, successThreshold === null || successThreshold === void 0 ? void 0 : successThreshold.threshold);\n    updateChange(newEvent);\n  };\n\n  const updateIntermediateThresholds = (ind, successScore, thresholds) => {\n    if (ind > 0 && ind < thresholds.length) {\n      let intermediate = thresholds[ind];\n\n      if (intermediate.threshold > successScore) {\n        intermediate = { ...intermediate\n        };\n        intermediate.threshold = Math.floor(successScore / 2);\n        thresholds.splice(ind, 1, intermediate);\n      }\n    }\n\n    return createEvent(thresholds, successScore);\n  };\n\n  const createEvent = (thresholds, newscore) => {\n    return {\n      target: {\n        name: \"feedback\",\n        value: {\n          score: newscore || score,\n          feedback: { ...feedback,\n            thresholds\n          }\n        }\n      }\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"evaluation-feedback-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"evaluation-score-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, t(\"evaluation_feedback.success_score\")), /*#__PURE__*/React.createElement(BlmSubscriptInput, {\n    name: \"score\",\n    label: \"/100\",\n    min: 1,\n    max: 99,\n    value: score,\n    className: \"evaluation-score-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    name: \"feedback\",\n    label: t(\"evaluation_feedback.title\"),\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 18\n      }\n    }),\n    checked: checked,\n    className: \"evaluation-feedback-frm-lbl\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }), checked && /*#__PURE__*/React.createElement(BlmFeedbackSlider, {\n    element: element,\n    thresholds: thresholds,\n    onChange: handleSliderChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }), display && checked && /*#__PURE__*/React.createElement(BlmFeedbackDisplay, {\n    name: \"feedback_display\",\n    value: display,\n    className: \"evaluation-feedback-display-dropdown\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default BlmEvaluationFeedback;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/shared/evaluation-feedback/BlmEvaluationFeedback.tsx"],"names":["React","Checkbox","FormControlLabel","useTranslation","BlmSubscriptInput","BlmFeedbackSlider","BlmFeedbackDisplay","getScoreThreshold","BlmEvaluationFeedback","props","element","score","feedback","display","onChange","checked","thresholds","t","updateChange","event","handleChange","target","name","value","type","newEvent","successThresold","newThresholds","ind","indexOf","threshold","splice","updateIntermediateThresholds","handleSliderChange","successThreshold","createEvent","successScore","length","intermediate","Math","floor","newscore"],"mappings":"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","sourcesContent":["import React, { ChangeEvent } from \"react\";\r\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { CourseElement, EvaluationFeedbackProps, Threshold } from \"types\";\r\nimport { FeedbackDisplayType } from \"editor-constants\";\r\nimport { BlmSubscriptInput, SubscriptInputChangeEvent } from \"shared\";\r\nimport BlmFeedbackSlider from \"../feedback-slider\";\r\nimport BlmFeedbackDisplay from \"../feedback-display\";\r\nimport { getScoreThreshold } from \"./utils\";\r\nimport \"./styles.scss\";\r\n\r\nexport type EvaluationFeedbackChangeEvent = {\r\n  target: {\r\n    name: \"feedback\" | \"feedback_display\";\r\n    value: { score: number; feedback: EvaluationFeedbackProps } | FeedbackDisplayType;\r\n  };\r\n};\r\n\r\ninterface CompProps {\r\n  element: CourseElement;\r\n  score: number;\r\n  feedback: EvaluationFeedbackProps;\r\n  display?: FeedbackDisplayType;\r\n  onChange: (event: EvaluationFeedbackChangeEvent) => void;\r\n}\r\n\r\nfunction BlmEvaluationFeedback(props: CompProps) {\r\n  const { element, score, feedback, display, onChange } = props;\r\n  const { checked, thresholds } = feedback;\r\n  const { t } = useTranslation(\"shared\");\r\n\r\n  const updateChange = (event: EvaluationFeedbackChangeEvent) => {\r\n    if (onChange) {\r\n      onChange(event);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<any> | SubscriptInputChangeEvent) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    let newEvent: EvaluationFeedbackChangeEvent | undefined;\r\n\r\n    if (name === \"score\") {\r\n      let successThresold = getScoreThreshold(thresholds);\r\n      let newThresholds = [...thresholds];\r\n      const ind = successThresold ? newThresholds.indexOf(successThresold) : -1;\r\n\r\n      if (ind !== -1) {\r\n        successThresold = {\r\n          ...successThresold,\r\n          threshold: value,\r\n        } as Threshold;\r\n\r\n        newThresholds.splice(ind, 1, successThresold);\r\n\r\n        //BIL-467:[React] Evaluation - Success score overlap intermediare feedback\r\n        //BILIM-30[React] Evaluation - Success score overlap intermediary feedback\r\n        newEvent = updateIntermediateThresholds(ind - 1, successThresold.threshold, newThresholds);\r\n      }\r\n    } else if (name === \"feedback\") {\r\n      newEvent = {\r\n        target: {\r\n          name,\r\n          value: { score, feedback: { ...feedback, checked: value } },\r\n        },\r\n      };\r\n    } else {\r\n      newEvent = { target: { name, value } };\r\n    }\r\n\r\n    if (newEvent) {\r\n      updateChange(newEvent);\r\n    }\r\n  };\r\n\r\n  const handleSliderChange = (thresholds: Threshold[]) => {\r\n    const successThreshold = getScoreThreshold(thresholds);\r\n    const newEvent = createEvent(thresholds, successThreshold?.threshold);\r\n\r\n    updateChange(newEvent);\r\n  };\r\n\r\n  const updateIntermediateThresholds = (\r\n    ind: number,\r\n    successScore: number,\r\n    thresholds: Threshold[]\r\n  ) => {\r\n    if (ind > 0 && ind < thresholds.length) {\r\n      let intermediate = thresholds[ind];\r\n\r\n      if (intermediate.threshold > successScore) {\r\n        intermediate = { ...intermediate };\r\n        intermediate.threshold = Math.floor(successScore / 2);\r\n\r\n        thresholds.splice(ind, 1, intermediate);\r\n      }\r\n    }\r\n\r\n    return createEvent(thresholds, successScore);\r\n  };\r\n\r\n  const createEvent = (\r\n    thresholds: Threshold[],\r\n    newscore?: number\r\n  ): EvaluationFeedbackChangeEvent => {\r\n    return {\r\n      target: {\r\n        name: \"feedback\",\r\n        value: {\r\n          score: newscore || score,\r\n          feedback: { ...feedback, thresholds },\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"evaluation-feedback-wrapper\">\r\n      <div className=\"evaluation-score-lbl\">{t(\"evaluation_feedback.success_score\")}</div>\r\n      <BlmSubscriptInput\r\n        name=\"score\"\r\n        label=\"/100\"\r\n        min={1}\r\n        max={99}\r\n        value={score}\r\n        className=\"evaluation-score-txt\"\r\n        onChange={handleChange}\r\n      />\r\n      <FormControlLabel\r\n        name=\"feedback\"\r\n        label={t(\"evaluation_feedback.title\")}\r\n        control={<Checkbox />}\r\n        checked={checked}\r\n        className=\"evaluation-feedback-frm-lbl\"\r\n        onChange={handleChange}\r\n      />\r\n      {checked && (\r\n        <BlmFeedbackSlider\r\n          element={element}\r\n          thresholds={thresholds}\r\n          onChange={handleSliderChange}\r\n        />\r\n      )}\r\n      {display && checked && (\r\n        <BlmFeedbackDisplay\r\n          name=\"feedback_display\"\r\n          value={display}\r\n          className=\"evaluation-feedback-display-dropdown\"\r\n          onChange={handleChange}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlmEvaluationFeedback;\r\n"]},"metadata":{},"sourceType":"module"}