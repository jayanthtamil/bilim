{"ast":null,"code":"import { findIndex } from \"utils\";\nimport * as actions from \"../types\";\nexport function setCourseProperties(properties) {\n  return {\n    type: actions.SET_COURSE_PROPERTIES,\n    payload: {\n      properties\n    }\n  };\n}\nexport function setElementProperties(properties) {\n  return {\n    type: actions.SET_ELEMENT_PROPERTIES,\n    payload: {\n      properties\n    }\n  };\n}\nexport function toggleInteraction(enable) {\n  return {\n    type: actions.TOGGLE_INTERACTION,\n    payload: enable\n  };\n}\nexport function openStructurePanel() {\n  return toggleStructurePanel(true);\n}\nexport function closeStructurePanel() {\n  return toggleStructurePanel(false);\n}\nexport function toggleStructurePanel(open) {\n  return {\n    type: actions.TOGGLE_STRUCTURE_PANEL,\n    payload: {\n      open\n    }\n  };\n}\nexport function toggleStructurePanelPin(isPinned) {\n  return {\n    type: actions.TOGGLE_STRUCTURE_PANEL_PIN,\n    payload: {\n      isPinned\n    }\n  };\n}\nexport function openElementPropertiesPanel(element) {\n  return toggleElementPropertiesPanel(true, element);\n}\nexport function closeElementPropertiesPanel() {\n  return toggleElementPropertiesPanel(false);\n}\nexport function toggleElementPropertiesPanel(open, element) {\n  return {\n    type: actions.TOGGLE_ELEMENT_PROPERTIES_PANEL,\n    payload: {\n      open,\n      element\n    }\n  };\n}\nexport function openElementTemplatesPanel(element, child) {\n  return toggleElementTemplatesPanel(true, element, child);\n}\nexport function closeElementTemplatesPanel() {\n  return toggleElementTemplatesPanel(false);\n}\nexport function toggleElementTemplatesPanel(open, element, child) {\n  return {\n    type: actions.TOGGLE_ELEMENT_TEMPLATES_PANEL,\n    payload: {\n      open,\n      element,\n      child\n    }\n  };\n}\nexport function setStructureAnchorEle(element) {\n  return {\n    type: actions.SET_STRUCTURE_ANCHOR_ELE,\n    payload: {\n      element: element\n    }\n  };\n}\nexport function selectTreeItem(item, node) {\n  return {\n    type: actions.SELECT_TREE_ITEM,\n    payload: {\n      item: item,\n      node: node\n    }\n  };\n}\nexport const setTreeAction = action => {\n  return {\n    type: actions.SET_TREE_ACTION,\n    payload: action\n  };\n};\nexport function setElementPropertiesTabIndex(index = -1) {\n  return {\n    type: actions.SET_ELEMENT_PROPERTIES_TAB_INDEX,\n    payload: {\n      index\n    }\n  };\n}\nexport function setTemplateView(display, orientation) {\n  return {\n    type: actions.SET_TEMPLATE_VIEW,\n    payload: {\n      display,\n      orientation\n    }\n  };\n}\nexport const previewTemplates = template => (dispatch, getState) => {\n  var _element$templates;\n\n  const {\n    course: {\n      element\n    }\n  } = getState();\n  const templates = (_element$templates = element.templates) === null || _element$templates === void 0 ? void 0 : _element$templates.templates;\n  let prevTemplates;\n\n  if (Array.isArray(template)) {\n    prevTemplates = template;\n  } else if (template) {\n    if (templates && templates.length !== 0) {\n      const newTemplates = [...templates];\n      const position = findIndex(newTemplates, template.id, \"id\");\n\n      if (position !== -1) {\n        newTemplates.splice(position, 1, template);\n        prevTemplates = newTemplates;\n      }\n    }\n  }\n\n  return dispatch(setPreviewTemplates(prevTemplates));\n};\nexport const setPreviewTemplates = templates => {\n  return {\n    type: actions.SET_PREVIEW_TEMPLATES,\n    payload: {\n      templates\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/editor/core/actions/index.ts"],"names":["findIndex","actions","setCourseProperties","properties","type","SET_COURSE_PROPERTIES","payload","setElementProperties","SET_ELEMENT_PROPERTIES","toggleInteraction","enable","TOGGLE_INTERACTION","openStructurePanel","toggleStructurePanel","closeStructurePanel","open","TOGGLE_STRUCTURE_PANEL","toggleStructurePanelPin","isPinned","TOGGLE_STRUCTURE_PANEL_PIN","openElementPropertiesPanel","element","toggleElementPropertiesPanel","closeElementPropertiesPanel","TOGGLE_ELEMENT_PROPERTIES_PANEL","openElementTemplatesPanel","child","toggleElementTemplatesPanel","closeElementTemplatesPanel","TOGGLE_ELEMENT_TEMPLATES_PANEL","setStructureAnchorEle","SET_STRUCTURE_ANCHOR_ELE","selectTreeItem","item","node","SELECT_TREE_ITEM","setTreeAction","action","SET_TREE_ACTION","setElementPropertiesTabIndex","index","SET_ELEMENT_PROPERTIES_TAB_INDEX","setTemplateView","display","orientation","SET_TEMPLATE_VIEW","previewTemplates","template","dispatch","getState","course","templates","prevTemplates","Array","isArray","length","newTemplates","position","id","splice","setPreviewTemplates","SET_PREVIEW_TEMPLATES"],"mappings":"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","sourcesContent":["import {\r\n  CourseElement,\r\n  CourseElementProps,\r\n  CourseElementTemplate,\r\n  CourseProps,\r\n  TreeAction,\r\n} from \"types\";\r\nimport { TemplateDisplayTypes, TemplateOrientationTypes } from \"editor-constants\";\r\nimport { findIndex } from \"utils\";\r\nimport { AppThunkAction } from \"redux/types\";\r\nimport * as actions from \"../types\";\r\n\r\nexport function setCourseProperties(properties?: CourseProps): actions.SetCoursePropertiesAction {\r\n  return {\r\n    type: actions.SET_COURSE_PROPERTIES,\r\n    payload: { properties },\r\n  };\r\n}\r\n\r\nexport function setElementProperties(\r\n  properties?: CourseElementProps\r\n): actions.SetElementPropertiesAction {\r\n  return {\r\n    type: actions.SET_ELEMENT_PROPERTIES,\r\n    payload: { properties },\r\n  };\r\n}\r\n\r\nexport function toggleInteraction(enable: boolean): actions.ToggleInteractionAction {\r\n  return {\r\n    type: actions.TOGGLE_INTERACTION,\r\n    payload: enable,\r\n  };\r\n}\r\n\r\nexport function openStructurePanel() {\r\n  return toggleStructurePanel(true);\r\n}\r\n\r\nexport function closeStructurePanel() {\r\n  return toggleStructurePanel(false);\r\n}\r\n\r\nexport function toggleStructurePanel(open?: boolean): actions.ToggleStructurePanelAction {\r\n  return {\r\n    type: actions.TOGGLE_STRUCTURE_PANEL,\r\n    payload: { open },\r\n  };\r\n}\r\n\r\nexport function toggleStructurePanelPin(isPinned?: boolean): actions.ToggleStructurePanelPinAction {\r\n  return {\r\n    type: actions.TOGGLE_STRUCTURE_PANEL_PIN,\r\n    payload: { isPinned },\r\n  };\r\n}\r\n\r\nexport function openElementPropertiesPanel(element: CourseElement) {\r\n  return toggleElementPropertiesPanel(true, element);\r\n}\r\n\r\nexport function closeElementPropertiesPanel() {\r\n  return toggleElementPropertiesPanel(false);\r\n}\r\n\r\nexport function toggleElementPropertiesPanel(\r\n  open: boolean,\r\n  element?: CourseElement\r\n): actions.ToggleElementPropertiesPanelAction {\r\n  return {\r\n    type: actions.TOGGLE_ELEMENT_PROPERTIES_PANEL,\r\n    payload: { open, element },\r\n  };\r\n}\r\n\r\nexport function openElementTemplatesPanel(element: CourseElement, child?: CourseElement) {\r\n  return toggleElementTemplatesPanel(true, element, child);\r\n}\r\n\r\nexport function closeElementTemplatesPanel() {\r\n  return toggleElementTemplatesPanel(false);\r\n}\r\n\r\nexport function toggleElementTemplatesPanel(\r\n  open: boolean,\r\n  element?: CourseElement,\r\n  child?: CourseElement\r\n): actions.ToggleElementTemplatesPanelAction {\r\n  return {\r\n    type: actions.TOGGLE_ELEMENT_TEMPLATES_PANEL,\r\n    payload: { open, element, child },\r\n  };\r\n}\r\n\r\nexport function setStructureAnchorEle(element: HTMLElement): actions.SetStructureAnchorEleAction {\r\n  return {\r\n    type: actions.SET_STRUCTURE_ANCHOR_ELE,\r\n    payload: { element: element },\r\n  };\r\n}\r\n\r\nexport function selectTreeItem(\r\n  item?: CourseElement,\r\n  node?: HTMLElement\r\n): actions.SelectTreeItemAction {\r\n  return {\r\n    type: actions.SELECT_TREE_ITEM,\r\n    payload: {\r\n      item: item,\r\n      node: node,\r\n    },\r\n  };\r\n}\r\n\r\nexport const setTreeAction = (action?: TreeAction) => {\r\n  return {\r\n    type: actions.SET_TREE_ACTION,\r\n    payload: action,\r\n  };\r\n};\r\n\r\nexport function setElementPropertiesTabIndex(\r\n  index: number = -1\r\n): actions.SetElementPropertiesPanelTabIndexAction {\r\n  return {\r\n    type: actions.SET_ELEMENT_PROPERTIES_TAB_INDEX,\r\n    payload: { index },\r\n  };\r\n}\r\n\r\nexport function setTemplateView(\r\n  display: TemplateDisplayTypes,\r\n  orientation?: TemplateOrientationTypes\r\n): actions.SetTemplateView {\r\n  return {\r\n    type: actions.SET_TEMPLATE_VIEW,\r\n    payload: { display, orientation },\r\n  };\r\n}\r\n\r\nexport const previewTemplates =\r\n  (\r\n    template?: CourseElementTemplate | CourseElementTemplate[]\r\n  ): AppThunkAction<actions.SetPreviewTemplates> =>\r\n  (dispatch, getState) => {\r\n    const {\r\n      course: { element },\r\n    } = getState();\r\n    const templates = element.templates?.templates;\r\n    let prevTemplates;\r\n\r\n    if (Array.isArray(template)) {\r\n      prevTemplates = template;\r\n    } else if (template) {\r\n      if (templates && templates.length !== 0) {\r\n        const newTemplates = [...templates];\r\n        const position = findIndex(newTemplates, template.id, \"id\");\r\n\r\n        if (position !== -1) {\r\n          newTemplates.splice(position, 1, template);\r\n\r\n          prevTemplates = newTemplates;\r\n        }\r\n      }\r\n    }\r\n\r\n    return dispatch(setPreviewTemplates(prevTemplates));\r\n  };\r\n\r\nexport const setPreviewTemplates = (\r\n  templates?: CourseElementTemplate[]\r\n): actions.SetPreviewTemplates => {\r\n  return {\r\n    type: actions.SET_PREVIEW_TEMPLATES,\r\n    payload: { templates },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}