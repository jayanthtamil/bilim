{"ast":null,"code":"import { BLMElement, StyleAttribute, ClassAttribute } from \"types\";\nimport { createHTMLElement, isImage, createRGBA } from \"utils\";\nimport { setBLMElement, getHTMLElement } from \"../../core\";\nimport { BG_STYLES, createVideoElement, clearOptions, clearEditorOptions, getMediaClass } from \"./common\";\nimport { BackgroundOptionTypes, MediaBackgroundPosition } from \"editor-constants\";\nexport function setScreenBackgroundHTML(template, background) {\n  const htmlStr = template.html;\n  const htmlElement = createHTMLElement(`<div>${template.html}</div>`);\n\n  if (htmlElement) {\n    clearScreenBackground(htmlElement);\n    setScreenBackground(htmlElement, background);\n    return htmlElement.innerHTML;\n  }\n\n  return htmlStr;\n}\n\nfunction setScreenBackground(parent, background) {\n  const outer = getHTMLElement(parent, \".outercontainer\");\n  const {\n    media,\n    tint: bgTint\n  } = background;\n  const {\n    main,\n    tint,\n    option,\n    optionValue,\n    option3,\n    position\n  } = media;\n\n  if (outer) {\n    const options = clearOptions(outer);\n    const editorOptions = clearEditorOptions(outer);\n    const hasImage = main && isImage(main.type);\n    const bgColor = createRGBA(bgTint.color, bgTint.alpha);\n\n    if (main) {\n      if (hasImage) {\n        const imageModel = new BLMElement();\n        const styleAttr = new StyleAttribute();\n        const classAttr = new ClassAttribute();\n        const tintRgb = createRGBA(tint.color, tint.alpha);\n        styleAttr.removables = BG_STYLES;\n        styleAttr.backgroundImage = `${tintRgb ? `linear-gradient(0deg, ${tintRgb}, ${tintRgb}), ` : \"\"}url(${main.url})`;\n        styleAttr.backgroundColor = bgColor;\n        imageModel.styleAttr = styleAttr;\n        imageModel.options = options;\n        imageModel.editorOptions = { ...editorOptions,\n          media: {\n            main,\n            tint: tint.color ? tint : undefined\n          }\n        };\n        classAttr.items.push(getMediaClass(option));\n        classAttr.items.push(getMediaClass(option3));\n\n        if (position) {\n          classAttr.items.push(position);\n        }\n\n        imageModel.classAttr = classAttr;\n\n        if (option === BackgroundOptionTypes.Parallax) {\n          imageModel.options = {\n            parallax: optionValue\n          };\n        }\n\n        imageModel.editorOptions = {\n          media: {\n            main,\n            tint: tint.color ? tint : undefined\n          }\n        };\n        setBLMElement(outer, imageModel);\n      } else {\n        const videoElement = createVideoElement(media);\n\n        if (videoElement) {\n          outer.insertBefore(videoElement, outer.firstChild);\n        }\n      }\n    }\n\n    if (!hasImage && bgColor) {\n      const colorModel = new BLMElement();\n      colorModel.options = options;\n\n      if (bgColor) {\n        const styleAttr = new StyleAttribute();\n        styleAttr.removables = BG_STYLES;\n        styleAttr.backgroundColor = bgColor;\n        colorModel.styleAttr = styleAttr;\n      }\n\n      setBLMElement(outer, colorModel);\n    }\n  }\n}\n\nfunction clearScreenBackground(parent) {\n  const outer = getHTMLElement(parent, \".outercontainer\");\n  const video = getHTMLElement(parent, \".videoouter\");\n\n  if (video && video.parentElement) {\n    video.parentElement.removeChild(video);\n  }\n\n  if (outer) {\n    clearScreenBackgroundHTML(outer);\n  }\n}\n\nfunction clearScreenBackgroundHTML(element) {\n  const model = new BLMElement();\n  model.classAttr = new ClassAttribute();\n  model.classAttr.removables = [...Object.values(MediaBackgroundPosition), \"backgroundstandard\", \"backgroundparallaxe\", \"backgroundmask\", \"backgroundfullscreen\", \"backgroundcover\", \"backgroundcontain\", \"backgroundnoresize\"];\n  model.styleAttr = new StyleAttribute();\n  model.styleAttr.removables = BG_STYLES;\n  model.options = clearOptions(element);\n  model.editorOptions = clearEditorOptions(element);\n  setBLMElement(element, model);\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/template-builders/html/background/screen.ts"],"names":["BLMElement","StyleAttribute","ClassAttribute","createHTMLElement","isImage","createRGBA","setBLMElement","getHTMLElement","BG_STYLES","createVideoElement","clearOptions","clearEditorOptions","getMediaClass","BackgroundOptionTypes","MediaBackgroundPosition","setScreenBackgroundHTML","template","background","htmlStr","html","htmlElement","clearScreenBackground","setScreenBackground","innerHTML","parent","outer","media","tint","bgTint","main","option","optionValue","option3","position","options","editorOptions","hasImage","type","bgColor","color","alpha","imageModel","styleAttr","classAttr","tintRgb","removables","backgroundImage","url","backgroundColor","undefined","items","push","Parallax","parallax","videoElement","insertBefore","firstChild","colorModel","video","parentElement","removeChild","clearScreenBackgroundHTML","element","model","Object","values"],"mappings":"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","sourcesContent":["import {\r\n  BLMElement,\r\n  StyleAttribute,\r\n  CourseElementTemplate,\r\n  ScreenBackground,\r\n  TemplateOptionsJSON,\r\n  TemplateEditorOptionsJSON,\r\n  ClassAttribute,\r\n} from \"types\";\r\nimport { createHTMLElement, isImage, createRGBA } from \"utils\";\r\nimport { setBLMElement, getHTMLElement } from \"../../core\";\r\nimport {\r\n  BG_STYLES,\r\n  createVideoElement,\r\n  clearOptions,\r\n  clearEditorOptions,\r\n  getMediaClass,\r\n} from \"./common\";\r\nimport { BackgroundOptionTypes, MediaBackgroundPosition } from \"editor-constants\";\r\n\r\nexport function setScreenBackgroundHTML(\r\n  template: CourseElementTemplate,\r\n  background: ScreenBackground\r\n) {\r\n  const htmlStr = template.html;\r\n  const htmlElement = createHTMLElement(`<div>${template.html}</div>`);\r\n\r\n  if (htmlElement) {\r\n    clearScreenBackground(htmlElement);\r\n    setScreenBackground(htmlElement, background);\r\n\r\n    return htmlElement.innerHTML;\r\n  }\r\n\r\n  return htmlStr;\r\n}\r\n\r\nfunction setScreenBackground(parent: HTMLElement, background: ScreenBackground) {\r\n  const outer = getHTMLElement(parent, \".outercontainer\");\r\n  const { media, tint: bgTint } = background;\r\n  const { main, tint, option, optionValue, option3, position } = media;\r\n\r\n  if (outer) {\r\n    const options = clearOptions(outer);\r\n    const editorOptions = clearEditorOptions(outer);\r\n    const hasImage = main && isImage(main.type);\r\n    const bgColor = createRGBA(bgTint.color, bgTint.alpha);\r\n\r\n    if (main) {\r\n      if (hasImage) {\r\n        const imageModel = new BLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>();\r\n        const styleAttr = new StyleAttribute();\r\n        const classAttr = new ClassAttribute();\r\n        const tintRgb = createRGBA(tint.color, tint.alpha);\r\n\r\n        styleAttr.removables = BG_STYLES;\r\n        styleAttr.backgroundImage = `${\r\n          tintRgb ? `linear-gradient(0deg, ${tintRgb}, ${tintRgb}), ` : \"\"\r\n        }url(${main.url})`;\r\n        styleAttr.backgroundColor = bgColor;\r\n\r\n        imageModel.styleAttr = styleAttr;\r\n        imageModel.options = options;\r\n        imageModel.editorOptions = {\r\n          ...editorOptions,\r\n          media: { main, tint: tint.color ? tint : undefined },\r\n        };\r\n\r\n        classAttr.items.push(getMediaClass(option));\r\n        classAttr.items.push(getMediaClass(option3));\r\n\r\n        if (position) {\r\n          classAttr.items.push(position);\r\n        }\r\n        imageModel.classAttr = classAttr;\r\n\r\n        if (option === BackgroundOptionTypes.Parallax) {\r\n          imageModel.options = { parallax: optionValue as number };\r\n        }\r\n\r\n        imageModel.editorOptions = {\r\n          media: { main, tint: tint.color ? tint : undefined },\r\n        };\r\n  \r\n        setBLMElement(outer, imageModel);\r\n      } else {\r\n        const videoElement = createVideoElement(media);\r\n\r\n        if (videoElement) {\r\n          outer.insertBefore(videoElement, outer.firstChild);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!hasImage && bgColor) {\r\n      const colorModel = new BLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>();\r\n      colorModel.options = options;\r\n\r\n      if (bgColor) {\r\n        const styleAttr = new StyleAttribute();\r\n\r\n        styleAttr.removables = BG_STYLES;\r\n        styleAttr.backgroundColor = bgColor;\r\n\r\n        colorModel.styleAttr = styleAttr;\r\n      }\r\n\r\n      setBLMElement(outer, colorModel);\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearScreenBackground(parent: HTMLElement) {\r\n  const outer = getHTMLElement(parent, \".outercontainer\");\r\n  const video = getHTMLElement(parent, \".videoouter\");\r\n\r\n  if (video && video.parentElement) {\r\n    video.parentElement.removeChild(video);\r\n  }\r\n\r\n  if (outer) {\r\n    clearScreenBackgroundHTML(outer);\r\n  }\r\n}\r\n\r\nfunction clearScreenBackgroundHTML(element: HTMLElement) {\r\n  const model = new BLMElement<TemplateOptionsJSON, TemplateEditorOptionsJSON>();\r\n\r\n  model.classAttr = new ClassAttribute();\r\n  model.classAttr.removables = [\r\n    ...Object.values(MediaBackgroundPosition),\r\n    \"backgroundstandard\",\r\n    \"backgroundparallaxe\",\r\n    \"backgroundmask\",\r\n    \"backgroundfullscreen\",\r\n    \"backgroundcover\",\r\n    \"backgroundcontain\",\r\n    \"backgroundnoresize\",\r\n  ];\r\n\r\n  model.styleAttr = new StyleAttribute();\r\n  model.styleAttr.removables = BG_STYLES;\r\n  model.options = clearOptions(element);\r\n  model.editorOptions = clearEditorOptions(element);\r\n\r\n  setBLMElement(element, model);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}