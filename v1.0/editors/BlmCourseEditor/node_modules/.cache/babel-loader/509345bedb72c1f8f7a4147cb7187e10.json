{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajesh\\\\Downloads\\\\bilim (2)\\\\bilim\\\\v1.0\\\\editors\\\\BlmCourseEditor\\\\src\\\\components\\\\content-editor\\\\components\\\\media\\\\target\\\\BlmMediaTarget.tsx\";\nimport React from \"react\";\nimport { MenuItem, Select } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { ElementType, MediaTrasitions, TargetBackgroundDisplay } from \"editor-constants\";\nimport { getMediaTarget } from \"utils\";\nimport BlmStructureSelect from \"components/structures/select\";\nimport { useContentEditorCtx } from \"components/content-editor/core\";\nimport { updateMediaComponent } from \"components/content-editor/reducers\";\nimport BlmMediaDashboard from \"../dashboard\";\nimport clsx from \"clsx\";\nimport \"./styles.scss\";\n\nfunction BlmMediaImage(props) {\n  const {\n    data\n  } = props;\n  const {\n    element,\n    template: content,\n    dispatch\n  } = useContentEditorCtx();\n  const state = getMediaTarget(data, content);\n  const target = state.value;\n  const {\n    name,\n    template,\n    transition,\n    background\n  } = target;\n  const {\n    t\n  } = useTranslation(\"content-editor\");\n\n  const updateChange = newTarget => {\n    const newData = { ...state,\n      value: newTarget\n    };\n\n    if (dispatch) {\n      dispatch(updateMediaComponent(newData));\n    }\n  };\n\n  const updateBackgroundChange = background => {\n    const newTarget = { ...target,\n      background\n    };\n    updateChange(newTarget);\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    const newTarget = { ...target\n    };\n\n    if (name === \"name\") {\n      newTarget.name = value.replace(/\\s/g, \"\");\n    } else if (name === \"template\") {\n      newTarget.template = value;\n    } else if (name === \"transition\") {\n      newTarget.transition = value;\n    }\n\n    updateChange(newTarget);\n  };\n\n  const handleTemplateClick = () => {\n    updateBackgroundChange(TargetBackgroundDisplay.Template);\n  };\n\n  const handleTargetClick = () => {\n    updateBackgroundChange(TargetBackgroundDisplay.Target);\n  };\n\n  return /*#__PURE__*/React.createElement(BlmMediaDashboard, {\n    data: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-media-target-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target-params-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target-params-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, t(\"title.parameters\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target-name-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, t(\"target.target_name\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    maxLength: 15,\n    className: \"target-name-txt\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target-other-params-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target-template-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, t(\"target.default_temp\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target-transition-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, t(\"target.transition\")), /*#__PURE__*/React.createElement(BlmStructureSelect, {\n    name: \"template\",\n    className: \"target-template-dropdown\",\n    value: template,\n    element: element,\n    structures: {\n      show: false\n    },\n    annexes: {\n      show: true\n    },\n    selectables: [ElementType.SimplePage, ElementType.SimpleContent, ElementType.Page, ElementType.Screen],\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    name: \"transition\",\n    value: transition,\n    className: \"target-transition-dropdown\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: MediaTrasitions.Fade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, t(\"target.fade\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: MediaTrasitions.WipeLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, t(\"target.wipe_left\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: MediaTrasitions.WipeDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, t(\"target.wipe_down\")), /*#__PURE__*/React.createElement(MenuItem, {\n    value: MediaTrasitions.None,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, t(\"target.none\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target-background-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"target-background-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, t(\"target.target_background\")), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"target-bg-template-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, t(\"target.full_template\")), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"target-bg-target-lbl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, t(\"target.only_target\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"target-bg-template\", {\n      selected: background === TargetBackgroundDisplay.Template\n    }),\n    onClick: handleTemplateClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(\"target-bg-target\", {\n      selected: background === TargetBackgroundDisplay.Target\n    }),\n    onClick: handleTargetClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default BlmMediaImage;","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/components/content-editor/components/media/target/BlmMediaTarget.tsx"],"names":["React","MenuItem","Select","useTranslation","ElementType","MediaTrasitions","TargetBackgroundDisplay","getMediaTarget","BlmStructureSelect","useContentEditorCtx","updateMediaComponent","BlmMediaDashboard","clsx","BlmMediaImage","props","data","element","template","content","dispatch","state","target","value","name","transition","background","t","updateChange","newTarget","newData","updateBackgroundChange","handleChange","event","replace","handleTemplateClick","Template","handleTargetClick","Target","show","SimplePage","SimpleContent","Page","Screen","Fade","WipeLeft","WipeDown","None","selected"],"mappings":"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","sourcesContent":["import React, { ChangeEvent } from \"react\";\r\nimport { MenuItem, Select } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { MediaComponent, MediaTarget } from \"types\";\r\nimport { ElementType, MediaTrasitions, TargetBackgroundDisplay } from \"editor-constants\";\r\nimport { getMediaTarget } from \"utils\";\r\nimport BlmStructureSelect, { StructureSelectChangeEvent } from \"components/structures/select\";\r\nimport { useContentEditorCtx } from \"components/content-editor/core\";\r\nimport { updateMediaComponent } from \"components/content-editor/reducers\";\r\nimport BlmMediaDashboard from \"../dashboard\";\r\nimport clsx from \"clsx\";\r\nimport \"./styles.scss\";\r\n\r\nexport interface CompProps {\r\n  label: string;\r\n  data: MediaComponent;\r\n}\r\n\r\nfunction BlmMediaImage(props: CompProps) {\r\n  const { data } = props;\r\n  const { element, template: content, dispatch } = useContentEditorCtx();\r\n  const state = getMediaTarget(data, content);\r\n  const target = state.value;\r\n  const { name, template, transition, background } = target;\r\n  const { t } = useTranslation(\"content-editor\");\r\n\r\n  const updateChange = (newTarget: MediaTarget) => {\r\n    const newData = {\r\n      ...state,\r\n      value: newTarget,\r\n    };\r\n\r\n    if (dispatch) {\r\n      dispatch(updateMediaComponent(newData));\r\n    }\r\n  };\r\n\r\n  const updateBackgroundChange = (background: TargetBackgroundDisplay) => {\r\n    const newTarget = { ...target, background };\r\n\r\n    updateChange(newTarget);\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<any> | StructureSelectChangeEvent) => {\r\n    const {\r\n      name,\r\n      value,\r\n    }: {\r\n      name: string;\r\n      value: any;\r\n    } = event.target;\r\n    const newTarget = { ...target };\r\n\r\n    if (name === \"name\") {\r\n      newTarget.name = value.replace(/\\s/g, \"\");\r\n    } else if (name === \"template\") {\r\n      newTarget.template = value;\r\n    } else if (name === \"transition\") {\r\n      newTarget.transition = value;\r\n    }\r\n\r\n    updateChange(newTarget);\r\n  };\r\n\r\n  const handleTemplateClick = () => {\r\n    updateBackgroundChange(TargetBackgroundDisplay.Template);\r\n  };\r\n\r\n  const handleTargetClick = () => {\r\n    updateBackgroundChange(TargetBackgroundDisplay.Target);\r\n  };\r\n\r\n  return (\r\n    <BlmMediaDashboard data={state}>\r\n      <div className=\"content-media-target-wrapper\">\r\n        <div className=\"target-params-wrapper\">\r\n          <div className=\"target-params-title\">{t(\"title.parameters\")}</div>\r\n          <div className=\"target-name-lbl\">{t(\"target.target_name\")}</div>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            maxLength={15}\r\n            className=\"target-name-txt\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"target-other-params-wrapper\">\r\n          <div className=\"target-template-lbl\">{t(\"target.default_temp\")}</div>\r\n          <div className=\"target-transition-lbl\">{t(\"target.transition\")}</div>\r\n          <BlmStructureSelect\r\n            name=\"template\"\r\n            className=\"target-template-dropdown\"\r\n            value={template}\r\n            element={element!}\r\n            structures={{ show: false }}\r\n            annexes={{ show: true }}\r\n            selectables={[\r\n              ElementType.SimplePage,\r\n              ElementType.SimpleContent,\r\n              ElementType.Page,\r\n              ElementType.Screen,\r\n            ]}\r\n            onChange={handleChange}\r\n          />\r\n          <Select\r\n            name=\"transition\"\r\n            value={transition}\r\n            className=\"target-transition-dropdown\"\r\n            onChange={handleChange}\r\n          >\r\n            <MenuItem value={MediaTrasitions.Fade}>{t(\"target.fade\")}</MenuItem>\r\n            <MenuItem value={MediaTrasitions.WipeLeft}>{t(\"target.wipe_left\")}</MenuItem>\r\n            <MenuItem value={MediaTrasitions.WipeDown}>{t(\"target.wipe_down\")}</MenuItem>\r\n            <MenuItem value={MediaTrasitions.None}>{t(\"target.none\")}</MenuItem>\r\n          </Select>\r\n          <div className=\"target-background-wrapper\">\r\n            <span className=\"target-background-lbl\">{t(\"target.target_background\")}</span>\r\n            <span className=\"target-bg-template-lbl\">{t(\"target.full_template\")}</span>\r\n            <span className=\"target-bg-target-lbl\">{t(\"target.only_target\")}</span>\r\n            <div\r\n              className={clsx(\"target-bg-template\", {\r\n                selected: background === TargetBackgroundDisplay.Template,\r\n              })}\r\n              onClick={handleTemplateClick}\r\n            />\r\n            <div\r\n              className={clsx(\"target-bg-target\", {\r\n                selected: background === TargetBackgroundDisplay.Target,\r\n              })}\r\n              onClick={handleTargetClick}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </BlmMediaDashboard>\r\n  );\r\n}\r\n\r\nexport default BlmMediaImage;\r\n"]},"metadata":{},"sourceType":"module"}