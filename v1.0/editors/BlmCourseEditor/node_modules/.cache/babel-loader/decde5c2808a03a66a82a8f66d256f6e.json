{"ast":null,"code":"import { createAction } from \"redux-api-middleware\";\nimport { createUUID } from \"utils\";\nimport { BASE_URL, API_DEFAULT_QUERY_STRING } from \"config\";\nimport { addLoader, removeLoader } from \"redux/actions\";\nexport function fetchAPI({\n  url,\n  types,\n  method = \"GET\",\n  authenticated = true,\n  headers,\n  body,\n  meta,\n  query = \"\"\n}) {\n  return (dispatch, getState) => {\n    const [started, success, error] = types;\n    const endpoint = /^https?:\\/\\//.test(url) ? url : `${BASE_URL}${url}${API_DEFAULT_QUERY_STRING}${query}`;\n    const loaderId = createUUID();\n    const {\n      user: {\n        accessToken,\n        csrfToken\n      }\n    } = getState(); //We neeed to omit content-type header for the Fetch request. Then the browser will automatically add the Content type header including the Form Boundary.\n\n    const createHeaders = state => {\n      const result = headers || {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      };\n\n      if (!result.Accept) {\n        result.Accept = \"*/*\";\n      }\n\n      if (authenticated && accessToken) {\n        result.Authorization = `Bearer ${accessToken}`;\n      }\n\n      if (authenticated && method === \"POST\" && csrfToken) {\n        result[\"X-CSRF-Token\"] = csrfToken;\n      }\n\n      return result;\n    };\n\n    const customFetch = async (...args) => {\n      const response = await fetch(...args);\n      const result = response.clone();\n      const resContentType = response.headers.get(\"Content-Type\");\n      hideLoader();\n\n      if (resContentType && ~resContentType.indexOf(\"json\")) {\n        const json = await response.json();\n\n        if (json.error_no) {\n          let {\n            error_no,\n            access_token\n          } = json;\n\n          if (!(error_no === \"0\" && access_token && access_token !== \"\")) {\n            return new Response(result.body, {\n              status: 500,\n              headers: result.headers\n            });\n          }\n        }\n      }\n\n      return result;\n    };\n\n    const handleSuccessPayload = (action, state, response) => {\n      return getResponseBody(response);\n    };\n\n    const getResponseBody = response => {\n      const resContentType = response.headers.get(\"Content-Type\");\n\n      if (resContentType && ~resContentType.indexOf(\"json\")) {\n        return response.json().then(json => {\n          return json;\n        });\n      } else {\n        return response.text().then(text => {\n          return text;\n        });\n      }\n    };\n\n    const showLoader = () => {\n      dispatch(addLoader(loaderId, started));\n    };\n\n    const hideLoader = () => {\n      dispatch(removeLoader(loaderId));\n    };\n\n    showLoader();\n    const rsaaAction = createAction({\n      endpoint,\n      method,\n      headers: createHeaders,\n      body,\n      fetch: customFetch,\n      types: [{\n        type: started,\n        meta\n      }, {\n        type: success,\n        meta,\n        payload: handleSuccessPayload\n      }, {\n        type: error,\n        meta\n      }]\n    });\n    return dispatch(rsaaAction);\n  };\n}","map":{"version":3,"sources":["C:/Users/Rajesh/Downloads/bilim (2)/bilim/v1.0/editors/BlmCourseEditor/src/redux/api/api.ts"],"names":["createAction","createUUID","BASE_URL","API_DEFAULT_QUERY_STRING","addLoader","removeLoader","fetchAPI","url","types","method","authenticated","headers","body","meta","query","dispatch","getState","started","success","error","endpoint","test","loaderId","user","accessToken","csrfToken","createHeaders","state","result","Accept","Authorization","customFetch","args","response","fetch","clone","resContentType","get","hideLoader","indexOf","json","error_no","access_token","Response","status","handleSuccessPayload","action","getResponseBody","then","text","showLoader","rsaaAction","type","payload"],"mappings":"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","sourcesContent":["import { AnyAction } from \"redux\";\r\nimport { createAction } from \"redux-api-middleware\";\r\n\r\nimport { SimpleObject } from \"types\";\r\nimport { createUUID } from \"utils\";\r\nimport { BASE_URL, API_DEFAULT_QUERY_STRING } from \"config\";\r\nimport { RootState, RSAAThunkAction } from \"redux/types\";\r\nimport { addLoader, removeLoader } from \"redux/actions\";\r\n\r\ninterface APIParam {\r\n  url: string;\r\n  types: string[];\r\n  method?: \"GET\" | \"PUT\" | \"PATCH\" | \"POST\" | \"DELETE\";\r\n  headers?: SimpleObject;\r\n  body?: BodyInit;\r\n  authenticated?: boolean;\r\n  meta?: object | string;\r\n  query?: string;\r\n}\r\n\r\nexport function fetchAPI({\r\n  url,\r\n  types,\r\n  method = \"GET\",\r\n  authenticated = true,\r\n  headers,\r\n  body,\r\n  meta,\r\n  query = \"\",\r\n}: APIParam): RSAAThunkAction {\r\n  return (dispatch, getState) => {\r\n    const [started, success, error] = types;\r\n    const endpoint = /^https?:\\/\\//.test(url)\r\n      ? url\r\n      : `${BASE_URL}${url}${API_DEFAULT_QUERY_STRING}${query}`;\r\n    const loaderId = createUUID();\r\n    const {\r\n      user: { accessToken, csrfToken },\r\n    } = getState();\r\n\r\n    //We neeed to omit content-type header for the Fetch request. Then the browser will automatically add the Content type header including the Form Boundary.\r\n    const createHeaders = (state: RootState): HeadersInit => {\r\n      const result = headers || { \"Content-Type\": \"application/json\", Accept: \"application/json\" };\r\n\r\n      if (!result.Accept) {\r\n        result.Accept = \"*/*\";\r\n      }\r\n\r\n      if (authenticated && accessToken) {\r\n        result.Authorization = `Bearer ${accessToken}`;\r\n      }\r\n\r\n      if (authenticated && method === \"POST\" && csrfToken) {\r\n        result[\"X-CSRF-Token\"] = csrfToken;\r\n      }\r\n\r\n      return result;\r\n    };\r\n\r\n    const customFetch: typeof fetch = async (...args) => {\r\n      const response = await fetch(...args);\r\n      const result = response.clone();\r\n      const resContentType = response.headers.get(\"Content-Type\");\r\n\r\n      hideLoader();\r\n\r\n      if (resContentType && ~resContentType.indexOf(\"json\")) {\r\n        const json = await response.json();\r\n\r\n        if (json.error_no) {\r\n          let { error_no, access_token } = json;\r\n\r\n          if (!(error_no === \"0\" && access_token && access_token !== \"\")) {\r\n            return new Response(result.body, {\r\n              status: 500,\r\n              headers: result.headers,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n\r\n    const handleSuccessPayload = (action: AnyAction, state: RootState, response: Response) => {\r\n      return getResponseBody(response);\r\n    };\r\n\r\n    const getResponseBody = (response: Response) => {\r\n      const resContentType = response.headers.get(\"Content-Type\");\r\n\r\n      if (resContentType && ~resContentType.indexOf(\"json\")) {\r\n        return response.json().then((json) => {\r\n          return json;\r\n        });\r\n      } else {\r\n        return response.text().then((text) => {\r\n          return text;\r\n        });\r\n      }\r\n    };\r\n\r\n    const showLoader = () => {\r\n      dispatch(addLoader(loaderId, started));\r\n    };\r\n\r\n    const hideLoader = () => {\r\n      dispatch(removeLoader(loaderId));\r\n    };\r\n\r\n    showLoader();\r\n\r\n    const rsaaAction = createAction({\r\n      endpoint,\r\n      method,\r\n      headers: createHeaders,\r\n      body,\r\n      fetch: customFetch,\r\n      types: [\r\n        {\r\n          type: started,\r\n          meta,\r\n        },\r\n        {\r\n          type: success,\r\n          meta,\r\n          payload: handleSuccessPayload,\r\n        },\r\n        {\r\n          type: error,\r\n          meta,\r\n        },\r\n      ],\r\n    });\r\n\r\n    return dispatch(rsaaAction);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}